<section>
  <title>Composition of transformation strategies</title>

  <para>
    Rules define one-step transformations 

    Program transformations require many one-step transformations
	and selection of rules

    Choice; identity, Failure, and Negation
  </para>

<section id="leftchoice">
    <title>Deterministic Choice (left choice)</title>

    <para>
      The left choice or deterministic choice s1 &lt;+ s2 chooses one
      of the trans- formations to apply. That is, s1 is first applied,
      and s2 is only applied if s2 fails. Formally, the left choice
      operator is defined as:
    </para>

    <para>
      A typical application of the deterministic choice operator is to
      declare the priority between rules with overlapping left-hand
      sides.
    </para>

<screen>
PlusAssoc :
  Plus(Plus(e1, e2), e3) -> Plus(e1, Plus(e2, e3))

EvalPlus :
  Plus(Int(i),Int(j)) -> Int(k) where &lt;addS>(i,j) => k
</screen>

<screen>
Plus(Int("14"),Int("3"))
stratego> PlusAssoc
command failed
stratego> PlusAssoc &lt;+ EvalPlus
Int("17")

</screen>

    <para>
      A useful application of &lt;+ in combination with id is the
      reflexive closure of a strategy s. The strategy try(s) tries to
      apply the strategy s, but if that fails, just succeeds using id.
    </para>

    <screen>try(s) = s &lt;+ id</screen>

    <para>
      Note that the choice is committed once the left-hand side
      strategy has succeeded, even if the continuation strategy fails.
    </para>
    
</section>

<section id="choice">
    <title>Choice</title>

    <para>
      The deterministic choice operator prescribes that the left
      alternative should be tried before the right alternative, and
      that the latter is only used if the first fails. There are
      applications where it is not necessary to define the order of
      the alternatives. In those cases non-deterministic choice can be
      used.
    </para>

    <para>
      The non-deterministic choice operator s1 + s2 chooses one of the
      two strategies s1 or s2 to apply, such that the one it chooses
      succeeds. If both strategies fail, then the choice fails as
      well.
    </para>

    <para>
      Operationally one can imagine the choice operator to first try
      one strategy, and, if that fails, to try the other. The order in
      which this is done is undefined, i.e., arbitrarily chosen by the
      compiler.
    </para>

</section>

<section id="conditionalchoice">
  <title>Conditional choice</title>

  <para>
      Conditional choice

      Syntax: s1 &lt; s2 + s3 

      First apply s1 if that succeeds apply s2 to the result else
      apply s3 to the original term

      Do not backtrack to s3 if s2 fails!
  </para>

  <screen>
  ?Call( , )    &lt; complex-transformation-for-call
+ ?BinOp( , , ) &lt; transformation-for-binop
+ other-cases</screen>

  <para>
      If Then Else

      Syntax: if s1 then s2 else s3 end 

      Equivalent to: where(s1) &lt; s2 + s3
  </para>

  <screen>
foo
  </screen>

  <para>
      If-Then

      Syntax: if s1 then s2 end 

      Equivalent to if s1 then s2 else id end
  </para>

  <screen>
foo
  </screen>

</section>

<section id="identity">
  <title>Identity</title>

  <para>
Syntax: id 

Always succeed 

Some laws 
    </para>

    <screen>
id ; s = s

s ; id = s

id &lt;+ s  = id

s &lt;+ id /=  s

s1 &lt; id + s2 = s1 &lt;+ s2
    </screen>

</section>

<section id="failure">
    <title>Failure</title>

    <para>
Syntax: fail 

Always fail 

Some laws 
    </para>

    <screen>
fail &lt;+ s = s

s &lt;+ fail =  s

fail ; s = fail

s ; fail /= fail
    </screen>

</section>

<section id="negation">
    <title>Negation</title>

    <para>
Syntax: not(s) 

Fail if s succeeds, succeed if s fails 

Equivalent to: s &lt; fail + id

    </para>

    <screen>
    </screen>

</section>

</section>

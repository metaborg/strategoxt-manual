<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

  <chapter>

    <title>Language</title>

      <para>
      </para>

    

    <section>
      <title>Building and matching terms</title>

      <para>
	Atomic actions of program transformation

	Creating (building) terms from patterns

	Matching terms against patterns

      </para>

      <section>
	<title>Current term</title>

	<para>
	  Current term
	</para>

      </section>

      <include href="build.xml" xmlns="http://www.w3.org/2003/XInclude"/>

      <include href="match.xml" xmlns="http://www.w3.org/2003/XInclude"/>


    </section>
    
    <section>
      <title>Rewrite rules</title>

      <para>
	Basic transformations are combinations of match and build

	Combination requires

	Sequential composition of transformations

	Restricting the scope of term variables

	Syntactic abstractions (sugar) for typical combinations

	Rewrite rules

	Apply and match

	Build and apply

	Where

	Conditional rewrite rules

      </para>

      <section>
	<title>Sequential composition</title>

	<para>
	  The sequential composition s1; s2 of the strategies s1 and
	  s2 first applies the strategy s1 to the subject term and
	  then s2 to the result of that first application.
	</para>
      </section>

      <section>
	<title>Apply and match</title>
	
	<para>
	  Apply and match
	</para>
      </section>
      
      <section>
	<title>Build and apply</title>
	
	<para>
	  Build and apply
	</para>
      </section>
      
      <section>
	<title>Term variable scope</title>
	
	<para>
	  Term variable scope
	</para>
      </section>

      <section>
	<title></title>
	
	<para>
	  Anonymous rewrite rule
	</para>
      </section>
      
      <section>
	<title>Where</title>
	
	<para>
	  Where
	</para>
      </section>
      
      <section>
	<title>Conditional rewrite rule</title>
	
	<para>
	  Conditional rewrite rule
	</para>
      </section>
    </section>

    <section>
      <title>Stategy definitions</title>

      <para>
	Reuse of transformation requires definitions
      </para>

      <section>
	<title>Named strategy expressions</title>

	<para>
	  Named strategy expressions
	</para>
      </section>

      <section>
	<title>Named rewrite rules</title>

	<para>
	  Named rewrite rules
	</para>
      </section>

      <section>
	<title>Modules</title>

	<para>
	  Modules
	</para>
      </section>

      <section>
	<title>Parameterized and recursive definitions</title>

	<para>
	  Parameterized and Recursive Definitions
	</para>

	<para>
	  Repeated application of a strategy can be achieved with
	  recursion. There are two styles for doing this; with a
	  recursive definition or using the fixpoint operator rec. A
	  recursive definition is a normal strategy definition with a
	  recursive call in its body.
	</para>

	<section>
	  <title>Fixpoint operator</title>
	  <para>
	    Another way to define recursion is using the fixpoint
	    operator rec x(s), which recurses on applications of x
	    within s.
	  </para>

	  <para>
	    Originally, the rec operator was the only way to define
	    recursion. It is still in the language in the first place
	    because it is widely used in many existing programs, and
	    in the second place because it can be a nice concise
	    expression of a recursive strategy. An example usage is
	    the definition of repeat with rec:
	  </para>

	  <screen>
strategies
  repeat(s) = rec x(s; x &lt;+ id)
</screen>

	</section>

      </section>
    </section>

    <section>
      <title>Composition of transformation strategies</title>

      <para>
	Rules define one-step transformations 

	Program transformations require many one-step transformations
	and selection of rules
      </para>

      <section>
	<title>Deterministic choice (left choice)</title>

	<para>
	  The left choice or deterministic choice s1 &lt;+ s2 chooses one
	  of the trans- formations to apply. That is, s1 is first
	  applied, and s2 is only applied if s2 fails. Formally, the
	  left choice operator is defined as:
	</para>

	<para>
	  A typical application of the deterministic choice operator
	  is to declare the priority between rules with overlapping
	  left-hand sides.
	</para>

	<para>
	  A useful application of &lt;+ in combination with id is the
	  reflexive closure of a strategy s. The strategy try(s) tries
	  to apply the strategy s, but if that fails, just succeeds
	  using id.
	</para>

	<screen>
strategies
  try(s) = s &lt;+ id
</screen>

      <para>
	Note that the choice is committed once the left-hand side
	strategy has succeeded, even if the continuation strategy
	fails.
      </para>

      </section>

      <section>
	<title>Choice</title>

	<para>
	  The deterministic choice operator prescribes that the left
	  alternative should be tried before the right alternative,
	  and that the latter is only used if the first fails. There
	  are applications where it is not necessary to define the
	  order of the alternatives. In those cases non-deterministic
	  choice can be used.
	</para>

	<para>
	  The non-deterministic choice operator s1 + s2 chooses one of
	  the two strategies s1 or s2 to apply, such that the one it
	  chooses succeeds. If both strategies fail, then the choice
	  fails as well.
	</para>

	<para>
	  Operationally one can imagine the choice operator to first
	  try one strategy, and, if that fails, to try the other. The
	  order in which this is done is undefined, i.e., arbitrarily
	  chosen by the compiler.
	</para>

      </section>

      <section>
	<title>Conditional choice</title>

	<para>
	  Conditional choice
	</para>

	<include href="ifthenelse.xml" xmlns="http://www.w3.org/2003/XInclude"/>
	<include href="ifthen.xml" xpointer="xpointer(id('ifthen'))" xmlns="http://www.w3.org/2003/XInclude"/>

      </section>

      <section>
	<title>Identity</title>

	<para>
	  Identity
	</para>
      </section>

      <section>
	<title>Failure</title>

	<para>
	  Failure
	</para>
      </section>

      <section>
	<title>Negation</title>

	<para>
	  Negation
	</para>
      </section>

    </section>

    <section>
      <title>Combinators for term traversal</title>

      <para>
	Match, build, sequential composition, and choice only apply
	transformations to the root of a term

	Complete transformations require term traversal
      </para>

      <section>
	<title>Congruence operators</title>

	<para>
	  Congruence operators
	</para>
      </section>

      <section>
	<title>Generic traversal operators</title>

	<para>
	  Generic traversal operators
	</para>

	<section>
	  <title>All</title>

	  <para>
	    all
	  </para>
	</section>

	<section>
	  <title>One</title>

	  <para>
	    one
	  </para>
	</section>

	<section>
	  <title>Some</title>

	  <para>
	    some
	  </para>
	</section>
      </section>

      <section>
	<title>Generic term deconstruction</title>

	<para>
	  Generic term deconstruction
	</para>
      </section>

    </section>

  </chapter>


    <section>
      <title>Stategy definitions</title>

      <para>
	Reuse of transformation requires definitions
      </para>


      <section>
	<title>Named rewrite rules</title>

	<para>
	  Named rewrite rules
	</para>
      </section>

      <section>
	<title>Modules</title>

	<para>
	  Modules
	</para>
      </section>

      <section>
	<title>Parameterized and recursive definitions</title>

	<para>
	  Parameterized and Recursive Definitions
	</para>

	<para>
	  Repeated application of a strategy can be achieved with
	  recursion. There are two styles for doing this; with a
	  recursive definition or using the fixpoint operator rec. A
	  recursive definition is a normal strategy definition with a
	  recursive call in its body.
	</para>


  <section id="rec">
    <title>Fixpoint operator (rec)</title>
    <para>
      Another way to define recursion is using the fixpoint operator
      <code>rec x(s)</code>, which recurses on applications of
      <code>x</code> within <code>s</code>.
    </para>

    <para>
      Originally, the <code>rec</code> operator was the only way to define
      recursion. It is still in the language in the first place
      because it is widely used in many existing programs, and in the
      second place because it can be a nice concise expression of a
      recursive strategy. An example usage is the definition of repeat
      with <code>rec</code>:
    </para>

    <screen><include href="xmpl/repeat_rec.str" 
                     parse="text" 
		     xmlns="http://www.w3.org/2003/XInclude"/></screen>
  </section>



      </section>

    </section>

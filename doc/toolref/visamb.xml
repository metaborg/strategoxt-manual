<refentry lang="en" id="ref-visamb">
  <refnamediv>
    <refname>visamb</refname>
    <refpurpose>displays the ambiguities in a parse tree represented in AsFix2</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>visamb</command>
      <arg>-i <replaceable>file</replaceable> | --input <replaceable>file</replaceable></arg>
      <arg>-o <replaceable>file</replaceable> | --output <replaceable>file</replaceable></arg>
      <arg>-b</arg>
      <arg>-S | --silent</arg>
      <arg>--verbose <replaceable>level</replaceable></arg>
      <arg>-k <replaceable>level</replaceable> | --keep <replaceable>level</replaceable></arg>
      <arg>-h | -? | --help</arg>
      <arg>--about</arg>
      <arg>--version</arg>          
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>
      The <command>visamb</command> utility extracts ambiguities from a parse tree and
      displays these in a readable format. Ambiguities are displayed by printing the
      non-terminals of the nodes of the parse trees in the ambiguities.  
    </para>
    
    <para>
      The SDF2 implementation caters for arbitrary context-free grammars. That is, even for
      ambiguous grammars the parser will produce a parse trees containing a concise encoding
      of all possible parses. Ambiguities are represented by means of <function>amb</function>
      nodes that contain a list of possible parse trees at that point. For most applications,
      however, it is desirable to develop unambiguous grammars.
    </para>
  </refsection>

  <refsection>
    <title>Options</title>

    <include href="common-io-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
    <include href="common-debugging-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  </refsection>

  <refsection>
    <title>Example</title>
    
    <para>
      Consider the following syntax definition:
    </para>
    
 <programlisting>
  definition
  module Main
  exports
    sorts Exp
    lexical syntax
      [\ \t\n] -> LAYOUT
    context-free syntax
      "id"    -> Exp
      Exp Exp -> Exp
</programlisting>

    <para>
      The following command will convert this into a parse table, suitable for
      <command>visamb</command>.
    </para>
    
    <screen><prompt>$ </prompt>sdf2table -i Exp.sdf -o Exp.tbl</screen>
    
    <para>
      Next, we can see how the expression <code>id id id</code> is ambiguous
      with this grammar, by doing:
    </para>
    
    <screen><prompt>$ </prompt>echo "id id id" | sglr -2 -p Exp.tbl | visamb</screen>
    
    <para>
      The result is:
    </para>
    
<programlisting>
  # ambiguities = 1
  + * id id id
    &lt;Exp-CF>
      &lt;Exp-CF>
        &lt;Exp-CF>
          id
        &lt;LAYOUT?-CF>
          &lt;LAYOUT-CF>

        &lt;Exp-CF>
          id
      &lt;LAYOUT?-CF>
        &lt;LAYOUT-CF>

      &lt;Exp-CF>
        id
    &lt;Exp-CF>
      &lt;Exp-CF>
        id
      &lt;LAYOUT?-CF>
        &lt;LAYOUT-CF>

      &lt;Exp-CF>
        &lt;Exp-CF>
          id
        &lt;LAYOUT?-CF>
          &lt;LAYOUT-CF>

        &lt;Exp-CF>
          id
 </programlisting>   
 
   <para>
     Only the inner ambiguities are displayed, i.e., if a phrase and one of its sub-phrases
     are ambiguous, only the ambiguities of the sub-phrase are displayed.
   </para>
  </refsection>
  
  

  <include href="reporting-bugs.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  <include href="lgpl-copyright.xml" xmlns="http://www.w3.org/2003/XInclude"/>
</refentry>

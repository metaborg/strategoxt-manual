<refentry lang="en" id="ref-parse-cs">
  <refnamediv>
    <refname>parse-cs</refname>
    <refpurpose>parses meta-programs with concrete syntax</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>parse-cs</command>
      <arg>-I <replaceable>dir</replaceable> | --Include <replaceable>dir</replaceable></arg>
      <arg>--syntax <replaceable>syn</replaceable></arg>
      <arg>--ensugar <replaceable>level</replaceable></arg>
      <arg>-pp | -pretty-print</arg>
      <arg>-i <replaceable>file</replaceable> | --input <replaceable>file</replaceable></arg>
      <arg>-o <replaceable>file</replaceable> | --output <replaceable>file</replaceable></arg>
      <arg>-b</arg>
      <arg>-S | --silent</arg>
      <arg>--verbose <replaceable>level</replaceable></arg>
      <arg>-k <replaceable>level</replaceable> | --keep <replaceable>level</replaceable></arg>
      <arg>-h | -? | --help</arg>
      <arg>--about</arg>
      <arg>--version</arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>
      <command>parse-cs</command> is a generic parser for meta-programs with
      concrete object syntax, also known as embedded syntax. For proper 
      operation, <command>parse-cs</command> must have information about
      <orderedlist>
        <listitem>
          <para>the parse table</para>
        </listitem>
        <listitem>
          <para>the pre-explode desugaring component</para>
        </listitem>
        <listitem>
          <para>the exploder for embedded abstract syntax</para>
        </listitem>
        <listitem>
          <para>the post-explode desugaring component</para>
        </listitem>
        <listitem>
          <para>the pretty-printer</para>
        </listitem>
      </orderedlist>
    </para>
  
    <para>  
      These components do are not provided on the command line, but rather
      in a meta-data file. For each file to be parsed, a specific meta-data
      file must be defined. It should have the following components:
    </para>
    
<programlisting>
Meta([
  Syntax(lang),                      // name of language = main SDF module
  ParseTable(tbl)
  PreExplodeDesugar(pre-explode),
  Explode(explode),
  PostExplodeDesugar(post-expl),
  PrettyPrintTable(pp)
])
</programlisting>

    <para>
      If the component names are not absolute paths to files, the components
      are looked up in the XTC repository. Most of these components are 
      optional, only one the syntax component is required.
    </para>

  </refsection>

  <refsection>
    <title>Options</title>
    
    <variablelist>
      <title>Syntax Options</title>
      
      <varlistentry>
        <term><option>-I <replaceable>dir</replaceable></option></term>
        <term><option>--input <replaceable>dir</replaceable></option></term>
        <listitem>
          <para>
            Include modules from directory <replaceable>dir</replaceable>.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>--syntax <replaceable>syn</replaceable></option></term>
        <listitem>
          <para>
            Use syntax <replaceable>syn</replaceable>.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>-pp</option></term>
        <term><option>--pretty-print</option></term>
        <listitem>
          <para>
            Invoke the pretty-printer as part of the process.
          </para>
        </listitem>
      </varlistentry>
      
    </variablelist>    

    <include href="common-io-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
    <include href="common-debugging-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
    
  </refsection>
  
  <refsection>
    <title>Example</title>

    <para>
      Given a meta file in <filename>prog.meta</filename> and the program in
      <filename>prog.str</filename>, the following will parse a Stratego
      program with embedded concrete syntax: 
    </para>

    <screen><prompt>$ </prompt>parse-cs --syntax Stratego -i prog.str -o prog.trm</screen>
  </refsection>


  <include href="reporting-bugs.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  <include href="lgpl-copyright.xml" xmlns="http://www.w3.org/2003/XInclude"/>
</refentry>

<refentry lang="en" id="ref-gen-renamed-sdf-module">
  <refnamediv>
    <refname>gen-renamed-sdf-module</refname>
    <refpurpose>generates an SDF module that renames all SDF sorts in a given SDF definition.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>gen-renamed-sdf-module</command>
      <arg>-m <replaceable>mod</replaceable> |  --main <replaceable>mod</replaceable></arg>
      <arg>--name <replaceable>mod</replaceable></arg>
      <arg>--prefix <replaceable>id</replaceable></arg>
      <arg>--scheme <replaceable>[...]</replaceable></arg>
      <arg>-i <replaceable>file</replaceable> | --input <replaceable>file</replaceable></arg>
      <arg>-o <replaceable>file</replaceable> | --output <replaceable>file</replaceable></arg>
      <arg>-b</arg>
      <arg>-S | --silent</arg>
      <arg>--verbose <replaceable>level</replaceable></arg>
      <arg>-k <replaceable>level</replaceable> | --keep <replaceable>level</replaceable></arg>
      <arg>-h | -? | --help</arg>
      <arg>--about</arg>
      <arg>--version</arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  
  <refsection>
    <title>Description</title>
    
    <para>
      The gen-renamed-sdf-module utility is used to generate modules where sorts are either
      prefixed (with the <option>--prefix</option> option) or renamed (using the 
      <option>--scheme</option> option).
    </para>
    
    <para>
      This tool is useful for concrete object syntax embeddings, where the sorts in 
      the embedded language syntax definitions must be renamed before being imported into
      the host language, so as to avoid name space conflicts between the two syntax 
      declarations. For example, both the embedded and the host language may declare
      an <code>Exp</code> sort.
    </para>
    
  </refsection>

  <refsection>
    <title>Options</title>
    
    <variablelist>
      <title>Grammar Options</title>
      
      <varlistentry>
        <term><option>-m <replaceable>mod</replaceable> | --main <replaceable>mod</replaceable></option></term>
        <listitem>
          <para>
            Use <replaceable>mod</replaceable> as the main module in the SDF definition. By default,
            this is <code>Main</code>.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>--name <replaceable>mod</replaceable></option></term>
        <listitem>
          <para>
            Name of the resulting module. This option is mandatory.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>--prefix <replaceable>id</replaceable></option></term>
        <listitem>
          <para>
            Prefix all sort names with <replaceable>id</replaceable>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--scheme <replaceable>[...]</replaceable></option></term>
        <listitem>
          <para>
            Rename the sorts according to the scheme in <replaceable>[...]</replaceable>.
            <!-- FIXME: Needs elaboration -->
          </para>
        </listitem>
      </varlistentry>
      
    </variablelist>

    <include href="common-io-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
    
    <include href="common-debugging-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
    
  </refsection>


  <refsection>
    <title>Example</title>

    <para>
    Consider the following syntax definition.
    </para>

<programlisting>
  definition
  module Expressions
  imports Identifiers [Id => MyId]
  exports
    sorts Exp
  
  context-free syntax
    Id        -> Exp {cons("Var")}
    IntConst  -> Exp {cons("Int")}
  
    Exp "+"  Exp -> Exp  {left, cons("Plus")}

  module Identifiers
  exports
    sorts Id
  
  lexical syntax
    [a-zA-Z]+ -> Id  
</programlisting>  
    
    <para>
      By applying <command>gen-renamed-sdf-module</command> as follows, all sorts will
      be prefixed by <code>Exp</code>.  
    </para>

    <screen><prompt>$ </prompt>gen-renamed-sdf-module -i Exp.def -m Expressions --name Exp-Prefixed --prefix Exp</screen>
    
    <para>
      The generated definition is:
    </para>
    
<programlisting>
  module Exp-Prefixed
  imports Expressions
    [ IntConst => ExpIntConst
      MyId     => ExpMyId
      Exp      => ExpExp ]
</programlisting>    
  </refsection>

  <include href="reporting-bugs.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  <include href="lgpl-copyright.xml" xmlns="http://www.w3.org/2003/XInclude"/>
</refentry>

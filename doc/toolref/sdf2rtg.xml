<refentry xml:lang="en" xml:id="ref-sdf2rtg"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <refnamediv>
    <refname>sdf2rtg</refname>
    <refpurpose>
      generates a abstract regular tree grammar (RTG) from an SDF concrete syntax definition.
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>sdf2rtg</command>
      <arg>-m <replaceable>mod</replaceable> | --main <replaceable>mod</replaceable></arg>
      <arg>-i <replaceable>file</replaceable> | --input <replaceable>file</replaceable></arg>
      <arg>-o <replaceable>file</replaceable> | --input <replaceable>file</replaceable></arg>
      <arg>-b</arg>
      <arg>-S | --silent</arg>
      <arg>--verbose <replaceable>level</replaceable></arg>
      <arg>-k <replaceable>level</replaceable> | --keep <replaceable>level</replaceable></arg>
      <arg>--check</arg>
      <arg>-h | -? | --help</arg>
      <arg>--about</arg>
      <arg>--version</arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>
    <para>
      The <command>sdf2rtg</command> utility is used to generate an abstract regular
      tree grammar (RTG) from a SDF concrete syntax definition.
    </para>
    
    <para>
      Regular tree grammars are useful for doing format checking of terms. Refer to
      <link linkend="format-checking">Format Checking with format-check</link> for
      further details.
    </para>
  </refsection>

  <refsection>
    <title>Options</title>

    <variablelist>
      <title>Grammar Options</title>

      <varlistentry>
	    <term><option>-m     <replaceable>mod</replaceable></option></term>
	    <term><option>--main <replaceable>mod</replaceable></option></term>
        <listitem>
  	      <para>
            Set the main module in the SDF syntax definition to
  	        <filename><replaceable>mod</replaceable></filename>. The
  	        default main module is <filename>Main</filename>.
  	      </para>
    	</listitem>
      </varlistentry>
    </variablelist>
    
    <include href="common-io-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
    <include href="common-debugging-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
    
  </refsection>

  <refsection>
    <title>Example</title>

    <para>
      Consider the following SDF syntax definition for a simple expression language:
    </para>

<programlisting>
definition
module Exp
exports
  sorts Exp

  lexical syntax
    [\ \t\n]  -> LAYOUT
    [a-zA-Z]+ -> Id
    [0-9]+    -> IntConst

  context-free syntax
    Id        -> Exp {cons("Var")}
    IntConst  -> Exp {cons("Int")}

    Exp "*"  Exp -> Exp  {left, cons("Mul")}
    Exp "/"  Exp -> Exp  {left, cons("Div")}
    Exp "%"  Exp -> Exp  {left, cons("Mod")}

    Exp "+"  Exp -> Exp  {left, cons("Plus")}
    Exp "-"  Exp -> Exp  {left, cons("Minus")}

  context-free priorities
    {left:
      Exp "*"  Exp -> Exp
      Exp "/"  Exp -> Exp
      Exp "%"  Exp -> Exp
    }
  > {left:
      Exp "+"  Exp -> Exp
      Exp "-"  Exp -> Exp
    }
</programlisting>

    <para>
      Invoking <command>sdf2rtg</command> with <command>sdf2rtg -i
      Exp.def --main Exp</command> will result in the following regular
      tree grammar:
    </para>

<programlisting>
regular tree grammar
start Exp
productions
  Exp      -> Minus(Exp,Exp)
  Exp      -> Plus(Exp,Exp)
  Exp      -> Mod(Exp,Exp)
  Exp      -> Div(Exp,Exp)
  Exp      -> Mul(Exp,Exp)
  Exp      -> Int(IntConst)
  Exp      -> Var(Id)
  IntConst -> &lt;string&gt;
  Id       -> &lt;string&gt;
</programlisting>
  </refsection>

  <include href="reporting-bugs.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  <include href="lgpl-copyright.xml" xmlns="http://www.w3.org/2003/XInclude"/>
</refentry>

<refentry lang="en" id="ref-sdf2rtg">
  <refnamediv>
    <refname>sdf2rtg</refname>
    <refpurpose>
      generates an abstract syntax definition in RTG from an SDF
      concrete syntax definition.
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>sdf2rtg</command>
      <arg>-i <replaceable>file.def</replaceable></arg>
      <arg>-o <replaceable>file.rtg</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>
    <para>
      <command>sdf2rtg</command> generates an abstract syntax
      definition in RTG from an SDF concrete syntax definition.
    </para>
  </refsection>

  <refsection>
    <title>Options</title>

    <variablelist>
      <title>Common Options</title>

      <varlistentry>
        <term><option>-i <replaceable>file</replaceable></option></term>
        <listitem>
          <para>SDF syntax definition that must be converted to an RTG</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-o       <filename><replaceable>file</replaceable></filename></option></term>
        <listitem>
	  <para>Write output to <filename><replaceable>file</replaceable></filename></para>
        </listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-m     <filename><replaceable>mod</replaceable></filename></option></term>
	<term><option>--main <filename><replaceable>mod</replaceable></filename></option></term>
        <listitem>
	  <para>
	    Set the main module in the SDF syntax definition to
	    <filename><replaceable>mod</replaceable></filename>. The
	    default main module is <filename>Main</filename>.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Example</title>

    <para>
      Consider the following SDF syntax definition for a simple
      expression language:
    </para>

    <programlisting>
definition
module Exp
exports
  sorts Exp

  lexical syntax
    [\ \t\n]  -> LAYOUT
    [a-zA-Z]+ -> Id
    [0-9]+    -> IntConst

  context-free syntax
    Id        -> Exp {cons("Var")}
    IntConst  -> Exp {cons("Int")}

    Exp "*"  Exp -> Exp  {left, cons("Mul")}
    Exp "/"  Exp -> Exp  {left, cons("Div")}
    Exp "%"  Exp -> Exp  {left, cons("Mod")}

    Exp "+"  Exp -> Exp  {left, cons("Plus")}
    Exp "-"  Exp -> Exp  {left, cons("Minus")}

  context-free priorities
    {left:
      Exp "*"  Exp -> Exp
      Exp "/"  Exp -> Exp
      Exp "%"  Exp -> Exp
    }
  > {left:
      Exp "+"  Exp -> Exp
      Exp "-"  Exp -> Exp
    }
    </programlisting>

    <para>
      Invoking <command>sdf2rtg</command> with <command>sdf2rtg -i
      Exp.def --main Exp</command> will result in the following RTG:
    </para>

    <programlisting>
regular tree grammar
  start Exp
  productions
    Exp      -> Minus(Exp,Exp)
    Exp      -> Plus(Exp,Exp)
    Exp      -> Mod(Exp,Exp)
    Exp      -> Div(Exp,Exp)
    Exp      -> Mul(Exp,Exp)
    Exp      -> Int(IntConst)
    Exp      -> Var(Id)
    IntConst -> &lt;string>
    Id       -> &lt;string>
    </programlisting>
  </refsection>

  <include href="reporting-bugs.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  <include href="lgpl-copyright.xml" xmlns="http://www.w3.org/2003/XInclude"/>
</refentry>

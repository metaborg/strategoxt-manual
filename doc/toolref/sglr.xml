<refentry lang="en" id="ref-sglr">
  <refnamediv>
    <refname>sglr</refname>
    <refpurpose>parses a text file and produces an parse forest conforming to a given grammar.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>sglr</command>
      <arg>-2</arg>
      <arg>-A</arg>
      <arg>-b</arg>
      <arg>-c</arg>
      <arg>-d</arg>
      <arg>-f[adefipr]</arg>
      <arg>-i <replaceable>file</replaceable></arg>
      <arg>-l</arg>
      <arg>-m</arg>
      <arg>-m</arg>
      <arg>-o <replaceable>file</replaceable></arg>
      <arg>-p <replaceable>file</replaceable></arg>
      <arg>-s <replaceable>symbol</replaceable></arg>
      <arg>t</arg>
      <arg>-v</arg>
      <arg>-V</arg>
<!--      <arg rep="repeat">-X <replaceable>YYYY</replaceable></arg> -->
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>
      <command>sglr</command> is a scannerless, generalized LR parser. It interprets a parse 
      table on a given textual input file. The parse table must be generated from an SDF2 
      grammar definition using the <command>sdf2table</command> tool. If the result of the 
      parse is unambiguous, a parse tree is emitted. In the case of an ambiguity, a parse
      forest is emitted.
    </para>
    
    <para>
      The term "scannerless" refers to the fact that the parser treats characters as tokens.
      There is no separate token scanner. The term "generalized" indicates that the parser
      finds all possible derivations for a given input string. Together, these two features
      allows users to construct ambiguous grammars, if they desire. <command>sglr</command>
      will not complain about conflicts in the parse table, but output the ambiguous result.
    </para>
    
    <para>
      For the ambiguous cases, the user is free to construct problem-specific disambiguation
      tools which must be applied to the output from <command>sglr</command>. This is useful
      for dealing with various complicated programming languages that are highly ambiguous
      and context-sensitive.  
    </para>
    
  </refsection>

  <refsection>
    <title>Options</title>
    
    <variablelist>
      <title>Input/Output Options</title>

      <varlistentry>
        <term><option>-i <replaceable>file</replaceable></option></term>
        <listitem>
          <para>
            The input file is given by the file name <filename><replaceable>file</replaceable></filename>.
          </para>
          
          <para>
            In the absence of the <option>-i</option> option,  <command>sglr</command> will read 
            from <filename>stdin</filename>.
          </para>  
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>-o <filename><replaceable>file</replaceable></filename></option></term>
        <listitem>
          <para>
            The output will be written to the file given by the file name 
            <filename><replaceable>file</replaceable></filename>.
          </para>
          
          <para>
            In the absence of the <option>-o</option> option, <command>sglr</command> will
            write to <filename>stdout</filename>.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>-p <replaceable>file</replaceable></option></term>
        <listitem>
          <para>
            The parse table to use, given by the file name 
            <filename><replaceable>file</replaceable></filename>.
          </para>
          
          <para>
            Note: This option is always required.
          </para>
          <para>
            Refer to the tool <command>sdf2table</command> for how to create parse tables.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-b</option></term>
        <listitem>
          <para>
            Use the binary ATerm (BAF) output format. Default is yes.
          </para>  
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-m</option></term>
        <listitem>
          <para>
            Use the AsFix2ME output format. Default is yes.
          </para>  
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-t</option></term>
        <listitem>
          <para>
            Use the textual AsFix output format. Default is no.
          </para>  
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-2</option></term>
        <listitem>
          <para>
            Use the AsFix2 output format. Default is no.
          </para>  
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-A</option></term>
        <listitem>
          <para>
            Treat ambiguities as errors. Default is no.
          </para>  
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-c</option></term>
        <listitem>
          <para>
            Toggle cycle detection. Default is on.
          </para>  
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-n</option></term>
        <listitem>
          <para>
            Toggle parse tree creation. Default is on.
          </para>  
        </listitem>
      </varlistentry>
      
    </variablelist>

    <variablelist>
      <title>Other Options</title>

      <varlistentry>
        <term><option>-f[adeipr]</option></term>
        <listitem>
          <para>
            Toggle filtering, or toggle specific filter. Default is to enable all filters.
          </para>

          <para>
            <option>a</option> - turn on associativity filter. Default is on.
          </para>

          <para>
            <option>d</option> - turn on direct eagerness filter. Default is on.
          </para>

          <para>
            <option>e</option> - turn on eagerness filter. Default is on.
          </para>

          <para>
            <option>i</option> - turn on injection count. Default is on.
          </para>

          <para>
            <option>p</option> - turn on priority filter. Default is on.
          </para>

          <para>
            <option>r</option> - turn on reject filter. Default is on.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>-s <replaceable>symbol</replaceable></option></term>
        <listitem>
          <para>
            Specific start symbol to use in the input grammar. Default is unspecified. 
          </para>  
        </listitem>
      </varlistentry>
      
      
    </variablelist>      

    <variablelist>
      <title>Debugging Options</title>

      <varlistentry>
        <term><option>-d</option></term>
        <listitem>
          <para>
            Turn on debugging mode.
          </para>  
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>-l</option></term>
        <listitem>
          <para>
            Turn on statistics logging.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>-h | -?</option></term>
        <listitem>
          <para>
            Display usage information.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>-v</option></term>
        <listitem>
          <para>
            Turn on verbose mode.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><option>-V</option></term>
        <listitem>
          <para>
            Show tool name and version number.
          </para>
        </listitem>
      </varlistentry>
      
      
      <varlistentry>
        <term><option>--version</option></term>
        <listitem>
          <para>
            Displays the tool name and version.
          </para>
        </listitem>
      </varlistentry>
      
      
    </variablelist>
    
  </refsection>
  
  <refsection>
    <title>Example</title>

    <para>
      Assuming you have used <command>sdf2table</command> to generate a parse table for
      you language in the file <filename>lang.tbl</filename>, and that your input program
      is in the file <filename>input.lang</filename>, you can apply <command>sglr</command>
      as follows:
    </para>

    <screen><prompt>$ </prompt>sglr -p lang.tbl -i input.lang -o lang.trm</screen>
    
    <para>
      The resulting parse tree (or possibly parse forest, if your language grammar 
      allows ambiguities) will be in <filename>lang.trm</filename>.
    </para>
    
  </refsection>


  <include href="reporting-bugs.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  <include href="lgpl-copyright.xml" xmlns="http://www.w3.org/2003/XInclude"/>
</refentry>

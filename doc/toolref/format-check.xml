<refentry lang="en" id="ref-format-check">
  <refnamediv>
    <refname>format-check</refname>
    <refpurpose>analyzes whether the input ATerm conforms to the format that is
   specified in the RTG (Regular Tree Grammar)</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>format-check</command>
      <arg>--rtg <replaceable>file</replaceable></arg>
      <arg>--rtg-nf <replaceable>file</replaceable></arg>

      <arg>-s|--start <replaceable>s</replaceable></arg>

      <arg>--xhtml</arg>
      <arg>--vis</arg>
      <arg>--fast</arg>

      <arg>-i <replaceable>file</replaceable></arg>
      <arg>-o <replaceable>file</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>

      format-check verifies that the input ATerm is part of the
      language defined in the RTG. If this is not the case, then the
      ATerm contains format errors.  format-check can operate in three
      modes: plain, visualize and XHTML.

    </para>

    <para>

      The plain mode is used if the other modes are not enabled. In
      the plain mode format errors are reported and no result is
      written the the output (stdout or a file). Hence, if
      format-check is included in a pipeline, then the following tool
      will probably fail. If the input term is correct, then it is
      written to the output.

    </para>

    <para>

      The visualize mode is enabled with the --vis option. In
      visualize mode format errors are reported and in a
      pretty-printed ATerm will be written to the output. All
      innermost parts of the ATerm that cause format errors are
      printed in red, if your terminal supports control characters for
      colors. If you want to browse through the ATerm with less, then
      you should use the -r flag.

    </para>

    <para>

      The XHTML mode is enabled with the --xhtml option. In XHTML mode
      format errors are reported and an report in XHTML will be
      written to the output.  This report shows the parts of the ATerm
      that are not formatted correctly.  Also, moving with your mouse
      over the nodes of ATerm, will show the non-terminals that have
      be inferred by format-check (do not use IE6. Firefox or Mozilla
      is recommended).

    </para>

    <para>

      format-check reports all innermost format errors. That is, only
      the deepest format errors are reported. A format error is
      reported by showing the ATerm that is not in the correct format,
      and the inferred types of the children of the ATerm. In XHTML
      and visualize mode a format error of term in a list is presented
      by a red comma and term. This means that a type has been
      inferred for the term itself, but that it is not expected at
      this point in the list.  If only the term is red, then no type
      could be inferred for the term itself.

    </para>

    <para>

      In all modes format-check succeeds (exit code 0) if the ATerm
      contains no format errors. If the term does contain format
      errors, then format-check fails (exit code 1).

    </para>
  </refsection>

  <refsection>
    <title>Options</title>

    <variablelist>
      <title>Input/Output Options</title>

      <varlistentry>
        <term><option>-i <replaceable>file</replaceable></option></term>
        <listitem>
          <para>
	    Format-check the abstract syntax tree in
	    <replaceable>file</replaceable>. 
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-o <filename><replaceable>file</replaceable></filename></option></term>
        <listitem>
	  <para>
	    Write the resulting term to
	    <filename><replaceable>file</replaceable></filename>.
	  </para>

	  <para>
	    The resulting file is just a copy of the input file.
	  </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>Common Options</title>

      <varlistentry>
        <term><option>--rtg <filename><replaceable>file</replaceable></filename></option></term>
        <listitem>
	  <para>
	    Format check against rtg in
	    <filename><replaceable>file</replaceable></filename>.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--rtg-nf <filename><replaceable>file</replaceable></filename></option></term>
        <listitem>
	  <para>
	    Format check against normalized rtg in
	    <filename><replaceable>file</replaceable></filename>.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--xhtml</option></term>
        <listitem>
	  <para>
	    Present the result in XHTML
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--vis</option></term>
        <listitem>
	  <para>
	    Visualize in colored pp-aterm
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--fast</option></term>
        <listitem>
	  <para>
	     Run as fast as possible. Might reduce quality of error
	     messages.
	  </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsection>


  <!--refsection>
    <title>Example</title>

    <para>
      To ...
    </para>

    <screen><prompt>$ </prompt>format-check -i tree.trm -o tree.tmpl</screen>
  </refsection-->


  <include href="reporting-bugs.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  <include href="lgpl-copyright.xml" xmlns="http://www.w3.org/2003/XInclude"/>
</refentry>

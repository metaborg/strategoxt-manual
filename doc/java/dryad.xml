<chapter xml:id="dryad"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Getting started with Dryad</title>

  <xi:include href="../tutorial/workinprogress.xml"/>
  
  <para>
    Dryad is a collection of tools for developing transformation
    systems for Java source and bytecode.
  </para>

  <section>
    <title>Linking with the Dryad Library</title>

    <para>
      For some applications, you might want to link with the Dryad
      library. This library has a few dependencies, such as libjvm,
      that make linking a bit more involved than it should
      be. Fortunately, you don't have to have to know all these
      details.
    </para>

    <section>
      <title>Compilation in Automake Package</title>
      
      <para>
	In an autoxt-based Automake package, you can use the variable
	<varname>DRYAD_LIBS</varname> in the
	<filename>Makefile.am</filename>. This variable contains all
	the required linker flags, including platform specific ones.
      </para>
    </section>

    <section>
      <title>Standalone Compilation at Command-line</title>

      <para>
	At the command-line, the preferred way of compilation is:
	
	<screen><prompt>$</prompt> strc -i const-prop.str $(strcflags dryad java-front)</screen>
	
	The strcflags include the Stratego includes (-I) of these
	packages and special linker options required to use the Dryad
	library. This way of compilation works on all supported
	platforms, since it reuses the information the configure
	script of Dryad has figured out about the platform you are
	running on.
      </para>
      
      <para>
	If you haven't seen strcflags before: it is an alias for the
	invocation of pkg-config. You can define it using the
	following command. Of course, you also use the longer
	pkg-config variant in the invocation of strc.

	<screen><prompt>$</prompt> alias strcflags="pkg-config --variable=strcflags "</screen>
      </para>
      
      <para>
	Make sure that Dryad is in the PKG_CONFIG_PATH. You can check
	if it is by invoking the following command. This will print a
	bunch of strc options. If it prints nothing, then dryad is not
	on the path and you can extend it by defining the
	PKG_CONFIG_PATH.
	
	<screen><prompt>$</prompt> echo $(strcflags dryad)</screen>
	<screen><prompt>$</prompt> export PKG_CONFIG_PATH=$dryadprefix/lib/pkgconfig:$PKG_CONFIG_PATH</screen>
      </para>
    </section>

    <section>
      <title>Explanation</title>
      
      <para>
	If you don't use the suggested ways of linking, then you
	probably get the following message:
	
	<screen><prompt>$</prompt> ./const-prop -i Foo.java 
./const-prop: error while loading shared libraries: libjvm.so: cannot
open shared object file: No such file or directory</screen>
      </para>
      
      <para>
	This can be solved in several ways, for example by setting the
	<varname>LD_LIBRARY_PATH</varname>, or by adding the runtime
	path of the libjvm library to the executable. This is what is
	done be the previously suggested solutions.
      </para>
    </section>
  </section>


  <section>
    <title>Dryad on Mac OS X</title>

    <para>
      Dryad supports Mac OS X if the JDK 5.0 is installed. You need to
      configure 5.0 as the default JVM in the preferences, or you can
      set an environment variable for this:
    </para>

    <screen><prompt>$</prompt> export JAVA_JVM_VERSION="1.5"</screen>

    <para>
      If you get an
      <classname>UnsupportedClassVersionError</classname>, then there
      is something wrong with this configuration.
    </para>

    <para>
      For Dryad, there is no need to manipulate the
      <filename>Current</filename> and <filename>CurrentJDK</filename>
      symbolic links in
      <filename>/System/Library/Frameworks/JavaVM.framework/Versions</filename>,
      which is often suggested on the Internet. In fact, this will not
      affect the default JVM at all for Dryad, which starts the JVM as
      a library using JNI, not from the command-line.
    </para>

    <section>
      <title>Installing Dryad using Nix</title>
      <para>
	Users of Dryad in Nix have to install the JDK 5.0 as well: it
	is not included in the dependencies of Dryad in Nix. They also
	have to configure this JDK as the default.
      </para>
    </section>

    <section>
      <title>Dryad on Mac OS X 10.3</title>
      <para>
	The JDK 5.0 is not officially supported on Mac OS X 10.3, but
	the Java features Dryad uses work with an installation of JDK
	5.0 on Mac OS X 10.3. For this, you can copy the installation
	of the JDK on a Mac OS X 10.4 machine to Mac OS X 10.3. Copy
	the directory
	<filename>/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0</filename>
	to Mac OS X 10.3 and create a symbolic link
	<filename>/System/Library/Frameworks/JavaVM.framework/Versions/1.5</filename>
	to this directory. We advice you not to make this the global
	default JVM: it is safer to set the
	<envar>JAVA_JVM_VERSION</envar> to 1.5 for Dryad sessions
	only, since the 1.5.0 installation will not work for most
	other Java applications.
      </para>
    </section>
  </section>
</chapter>

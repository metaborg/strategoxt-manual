<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<section id="java2c">
  <title>Transformation Java to C</title>

  <warning>
    <para>
      This demo is a quick hack. Don't read it if you need a solid
      tutorial.
    </para>
  </warning>
  
  <para>
    In this demo I will talk you through the process of implementing a
    tool that transforms Java code to C. As an example, we will use
    this Java source file:
  </para>

  <programlisting><include href="Try.java" parse="text" xmlns="http://www.w3.org/2003/XInclude"/></programlisting>

  <para>
    and we want to transform this to
  </para>

  <programlisting><include href="Try.c" parse="text" xmlns="http://www.w3.org/2003/XInclude"/></programlisting>

  <para>
    Let's first setup the basic transformation.
  </para>

  <programlisting><include href="java2c-1.str" parse="text" xmlns="http://www.w3.org/2003/XInclude"/></programlisting>

  <para>
    Compile:
  </para>

  <screen>$ strc -i java2c.str `strcflags java-front c-tools` -la stratego-lib</screen>

  <para>
    where strcflags is an alias in your shell:
  </para>

  <screen>alias strcflags="pkg-config --variable=strcflags "</screen>

  <para>
    Of course you can also enter the plain -I arguments. Include the
    directories share/package and the share/sdf/package. Time for some
    action:
  </para>

  <screen>$ parse-java -i Try.java | ./java2c | pp-aterm</screen>

  <para>
    Well, of course this tool is pretty useless since it does
    nothing. So, let's produce some plain C code first. We are going
    to use concrete syntax immediately. Create a file java2c.meta:
  </para>

  <programlisting><include href="java2c-1.meta" parse="text" xmlns="http://www.w3.org/2003/XInclude"/></programlisting>

  <para>
    To test the concrete syntax support, we are just going to generate
    a simple C file module.
  </para>
  
  <programlisting>
  java2c =
    !translation-unit |[ #include &lt;stdio.h> ]|
  </programlisting>

  <para>
    Too bad, that does not compile. The compiler complains about the ]
    of ]|. This rather tricky: the syntax definition of C defines that
    pre-processing lines should be termined by a newline. So, let's
    add some whitespace:
  </para>

  <programlisting>
  java2c =
    !translation-unit |[
      #include &lt;stdio.h>
    ]|
  </programlisting>

  <para>
    Great, that compiles. Run:
  </para>
  

  <screen>
$ parse-java -i Try.java | ./java2c | pp-c
#include &lt;stdio.h>

  </screen>

  <para>
    Excellent, but not very interesting. Let's add a main function.
  </para>

  <programlisting>
  java2c =
    !translation-unit |[
      #include &lt;stdio.h>

      void main(int argc, char** args)
      {
        printf("Hi there!");
      }
    ]|
  </programlisting>


  <para>
    Ok, it compiles. Run it.
  </para>

<screen>
$ parse-java -i Try.java | ./java2c | pp-c
#include &lt;stdio.h>

void main (int argc, char * * args)
{
  printf(Hi there!);
}
</screen>

<para>
  Humz, great, but that pretty-printer sucks. It does not quote the
  literal! So, we are going to report a bug to our dear Stratego
  developers. Of course we are hackers: we are not going to wait for a
  fix and are going to use a dirty workaround! Let's try to use two
  double quotes.
</para>

<programlisting>
java2c =
  !translation-unit |[
    #include &lt;stdio.h>
  
    void main(int argc, char** args)
    {
      printf("\"Hi there!\"");
    }
  ]|
</programlisting>

<screen>
$ parse-java -i Try.java | ./java2c | pp-c
#include &lt;stdio.h>

void main (int argc, char * * args)
{
  printf("Hi there!");
}
</screen>

<para>
  Hehe, that works. We fooled that crappy pretty-printer! Next, we are
  going to declare the classes in the compilation unit as
  structs. First, we ignore the fields of the class. Now we have tiny
  problem: we want to use concrete syntax for C as well as Java, and
  such a combination does not exist yet. So, we have to create it
  ourselves. We have to create an SDF modules that imports both
  embeddings and derive the parse table from that. The SDF module is:
</para>

  <programlisting><include href="Stratego-Java-C.sdf" parse="text" xmlns="http://www.w3.org/2003/XInclude"/></programlisting>

<para>
  Generate a parse table:
</para>

<screen>
$ pack-sdf -i Stratego-Java-C.sdf -o Stratego-Java-C.def \
  -Idef /usr/share/sdf/java-front/Stratego-Java-15.def \
  -Idef /usr/share/sdf/java-front/Stratego-C.def
$ sdf2table -m Stratego-Java-C -i Stratego-Java-C.def -o Stratego-Java-C.tbl
</screen>

<para>
  and change the meta file of our Stratego module:
</para>

<programlisting><include href="java2c-2.meta" parse="text" xmlns="http://www.w3.org/2003/XInclude"/></programlisting>

<para>
  Now can implement the real rewriting, which involves quite some
  concrete syntax constructs.
</para>

<programlisting>
  java2c :
    CompilationUnit(_, _, [dec])
      ->
    |[
      #include &lt;stdio.h>

      ~dec:cdec

      void main(int argc, char** args)
      {
        printf("\"Hi there!\"");
      }
    ]|
    where
      &lt;classdec2struct> dec => cdec

  classdec2struct :
    type-dec |[ mod* class x { ~*decs } ]| -> dec |[ struct ~id:x { int temp; }; ]|
</programlisting>

<para>
  From the <ulink
  url="https://svn.cs.uu.nl:12443/repos/StrategoXT/java-front/trunk/syn/stratego-v1.5/Embedded-Java-15.sdf">embedding
  of Java in Stratego</ulink> we are using a quotation for type
  declarations, the meta variables mod* and x and an anti-quotation
  for class body declaration. Quote of the productions:
</para>

<programlisting>
  "type-dec" "|[" JavaTypeDec "]|" -> StrategoTerm {cons("ToMetaExpr")}
  "~*" StrategoTerm -> JavaClassBodyDec* {cons("FromMetaExpr")}

  [xyz] [0-9]*     -> JavaID          {prefer}
  "mod" [0-9]* "*" -> JavaClassMod* {prefer}
</programlisting>

<para>
  From the <ulink
  url="https://svn.cs.uu.nl:12443/repos/StrategoXT/trunk/StrategoXT/c-tools/syn/Stratego-C.sdf">embedding
  of C in Stratego</ulink> we are using a quotation for declarations
  and two anti-quotations: one for identifiers and one for
  declarations. Quote of the productions:
</para>

<programlisting>
  "dec" "|[" Declaration "]|" -> StrategoTerm {cons("ToTerm")}

  "~id:"   StrategoTerm -> ID          {cons("FromTerm")}
  "~dec:"  StrategoTerm -> Declaration {cons("FromTerm")}
</programlisting>

<para>
  Run the program:
</para>

<screen>
$ parse-java -i Try.java | ./java2c-2 | pp-c
#include &lt;stdio.h>

struct Try
  {
  int temp;
} ;
void main (int argc, char * * args)
{
  printf("Hi there!");
}
</screen>

<para>
  Well, the pretty-printing could be better, but it works!
</para>

<note>
  <para>
    More later!
  </para>
</note>

</section>

<refentry xml:lang="en" xml:id="ref-rtg2sig"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <refnamediv>
    <refname>rtg2sig</refname>
    <refpurpose>generates a Stratego signature from a regular tree grammar (RTG)</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>rtg2sig</command>
      <arg>--module <replaceable>name</replaceable></arg>
      <arg>-i <replaceable>file</replaceable> | --input <replaceable>file</replaceable></arg>
      <arg>-o <replaceable>file</replaceable> | --output <replaceable>file</replaceable></arg>
      <arg>-b</arg>
      <arg>-S | --silent</arg>
      <arg>--verbose <replaceable>level</replaceable></arg>
      <arg>-k <replaceable>level</replaceable> | --keep <replaceable>level</replaceable></arg>
      <arg>-h | -? | --help</arg>
      <arg>--about</arg>
      <arg>--version</arg>        
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>
      The <command>rtg2sig</command> utility is used to generates a Stratego 
      signature from a regular tree grammar.
    </para>
    
  </refsection>

  <refsection>
    <title>Options</title>

    <variablelist>
      <title>Module Options</title>
      
      <varlistentry>
        <term><option>--module <replaceable>name</replaceable></option></term>
        <listitem>
          <para>
            Specifies that the module name of the resulting Stratego file should
            be <replaceable>name</replaceable>. If <option>--module</option> is
            not given, the output file name is used. If that is not known, the
            input file name is used.
          </para>  
        </listitem>
      </varlistentry>
    </variablelist>
    
    <include href="common-io-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
    <include href="common-debugging-options.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  </refsection>

  <refsection>
    <title>Example</title>
    
    <para>
      Consider the regular tree grammar given below (the exciting part 
      about how we created this from an SDF definition can be gleaned
      from the example for <link linkend="ref-sdf2rtg">sdf2rtg</link>):
    </para>
  
<programlisting>
regular tree grammar
  start Exp
  productions
    Exp      -> Minus(Exp,Exp)
    Exp      -> Plus(Exp,Exp)
    Exp      -> Mod(Exp,Exp)
    Exp      -> Div(Exp,Exp)
    Exp      -> Mul(Exp,Exp)
    Exp      -> Int(IntConst)
    Exp      -> Var(Id)
    IntConst -> &lt;string>
    Id       -> &lt;string>
</programlisting>
 
   <para>
     Provided that this this regular tree grammar is stored in the file 
     <filename>Exp.rtg</filename>, it can be converted into a Stratego
     signature using <command>rtg2sig</command>, as follows:
   </para>
   
    <screen><prompt>$ </prompt>rtg2sig -i Exp.rtg -o Exp.str</screen>
    
    <para>
      The resulting Stratego signature given below may be used directly
      by your Stratego programs by importing the <code>Exp</code> module.
    </para>
    
<programlisting>
module Exp
imports list-cons option
signature
  constructors
    Minus : Exp * Exp -> Exp
    Plus  : Exp * Exp -> Exp
    Mod   : Exp * Exp -> Exp
    Div   : Exp * Exp -> Exp
    Mul   : Exp * Exp -> Exp
    Int   : IntConst -> Exp
    Var   : Id -> Exp
          : String -> IntConst
          : String -> Id
</programlisting>    
            
  </refsection>
  
  
  <include href="reporting-bugs.xml" xmlns="http://www.w3.org/2003/XInclude"/>
  <include href="lgpl-copyright.xml" xmlns="http://www.w3.org/2003/XInclude"/>
</refentry>

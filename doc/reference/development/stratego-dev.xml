<chapter xml:id="contribute"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xl="http://www.w3.org/1999/xlink"   
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>The Development of Stratego/XT</title>
  
  <para>
     This chapter will give you a brief introduction to the tools,
     services and conventions used in the development of Stratego/XT.
     If you want to contribute to the project, you should know this,
     but even if you do not intend to contribute, the information in
     this chapter may be of interest, as it explains how to get the
     latest development versions, and track the development in
     general.
  </para>

  <section>
    <title>The Big Picture</title>
    
    <para>
	  The development of Stratego/XT is completely in the open, as is fitting
	  for an open-source project. This means that the services we use in our
	  development -- the <emphasis>code repository</emphasis>, the
	  <emphasis>issue tracker</emphasis>, the <emphasis>build farm</emphasis>
	  and the <emphasis>mailing lists</emphasis> -- are all publicly readable.
	  We will discuss each of these services in a bit more detail later on.
	</para>
      
    <para>
      The development of Stratego/XT centers around the code
      repository, stored in Subversion at <link
      xl:href="https://svn.strategoxt.org/repos/StrategoXT">https://svn.strategoxt.org/repos/StrategoXT</link>.
      This repository contains all the code that goes into
      Stratego/XT, with the exception of the ATerm library and the
      SDF2 tool bundle, which are available from CWI.

      From the source code repository, the project is rebuilt by the
      build farm whenever a commit is done to the Stratego/XT
      project. During a build, all the unit tests are also run. This
      improves stability, as we are able to find breaking changes
      shortly after they are introduced.
    </para>

   <section>
     <title>Issue Tracker</title>
     
     <para>
       Our issue tracker is located at <link
       xl:href="http://bugs.strategoxt.org/browse/STR">http://bugs.strategoxt.org/browse/STR</link>.
       The tracker contains issues reported by our users, internally
       delegated tasks and requests for feature improvements, all
       placed into a release schedule for the coming releases. If you
       are looking for something to do, this is the place to
       start. Also, if you are interested in knowing where the project
       is headed, this is the best source of information.
     </para>
   </section>
   
   <section>
    <title>Build Farm</title>

    <para>
      The development of Stratego/XT relies heavily on
      <emphasis>continuous integration builds</emphasis>. The build farm will
      continously build Stratego/XT after each commit. Also, satellite 
      projects, such as the BibTeX tools, Java-Front and even this manual,
      will be rebuilt whenever the code repository changes. A natural
      question to ask here is: should all the projects which use Stratego/XT
      also be rebuilt whenever Stratego/XT is changed? In the next
      section, we shall discuss this question.
    </para>
    
    <para>
      The status of the build farm can be found at 
      <link xl:href="http://releases.strategoxt.org/">http://releases.strategoxt.org/</link>.
      This page is updated every time the build farm completes a job. The result
      of a build (provided it suceeded) is downloadable, and you are free to
      download and test it. We do not, however, give any guarantees about the
      stability of these continuous release.
    </para>
    
   </section>
   
   <section>
    <title>Mailing Lists</title>
    
    <para>
      Disussions between the Stratego/XT developers, and also between 
      Stratego users occur at our mailing lists,
      <email>stratego@cs.uu.nl</email> and 
      <email>stratego-dev@cs.uu.nl</email>. They are archived in the 
      <link xl:href="https://mail.cs.uu.nl/mailman/listinfo/stratego">stratego archives</link>
      and <link xl:href="https://mail.cs.uu.nl/mailman/listinfo/stratego-dev">stratego-dev archives</link>,
      respectively.
    </para>
  </section>    
 </section>
      
  <section xml:id="baseline">
    <title>Baseline development</title>

    <section>
      <title>What is a baseline and why do I need it?</title>

      <para>
       A baseline is a snapshot of the Stratego/XT source repository that
       only requires a C compiler to build itself. It is used for the traditional
       "bootstrapping" which is so common in the world of compilers.
      </para>
               
      <para>
       The compiler for Stratego is implemented in Stratego. Also, many of the
       tools used to build Stratego/XT are written in Stratego and depend on
       themselves. Therefore, you will need a full Stratego/XT environment to 
       build the Stratego/XT environment. This process is called bootstrapping.
       The baseline provides the initial Stratego/XT environment.
      </para>
	  
      <para>
       Unlike many bootstrapping compilers, the baseline provided for
       Stratego/XT is not a pre-built binary. It is a a source release of
       Stratego that requires a C compiler to build. We can therefore boostrap
       Stratego/XT on any of the supported platforms, with just one baseline.
      </para>
	  
      <para>
       Bootstrapping using the baseline is only necessary for
       developers of Stratego/XT itself. Normal users of Stratego/XT
       receive tarballs which do not need a baseline: they contain all
       generated and bootstrapped sources. See <xref
       linkend="svn-install"/> for instructions on how to install
       Stratego/XT from Subversion.
      </para>

      <para>
       The big advantage of a baseline is that the development process of 
       Stratego/XT becomes cleaner and more robust. In the past, the bootstrapped
       sources were kept alongside the normal source code in the Subversion
       repository. This was very fragile and required great care on the part of
       the contributors. The baseline setup is much easier to use and a lot safer.
       We hope this will encourage contributions.
      </para>

    </section>

    <section>
      <title>Baseline restrictions</title>

      <para>
	Since we are using a baseline, you cannot
	<emphasis>use</emphasis> a new feature you have added to
	Stratego/XT in Stratego/XT itself until this feature has made
	it to the baseline. Remember that Stratego/XT must be built by
	the baseline.
      </para>

      <para>
	This might sound difficult, but in practice it is easy to
	ensure that you don't do this. You should use the baseline we
	provide to compile Stratego/XT from Subversion and you should
	not change the configuration of Stratego/XT with this baseline
	after installation. The baseline now ensures that you are not
	using new features that you've added to Stratego/XT: it will
	just not compile.
      </para>

    </section>

    <section>
      <title>Baseline upgrading</title>

      <para>
	Baselines are taken always from the buildfarm. The baselines are
	thoroughly checked there. If the build job for a particular revision
	of Strateo/XT does not succeed, this revision cannot be promoted to a
	new baseline. This avoids us getting into nasty bootstrap problems because
	of uncaught build failures. In general, the release of a new baseline is
	careful process.  Baselines will never be created in an ad-hoc way on 
	machines of developers.
      </para>

      <para>
	Picking a successful build from the buildfarm as a new
	baseline is done by hand. If you have added a feature that
	would you like to have in the baseline as soon as possible,
	then please request a baseline update at
	<email>stratego-dev@cs.uu.nl</email> or the IRC channel
	<command>#stratego</command> on <link
        xl:href="http://www.freenode.net/">freenode</link>.
      </para>

    </section>

    <section>
      <title>Submitting your changes</title>

      <para>
	We are fond of patches submitted by users. You don't have to
	fix a big issue: small fixes in error reporting and
	documentation of tools are very valuable as well. Please
	contribute, or at least report, if anything annoys you!
      </para>

    </section>
  </section>

<section xml:id="svn-install">  
  <title>Installation from Subversion</title>
  
  <para>
    In <link linkend="installation" /> in the
    <link linkend="tutorial">Stratego/XT Tutorial</link>, we explain how to
    download, compile and install stable versions of the Stratego/XT framework.
    In this section we will see how to download the bleeding edge sources from
    the Subversion repository. Downloading the development sources is only
    useful if you want to modify the sources of Stratego/XT and might want
    to commit your changes.
  </para>

  <section>
    <title>Requirements</title>

    <para>
      Installation from Subversion requires some packages from the GNU
      build system. You need:
    </para>

    <itemizedlist>
      <listitem>
	<para>Autoconf 2.58 or newer (2.57 will not do)</para>
      </listitem>
      <listitem>
	<para>Automake 1.7.9 or newer. Very recent versions (1.9.x) are
	recommended and required if you want to create a distribution</para>
      </listitem>
      <listitem>
	<para>Libtool 1.5 or newer</para>
      </listitem>
      <listitem>
	<para>pkg-config 0.15 or newer</para>
      </listitem>
    </itemizedlist>

    <para>
      Unfortunately, many Linux distributions contain old versions of
      these packages, so please check the versions that are installed
      on your system. Also, check that libtool is installed at the
      same location (prefix) as Automake, otherwise
      <command>aclocal</command> will not be able to find the Autoconf
      macros of Libtool (<filename>libtool.m4</filename>)
    </para>

    <para>
      You now need a baseline installation of Stratego/XT to install
      Stratego/XT from Subversion. The latest baseline is always
      available at the <link
      xl:href="ftp://ftp.stratego-language.org/pub/stratego/StrategoXT/baseline/latest/strategoxt.tar.gz">ftp
      server</link> of Stratego. The need for a baseline is explained
      in <xref linkend="baseline"/>. For the installation of the
      baseline, you can follow the ordinary installation instructions
      for end-users (<xref linkend="installation"/>).
    </para>
  </section>

  <section>
    <title>How to checkout</title>

    <para>
      The Stratego/XT sources are kept in a source repository managed by 
      Subversion. Before checking out, you need to install recent Subversion
      release. After you have done so, you may do a checkout using the following
      command:
    </para>

<screen>
  $ svn checkout https://svn.strategoxt.org/repos/StrategoXT/strategoxt/trunk/
</screen>

    <para>
      Note that your Subversion client must have SSL support enabled. Install
      Subversion <option>--with-ssl</option>. This is the default installation
      for most distributions.
    </para>
  </section>

  <section>
    <title>How to install</title>

    <para>
      To bring the source tree into a state where you can follow the
      end-user installation instructions you must run the
      <command>bootstrap</command> script. (see <xref
      linkend="bootstrap"/>).
    </para>
        	
<screen>
  $ ./bootstrap
</screen>

    <para>
      Note that on many distributions, the older versions of automake
      and autoconf are invoked by default.  You can check which
      version is invoked by issuing <command>automake
      --version</command> and <command>autoconf --version</command>.
      Unfortunately, the mechanism for switching to a newer version is
      distribution-specific. We automatically figure this out for some
      distributions. Look inside the boostrap for details, adjust and
      provide us with a patch, if your distribution is not supported.
    </para>

    <para>
      Now you can proceed with the installation instructions for a
      Stratego/XT distribution, with one exception: you must configure
      Stratego/XT with your baseline installation:
      <option>--with-strategoxt=<replaceable>$baselineprefix</replaceable></option>.
      <xref linkend="baseline"/> explains why and how we use a
      baseline.
    </para>
  </section>

  <section>
    <title>Subversion Repoman</title>

    <para>
      The repoman gives an overview of possible ways to view the
      sources the StrategoXT repository:
    </para>

    <screen>https://svn.strategoxt.org/repoman/info/StrategoXT</screen>
  </section>

  <section>
    <title>Autoconf Macros: aclocal, libtool, and autoconf</title>
    
    <para>
      GNU Autoconf needs definitions of macros that are used in
      <filename>configure.ac</filename> files. GNU Automake contains
      the tool <command>aclocal</command>, which installs the
      required macros. <command>aclocal</command> gets these macros
      from a directory with m4 files. <command>aclocal
      --print-ac-dir</command> reports this directory. Your libtool
      installation must install the <command>libtool.m4</command>
      file in the <filename>ac-dir</filename>. If this is not the
      case, you will see a non-fatal error like this:
    </para>
    
<screen>
configure.in:9: error: possibly undefined macro: AC_PROG_LIBTOOL
       If this token and others are legitimate, please use m4_pattern_allow.
       See the Autoconf documentation.
</screen>

<para>
  Later on in the build proces a missing =Makefile.in= will be
  reported, after which the build terminates.
</para>

<para>
  Usually the file <filename>libtool.m4</filename> is installed in the
  right directory if you install Libtool and Automake at the same
  prefix. However, when using recent, non-standard, ports of these
  packages on a FreeBSD systems (and probably also some RPM based
  systems), this does not happen. If <filename>libtool.m4</filename>
  is not in the right directory for some reason, then you must copy
  the <filename>libtool.m4</filename> file by hand into the
  <filename>ac-dir</filename>.
</para>
  </section>
</section>  

  <section>
    <title>Contributing</title>

    <section>
      <title>Committing your changes</title>

      <para>
	Although it is time-consuming, it is strongly advised to run a
	<command>make check</command> on the complete source tree
	before committing anything.
      </para>

      <para>
	Before committing you should review the files that you have
	modified. After a <command>make clean</command> and
	<command>make bootclean</command> the <command>svn
	status</command> will show these files. We have configured the
	source tree not to show files in this status overview that are
	not important. Please use <command>svn diff</command> to
	verify that your changes are as intended. Further, please try
	to keep the granularity of the commits to one fix per
	commit. Specifically, do not commit many, unrelated fixes in
	one go.
      </para>

      <para>
	Please explain your changes in the
	<filename>ChangeLog</filename> of the subpackages. Also, use
	this changelog as your Subversion commit message.
      </para>

    </section>
</section>

</chapter>

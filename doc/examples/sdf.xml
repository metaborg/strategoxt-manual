<chapter xml:id="demo-sdf"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Syntax Definition and Pretty-Printing</title>

<sect1>
  <title>TIL: a Tiny Imperative Language</title>

  <para>

    This chapter shows how to define a syntax definition in SDF and
    how to derive a number of artifacts from such a definition, i.e.,
    a parser, a pretty-printer, and a Stratego signature. The chapter
    also introduces TIL, a Tiny Imperative Language, which is used in
    many of the examples.

  </para>

  <para>

     TIL is a tiny imperative language designed for the demonstration
     of language and transformation definition formalisms. The
     language has two data-types, integers and strings. A TIL program
     consists of a list of statements, which can be variable
     declarations, assignments, I/O instructions, and control-flow
     statements. Statements can use expressions to compute values from
     integer and string constants, and the values of variables.

  </para>

  <para>
   
     The following example gives an impression of the language. 

  </para>

  <includefile 
    id="ref-til-xmpl-test1.til" 
    root="../../src" 
    file="til/xmpl/test1.til" />

</sect1>

<sect1>
  <title>Syntax Definition</title>

  <para>

     This section shows a modular definition of the syntax of TIL, the
     generation of a parse table from that definition, and its use for
     parsing program texts into abstract syntax trees.

  </para>

<sect2>
  <title>Modules</title>

  <para>

    The following files define the syntax of TIL in the syntax
    definition formalism SDF. SDF is a modular formalism that supports
    the definition of lexical and context-free syntax. Modularity
    entails that a syntax definition can be composed from multiple
    modules, and that such modules can be reused in multiple syntax
    definitions. Also, syntax definitions of different languages can
    be combined.

  </para>

  <sect3>
     <title>Layout</title>

  <para>

     Module <code>TIL-layout</code> defines the syntax of
     <code>LAYOUT</code>, the symbols that occur between every two
     context-free non-terminals. This is the way to introduce the
     whitespace and comments for a language. The definition uses <link
     linkend="ref-sdf-character-classes">character classes</link> to
     indicate classes of characters. For instance, whitespace consists
     of spaces, tabs, newlines, and carriage returns. Likewise,
     comments consist of two slashes followed by zero or more
     characters which are not newlines or carriage returns. The <link
     linkend="ref-sdf-follow-restriction">follow restriction</link>
     prevents ambiguities in parsing layout.
   
  </para>

  <includefile 
    id="ref-til-syn-TIL-layout.sdf" 
    root="../../src"
    file="til/syn/TIL-layout.sdf" />
  
  </sect3>

  <sect3>
    <title>Literals</title>
  <para>

     Module <code>TIL-literals</code> defines the syntax of
     identifiers, integer constants, and string literals. Note again
     the use of <link linkend="ref-sdf-character-classes">character
     classes</link> to indicate collections of characters and <link
     linkend="ref-sdf-regular-expressions">regular expressions</link> to
     indicate lists of zero or more (<code>*</code>), or one or more
     (<code>+</code>) elements. String characters
     (<code>StrChar</code>) are any characters other than double
     quote, backslash, or newline, and escaped versions of these
     characters.
   
  </para>

  <includefile 
    id="ref-til-syn-TIL-literals.sdf" 
    root="../../src"
    file="til/syn/TIL-literals.sdf" />
  
  </sect3>

  <sect3>
    <title>Expressions</title>

  <para>
   
     Module <code>TIL-expressions</code> defines the syntax of
     expressions that compute a value. Basic expressions are
     identifiers (variables), integer constants, and string literals.
     More complex expressions are obtained by the arithmetic and
     relational operators.

     The constructor attributes of productions (e.g.,
     <code>cons("Add")</code>) indicates the constructor to be used in
     the construction of an abstract syntax tree from a parse tree.

     Ambiguities of and between productions are solved by means of
     <link linkend="ref-sdf-associativity">associativity</link> and <link
     linkend="ref-sdf-priority">priority</link> declarations.

  </para>

  <includefile 
    id="ref-til-syn-TIL-expressions.sdf" 
    root="../../src"
    file="til/syn/TIL-expressions.sdf" />

  </sect3>

  <sect3>
    <title>Statements</title>

  <para>
   
     Module <code>TIL-statements</code> defines the syntax of
     statements, i.e., instructions to be executed. The assignment
     statement assigns the value of the right-hand side expression to
     the variable in the left-hand side. The <code>read</code> and
     <code>write</code> statements read a value from standard input or
     write a value to standard output. The control-flow constructs use
     lists of statements.

  </para>

  <includefile 
    id="ref-til-syn-TIL-statements.sdf" 
    root="../../src"
    file="til/syn/TIL-statements.sdf" />
  
  </sect3>

  <sect3>
    <title>Function and Procedure Calls</title>

  <para>
   
     Module <code>TIL-calls</code> defines the syntax of function and
     procedure calls. Even though TIL does not have function
     definitions, it is useful to be able to call primitive functions
     and procedures.

  </para>

  <includefile 
    id="ref-til-syn-TIL-calls.sdf" 
    root="../../src"
    file="til/syn/TIL-calls.sdf" />
  
  </sect3>

  <sect3>
    <title>Programs</title>

  <para>
   
     Module <code>TIL</code> (<xref linkend="ref-til-syn-TIL.sdf"/>)
     defines the syntax of the complete language by importing the
     modules above, and defining a <code>Program</code> as a list of
     statements. In addition, the module introduces a
     <code>start-symbol</code>. This is the sort that a parser will
     start parsing with. There may be multiple start symbols.

  </para>
  
  <includefile id="ref-til-syn-TIL.sdf" root="../../src" file="til/syn/TIL.sdf" />

  </sect3>
</sect2>


<sect2>
  <title>Parse Table Generation</title>

  <para>

     The following <code>maak</code> script first collects the modules
     of the syntax definition and then generates a parse table. 

     The result of <xref linkend="ref-pack-sdf"/> is a `definition'
     file (as opposed to a single module file, as we saw above) that
     contains all modules imported by the main module,
     <code>TIL.sdf</code> in this case (<xref
     linkend="ref-TIL.def"/>).

     The parser generator <xref linkend="ref-sdf2table"/> creates a
     parse table from a syntax definition. Note the use of the
     <code>-m</code> flag to indicate the main module from which to
     generate the table. The parse table (<code>TIL.tbl</code>) is a
     file in ATerm format, that is interpreted by the <xref
     linkend="ref-sglri"/> tool to parse text files.

  </para>

  <includefile id="ref-til-syn-maak" root="../../src" file="til/syn/maak" />

  <includefile id="ref-TIL.def" root="../../src" file="til/syn/TIL.def" />

</sect2>

<sect2 xml:id="sdf-parsing-programs">
  <title>Parsing Programs</title>

  <para>

     The <xref linkend="ref-sglri"/> tool parses a text file given a
     parse table generated by <xref linkend="ref-sdf2table"/>. The
     result is an abstract syntax term in the ATerm format. In order
     to inspect this term it is useful to `pretty-print' it using the
     <xref linkend="ref-pp-aterm"/> tool. Compare the resulting
     term with the program in <xref linkend="ref-til-xmpl-test1.til" />.

  </para>

  <includefile 
    id="ref-til-xmpl-parse-test" 
    root="../../src" 
    file="til/xmpl/parse-test" />

  <includefile 
    id="ref-til-xmpl-test1.atil" 
    root="../../src" 
    file="til/xmpl/test1.atil" />

</sect2>

</sect1>

<sect1>
  <title>Term Format</title>

  <para>

     The result of parsing a text is an abstract syntax tree
     represented by means of an <link
     linkend="ref-aterms">ATerm</link>. When produced by a parser, one
     can be sure that an ATerm has the right format, since it was
     derived directly from a parse tree. However, terms can also be
     produced by other components, e.g., be the result of a
     transformation. In those cases it may worthwhile to check that
     the term is well-formed according to some schema. In Stratego/XT
     tree schemas are described by Regular Tree Grammars
     (RTGs). Stratego signatures are used within Stratego programs to
     verify some aspects of Stratego programs. RTGs and signatures can
     be derived automatically from a syntax definition in SDF.

  </para>

  <para>
 
     The following <code>maak</code> scripts derives from a syntax
     definition first an RTG, and from the RTG a Stratego signature.

  </para>

  <includefile 
    id="ref-til-sig-maak" 
    root="../../src" 
    file="til/sig/maak" />

<sect2>
  <title>Regular Tree Grammars</title>

  <para>

     A <link linkend="ref-rtg">regular tree grammar</link> defines
     well-formedness rules for a set of trees (or terms).  The
     following regular tree grammar has been generated from the syntax
     definition of TIL and precisely describes the abstract syntax
     trees of TIL programs.

  </para>

  <includefile 
    id="ref-til-sig-TIL.rtg" 
    root="../../src" 
    file="til/sig/TIL.rtg" />

</sect2>

<sect2>
  <title>Signatures</title>
  
  <para>

     Algebraic signatures are similar to regular tree
     grammars. Stratego requires signatures for the declaration of
     term constructors to be used in transformation programs.  The
     following Stratego signature is generated from the regular tree
     grammar above, and thus describes the constructors of TIL
     abstract syntax trees.

  </para>

  <includefile 
    id="ref-til-sig-TIL.str" 
    root="../../src" 
    file="til/sig/TIL.str" />

</sect2>

<sect2>
  <title>Format Checking</title>

  <para>

     The well-formedness of a term with respect to a regular tree
     grammar can be checked using the <xref
     linkend="ref-format-check"/> tool. When well-formed the tool
     prints the type of the term. If not it indicates, which subterms
     cannot be typed.  The following examples illustrate checking of a
     well-formed and non well-formed term.

  </para>

  <includefile 
    id="ref-til-xmpl-fc-test1" 
    root="../../src" 
    file="til/xmpl/fc-test1" />

  <includefile 
    id="ref-til-xmpl-test1.atil.fc" 
    root="../../src" 
    file="til/xmpl/test1.atil.fc" />


  <includefile 
    id="ref-til-xmpl-test1-wrong.atil" 
    root="../../src" 
    file="til/xmpl/test1-wrong.atil" />

  <includefile 
    id="ref-til-xmpl-fc-test2" 
    root="../../src" 
    file="til/xmpl/fc-test2" />

  <includefile 
    id="ref-til-xmpl-test1-wrong.atil.fc" 
    root="../../src" 
    file="til/xmpl/test1-wrong.atil.fc" />

</sect2>

</sect1>

<sect1>
  <title>Pretty-Printing</title>

  <para>
 
     After transforming a program we need to turn it into a program
     text again. Unparsing is the reverse of parsing and turns an
     abstract syntax tree into a text. Pretty-printing is unparsing
     with an attempt at creating a readable program text.

     There is a direct correspondence between abstract syntax trees
     and the program text from which they were produced defined by the
     syntax definition. This can be used in the other direction as well
     to generate a pretty-printer from a syntax definition. 

     The following <code>maak</code> script generates from the TIL
     syntax definition a pretty-print table <code>TIL.pp</code> using
     <xref linkend="ref-ppgen"/> and a parenthesizer using <xref
     linkend="ref-sdf2parenthesize"/>. The latter is a Stratego
     program, which is compiled using the Stratego compiler <xref
     linkend="ref-strc"/>.

  </para>

  <includefile 
    id="ref-til-pp-maak" 
    root="../../src" 
    file="til/pp/maak" />

<sect2>
  <title>Pretty-Print Table</title>

  <para>

     A <link linkend="pp-table">pretty-print table</link> defines a
     mapping from abstract syntax trees to expressions in the <link
     linkend="box">Box Formatting Language</link>. The following
     pretty-print table is generated from the syntax definition for
     TIL. It is a default table and only ensures that the program text
     resulting from pretty-printing is syntactically correct, not that
     it is actually pretty.

  </para>

  <includefile 
    id="ref-til-pp-TIL.pp" 
    root="../../src" 
    file="til/pp/TIL.pp" />

</sect2>

<sect2>
  <title>Applying Pretty-Print Tables</title>

  <para>

     A pretty-print table is applied using the <xref
     linkend="ref-ast2text" /> tool, which translates an abstract
     syntax term to text given a pretty-print table. (In fact,
     ast2text is a composition of <xref linkend="ref-ast2abox" /> and
     <xref linkend="ref-abox2text" />.) The <code>pp-test1</code>
     script shows how to use a pretty-print table.  The result of
     unparsing the AST for the <code>test1.til</code> program is
     clearly not very pretty, but it is a syntactically correct TIL
     program. This is tested by the subsequent commands in the script,
     which parse the <code>test1.txt1</code> program and compare the
     resulting AST to the original AST. It turns out that the two
     programs have the exact same AST.

  </para>

  <includefile 
    id="ref-til-xmpl-pp-test1" 
    root="../../src" 
    file="til/xmpl/pp-test1" />

  <includefile 
    id="ref-til-xmpl-test1.txt1" 
    root="../../src" 
    file="til/xmpl/test1.txt1" />

</sect2>

<sect2>
  <title>Adapting the Pretty-Print Table</title>

  <para>

     To get more readable programs after pretty-printing we adapt the
     generated pretty-print table using constructs from the <link
     linkend="box">Box Formatting Language</link> to indicate how each
     construct should be formatted. 

  </para>

  <includefile 
    id="ref-til-pp-TIL-pretty.pp" 
    root="../../src" 
    file="til/pp/TIL-pretty.pp" />

  <para>

     Using the same procedure as before, but using the adapted pretty-print
     table (see <linkfile file="til/xmpl/pp-test2" />) we not get a program
     that is much closer to the original.

  </para>

  <includefile 
    id="ref-til-xmpl-test1.txt2" 
    root="../../src" 
    file="til/xmpl/test1.txt2" />

</sect2>

<sect2>
  <title>Restoring Parentheses</title>

  <para>

     The <code>til-parenthesize</code> program generated by <xref
     linkend="ref-sdf2parenthesize"/> is a simple rewrite system with
     rules that add a <code>Parenthetical</code> constructor around
     subtrees that have a priority or associativity conflict with
     their parent node.

     The implementation in <linkfile
     file="til/pp/til-parenthesize.str" /> is not of interest here.

     The program is used before applying the pretty-print table, as
     illustrated with the following example. The
     <code>test2.txt1</code> program is produced without introducing
     parentheses and clearly has a different meaning than the original
     program. The <code>test2.txt2</code> program has parentheses in
     the right places.

  </para>

  <includefile 
    id="ref-til-xmpl-pp-test3" 
    root="../../src" 
    file="til/xmpl/pp-test3" />

  <includefile 
    id="ref-til-xmpl-test2.atil" 
    root="../../src" 
    file="til/xmpl/test2.atil" />

  <includefile 
    id="ref-til-xmpl-test2.txt1" 
    root="../../src" 
    file="til/xmpl/test2.txt1" />

  <includefile 
    id="ref-til-xmpl-test2.atil.par" 
    root="../../src" 
    file="til/xmpl/test2.atil.par" />

  <includefile 
    id="ref-til-xmpl-test2.txt2" 
    root="../../src" 
    file="til/xmpl/test2.txt2" />

</sect2>

</sect1>

<sect1>
  <title>A Complete Pipeline</title>

  <para>

     Given an SDF syntax definition we can produce a parser, a format
     checker, a parenthesizer, and a pretty-printer. Together these
     tools form the basic ingredients of a transformation
     pipeline. The composition in <code>til-process</code> shows how
     the tools are combined. This composition is not so useful as it
     only turns a program in a pretty-printed version of itself. In
     the next chapters we'll see how this pipeline can be extended
     with transformation tools.

  </para>

  <includefile 
    id="ref-til-xmpl-til-process" 
    root="../../src" 
    file="til/xmpl/til-process" />

</sect1>

    
</chapter>

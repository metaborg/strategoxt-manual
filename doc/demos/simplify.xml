<chapter id="demo-rewriting">
  <title>Simplification and Desugaring</title>
    
  <para>

     Given the infrastructure presented in <link
     linkend="demo-sdf">the previous chapter</link> we can create a
     basic pipeline for performing transformations on abstract syntax
     trees. What is missing is the actual transformations to
     perform. In the Stratego/XT setting, we use the Stratego language
     for defining transformations on abstract syntax trees.

     In this chapter we show how to define a collection of basic term
     rewrite rules, and how to combine these using the standard
     <code>innermost</code> strategy to simplify TIL programs.

  </para>

<sect1>
  <title>Constant Folding Rules</title>

  <para>

     Stratego is a modular programming languages and supports the
     definition of named rewrite rules. These rules can be used in
     many different transformations by importing the module defining
     them and using their names as arguments of rewriting strategies.

  </para>

  <para>

     Module <code>til-eval</code> imports the <link
     linkend="ref-til-sig-TIL.str">signature of TIL</link>, which
     defines the constructors of the abstract syntax of TIL.  Then the
     module defines rewrite rules for evaluating constructs that are
     (partially) constant. For instance, the addition of two integer
     constants can be reduced to the integer constant of their sum.

  </para>

  <includefile 
     id="ref-til-sim-til-eval.str" 
     root="../../src" 
     file="til/sim/til-eval.str" />

</sect1>

<sect1>
  <title>Desugaring Rules</title>

  <para>
    
     Another common kind of rules are desugaring rules, which define a
     language construct in terms of other language constructs. Module
     <code>til-desugar</code> defines rules <code>ForToWhile</code>
     and <code>IfThenToIfElse</code>. The <code>ForToWhile</code> rule
     rewrites <code>For</code> loops to a <code>While</code> loop,
     which requires the introduction of a new variable to hold the
     value of the upperbound.  The <code>IfThenToIfElse</code>
     transforms <code>if-then</code> statements into
     <code>if-then-else</code> statements.

  </para>

  <includefile 
     id="ref-til-sim-til-desugar.str" 
     root="../../src" 
     file="til/sim/til-desugar.str" />

</sect1>

<sect1>
  <title>Simplying by Term Rewriting</title>

  <para>

     Module <code>til-simplify</code> is a basic Stratego program. It
     imports the <code>til-eval</code> and <code>til-desugar</code>
     modules, and the Stratego standard library (<code>liblib</code>),
     which defines standard rewriting strategies and additional
     utilities for I/O and such.

  </para>

  <para>

     The <code>io-til-simplify</code> strategy of
     <code>til-simplify</code> represents the entry point for the
     program when it is invoked. It uses the <code>io-wrap</code>
     strategy to parse command-line arguments, read the input term,
     and write the output term.

  </para>

  <para>

     The <code>til-simplify</code> strategy defines the actual
     transformation, which is a complete normalization of the input
     term with respect to the rewrite rules introduced above. The
     normalization strategy chosen here is <code>innermost</code>,
     which exhaustively applies its argument strategy starting with
     the innermost nodes of the tree.

  </para>

  <includefile 
     id="ref-til-sim-til-simplify.str" 
     root="../../src" 
     file="til/sim/til-simplify.str" />

</sect1>

<sect1>
  <title>Compiling the Simplifier</title>

  <para>

     Stratego programs are compiled to executable programs by the
     Stratego compiler <xref linkend="ref-strc"/>. The <code>-I</code>
     option is used to indicate that some modules imported by this
     program (<code>TIL.str</code>) resides in the <code>../sig</code>
     directory. The <code>-la</code> option is used to link the
     separately compiled Stratego library.

  </para>

  <includefile 
     id="ref-til-sim-til-maak" 
     root="../../src" 
     file="til/sim/maak" />

</sect1>

<sect1>
  <title>Applying the Simplifier</title>

  <para>

     A compiled Stratego program is an ordinary executable. When the
     <code>io-wrap</code> strategy was used the program has a
     <code>-i</code> option for indicating the input file, and a
     <code>-o</code> option to indicate the output file. Thus, the
     program reads the ATerm in the input file, transforms it, and
     writes the resulting ATerm back to the output file.

  </para>

  <para>

     The following test script shows how the <link
     linkend="ref-til-xmpl-test1.til">til/xmpl/test1.til</link> file
     is simplified, and the result pretty-printed.

  </para>

  <includefile 
     id="ref-til-xmpl-simplify-test" 
     root="../../src" 
     file="til/xmpl/simplify-test" />

  <beforeafter
     id="ref-til-xmpl-test1.sim.txt" 
     root="../../src" 
     file1="til/xmpl/test1.til"
     file2="til/xmpl/test1.sim.txt" />

</sect1>

</chapter>

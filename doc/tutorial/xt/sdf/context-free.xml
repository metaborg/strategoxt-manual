<section
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Examples: Defining Context-Free Syntax</title>

  <para>
    Context-free syntax in SDF is syntax where layout is allowed
    between the symbols of the productions. Context-free syntax can be
    defined in a natural way, thanks to the use of generalized-LR
    parsing, declarative disambiguation mechanism, and an extensive
    set of regular expression operators. To illustrate the definition
    of context-free syntax, we give examples of defining expressions
    and statements. Most of the time will be spend on explaining the
    disambiguation mechanisms.
  </para>

  <section>
    <title>Expressions</title>

    <para>
      In the following sections, we will explain the details of a
      slightly extended version of the SDF modules in <xref
      linkend="ex-basic-module"/>, shown in <xref
      linkend="xmpl-sdf-expression-module"/>.
    </para>

    <example xml:id='xmpl-sdf-expression-module'>
      <title>Syntax of Small Expression Language in SDF</title>

      <programlisting>
module Expression
imports
  Lexical

exports
  context-free start-symbols Exp
  context-free syntax
    Id          -> Var <co xml:id="xmpl-cf-injection"/>
    Var         -> Exp {cons("Var") <co xml:id="xmpl-cf-cons1"/>}
    IntConst    -> Exp {cons("Int") <co xml:id="xmpl-cf-cons2"/>}}
    "(" Exp ")" -> Exp {bracket <co xml:id="xmpl-cf-bracket"/>}

    "-" Exp     -> Exp {cons("UnaryMinus")}
    Exp "*" Exp -> Exp {cons("Times"), left <co xml:id="xmpl-cf-assoc-left"/>}
    Exp "/" Exp -> Exp {cons("Div"), left}
    Exp "%" Exp -> Exp {cons("Mod"), left}
    Exp "+" Exp -> Exp {cons("Plus") <co xml:id="xmpl-cf-cons3"/>, left}
    Exp "-" Exp -> Exp {cons("Minus"), left}
    Exp "=" Exp -> Exp {cons("Eq"), non-assoc <co xml:id="xmpl-cf-non-assoc"/>}
    Exp ">" Exp -> Exp {cons("Gt"), non-assoc}

  context-free priorities <co xml:id='xmpl-cf-priorities' />
       "-" Exp -> Exp <co xml:id="xmpl-cf-priority-prod"/>
    > {left: <co xml:id="xmpl-cf-group-left"/>
        Exp "*" Exp -> Exp
        Exp "/" Exp -> Exp
        Exp "%" Exp -> Exp
      } 
    > {left: 
        Exp "+" Exp -> Exp
        Exp "-" Exp -> Exp
      }
    > {non-assoc: <co xml:id="xmpl-cf-group-non-assoc"/>
        Exp "=" Exp -> Exp
        Exp ">" Exp -> Exp
      }</programlisting>
    </example>
  </section>

  <section>
    <title>Constructor Attributes and Abstract Syntax Trees</title>

    <para>
      First, it is about time to explain the constructor attribute,
      <code>cons</code>, which was already briefly mentioned in <xref
      linkend="section-concepts-parse-trees"/>. In the example
      expression language, most productions have a constructor
      attribute, for example <xref linkend="xmpl-cf-cons1"/>, <xref
      linkend="xmpl-cf-cons2"/> and <xref linkend="xmpl-cf-cons3"/>,
      but some have not, for example <xref
      linkend="xmpl-cf-injection"/> and <xref
      linkend="xmpl-cf-bracket"/>.
    </para>

    <para>
      The <code>cons</code> attribute does not have any actual meaning
      in the definition of the syntax, i.e the presence or absence of
      a constructor does not affect the syntax that is defined in any
      way. The constructor only serves to specify the name of the
      abstract syntax tree node that is to be constructed if that
      production is applied. In this way, the <code>cons</code>
      attribute <xref linkend="xmpl-cf-cons2"/> of the production for
      integer literals, defines that an <code>Int</code> node should
      be produced for that production:
    </para>

    <screen><prompt>$</prompt> echo "1" | sglri -p Test.tbl --no-heuristic-filters
Int("1")</screen>

    <para>
      Note that this <code>Int</code> constructor takes a single
      argument, a string, which is the name of the variable. This
      argument of <code>Int</code> is a string because the production
      for <code>IntConst</code> is defined in <emphasis>lexical
      syntax</emphasis> and all derivations from lexical syntax
      productions are represented as strings, i.e. without
      structure. As another example, the production for addition has a
      <code>Plus</code> constructor attribute <xref
      linkend="xmpl-cf-cons2"/>. This production has three symbols on
      the left-hand side, but the constructor takes only two
      arguments, since literals are not included in the abstract
      syntax tree.
    </para>

    <screen><prompt>$</prompt> echo "1+2" | sglri -p Test.tbl --no-heuristic-filters
Plus(Int("1"),Int("2"))</screen>

    <para>
      However, there are also productions that have no
      <code>cons</code> attribute, i.e. <xref
      linkend="xmpl-cf-injection"/> and <xref
      linkend="xmpl-cf-bracket"/>. The production <xref
      linkend="xmpl-cf-injection"/> from <code>Id</code> to
      <code>Var</code> is called an <emphasis>injection</emphasis>,
      since it does not involve any additional syntax. Injections
      don't need to have a constructor attribute. If it is left out,
      then the application of the production will not produce a node
      in the abstract syntax tree. Example:
    </para>

    <screen><prompt>$</prompt> echo "x" | sglri -p Test.tbl --no-heuristic-filters
Var("x")</screen>

    <para>
      Nevertheless, the production <xref linkend="xmpl-cf-bracket"/>
      does involve additional syntax, but does not have a
      constructor. In this case, the <code>bracket</code> attribute
      should be used to indicate that this is a symbol between
      brackets, which should be literals. The <code>bracket</code>
      attribute does not affect the syntax of the language, similar to
      the constructor attribute. Hence, the parenthesis in the
      following example do not introduce a node, and the
      <code>Plus</code> is a direct subterm of <code>Times</code>.
    </para>

    <screen><prompt>$</prompt> echo "(1 + 2) * 3" | sglri -p Test.tbl --no-heuristic-filters
Times(Plus(Int("1"),Int("2")),Int("3"))</screen>
  </section>

  <section>
    <title>Ambiguities in Expressions</title>

    <para>
      Syntax definitions that use only a single non-terminal for
      expressions are highly ambiguous. <xref
      linkend="xmpl-sdf-amb-expression"/> shows the basic arithmetic
      operators defined in this way. For every combination of
      operators, there are now multiple possible derivations. For
      example, the string <code>a+b*c</code> has two possible
      derivations, which we can actually see because of the use of a
      generalized-LR parser:
    </para>

    <example xml:id="xmpl-sdf-amb-expression">
      <title>Ambiguous and Non-Ambiguous Syntax for
      Expressions</title>

      <programlisting>
  Exp "+" Exp -> Exp {cons("Plus")}
  Exp "-" Exp -> Exp {cons("Minus")}
  Exp "*" Exp -> Exp {cons("Mul")} 
  Exp "/" Exp -> Exp {cons("Div")}</programlisting>
    </example>

    




    <para>
      In plain context-free grammars such ambiguities are solved by
      introducing additional non-terminals and productions. This
      results in much more complex parse trees and increases the
      distance between parse trees and abstract syntax trees.
    </para>

    <programlisting>
  AddExp -> Exp

  MulExp -> AddExp
  AddExp "+" MulExp -> AddExp {cons("Plus")}
  AddExp "-" MulExp -> AddExp {cons("Minus")}

  PrimExp -> MulExp
  MulExp "*" PrimExp -> MulExp {cons("Mul")} 
  MulExp "/" PrimExp -> MulExp {cons("Div")}

  IntConst -> PrimExp {cons("Int")}
  Id       -> PrimExp {cons("Var")}</programlisting>
  </section>

  <section>
    <title>Associativity and Priorities</title>

    <para>
      In order to support natural syntax definitions, SDF provides
      several declarative disambiguation mechanismqs. Associativity
      declarations (<code>left</code>, <code>right</code>,
      <code>non-assoc</code>), disambiguate combinations of a binary
      operator with itself and with other operators. Thus, the left
      associativity of <code>+</code> entails that <code>a+b+c</code>
      is parsed as <code>(a+b)+c</code>. Priority declarations
      (<code>></code>) declare the relative priority of productions. A
      production with lower priority cannot be a direct subtree of a
      production with higher priority. Thus <code>a+b*c</code> is
      parsed as <code>a+(b*c)</code> since the other parse
      <code>(a+b)*c</code> has a conflict between the <code>*</code>
      and <code>+</code> productions.
    </para>
    
    <programlisting>
  ...
> Exp "&amp;"  Exp -> Exp
> Exp "^"  Exp -> Exp
> Exp "|"  Exp -> Exp
> Exp "&amp;&amp;" Exp -> Exp
> Exp "||" Exp -> Exp
> ... </programlisting>

    <section>
      <title>Group Associativity</title>
      <para/>
    </section>
    
    <section>
      <title>Priorities and Hedged Symbols</title>
      <para/>
      <para>
	Solution: introduce an auxiliary non-terminal
      </para>
    </section>
  </section>

  <section>
    <title>Array Creation and Access Ambiguity</title>
    
    <para>
      This is usually handled with introducing a new non-terminal.
    </para>
    
    <programlisting>
context-free syntax
  "new" ArrayBaseType DimExp+ Dim*  -> ArrayCreationExp {cons("NewArray")}

  Exp "[" Exp "]" -> Exp {cons("ArrayAccess")}
  ArrayCreationExp "[" Exp "]" -> Exp {reject}</programlisting>
  </section>
  
  <section>
    <title>Statements</title>
    
    <para>
      <xref linkend="Fig-RegularExpressions"/> illustrates the use of
      these operators in the extension of the expression language with
      statements and function declarations. Lists are used in numerous
      places, such as for the sequential composition of statements
      (<code>Seq</code>), the declarations in a let binding, and the
      formal and actual arguments of a function (<code>FunDec</code>
      and <code>Call</code>). An example function definition in this
      language is:
    </para>

    <figure xml:id="Fig-RegularExpressions">
      <title>
	Syntax definition with regular expressions.
      </title>
      <showfile root="." file="xmpl/Statements.sdf"/>
    </figure>

    <screen>
function fact(n, x) =
  if n > 0 then fact(n - 1, n * x) else x</screen>

    <section>
      <title>Dangling Else</title>
      <para/>
    </section>
  </section>

  <section>
    <title>Whitespace and Comments</title>

<programlisting>
context-free restrictions
  LAYOUT? -/- [\ \t\12\n\r]</programlisting>

    <para>
      Why follow restrictions on whitespace is necessary
    </para>

<programlisting>
context-free restrictions
  LAYOUT?  -/- [\/].[\*]
  LAYOUT?  -/- [\/].[\/]</programlisting>
  </section>
</section>
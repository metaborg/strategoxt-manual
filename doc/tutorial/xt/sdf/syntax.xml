<section
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Syntax</title>
  
  <section>
    <title>Lexical and Context-free Syntax</title>
    
    <para>
      Everything defined using productions.
    </para>
    
    <para>
      Difference between lexical and context-free syntax.
    </para>
    
    <para>
      In SDF the definition of lexical and context-free syntax are
      integrated in the same formalism, and are specified using the
      same means, i.e., context-free productions, regular expressions,
      etc. Productions for lexical items are introduced using the
      keywords <code>lexical syntax</code>. The only difference
      between lexical and context-free syntax is that layout
      (whitespace, comments) can occur between the strings
      corresponding to sorts in the left-hand of a context-free
      production, or, conversely, <emphasis>no</emphasis> layout is
      allowed between the tokens of a lexeme. The occurrence of layout
      is indicated by injecting <code>LAYOUT?</code>, i.e., optional
      layout, between every two symbols of a context-free
      production. To avoid cluttering syntax definitions, this is done
      automatically by the SDF parser generator.
    </para>
  </section>

  <section>
    <title>Productions and Symbols</title>
    <para/>
  </section>
  
  <section>
    <title>Regular Expressions</title>
    
    <para>
      Programming languages usually contain all kinds of list
	constructs. Specification of lists with plain context-free
	grammars requires several productions for each list construct.
	SDF provides a bunch of regular expression operators abbreviating
	common patterns. The operators <code>A*</code> and
	<code>A+</code> denote lists of zero (one) or more
	<code>A</code>s.  The <code>{A lit}*</code> and <code>{A
	lit}+</code> operators denote lists of zero (one) or more
	<code>A</code>s separated by <code>lit</code>.
    </para>
  </section>
</section>

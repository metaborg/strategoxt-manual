<chapter xml:id="program-representation"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Architecture</title>

  <section>
    <title>Tools as Transformation Components</title>
    
    <para>
      XT is a collection of components for implementing transformation
      systems. Some of these components generate code that can be
      included in a transformation system, such as a parser or
      pretty-printer. Other components can be used immediately, since
      they are generic tools. The components of XT are all
      <emphasis>executable tools</emphasis>: they can be used directly
      from the command-line.
    </para>

    <para>
      According to the Unix philosophy, the tools that are part of XT
      all do just one thing (i.e. implement one aspect of a
      transformation system) and can be composed into a pipeline to
      combine them in any way you want. A sketch of a typical pipeline
      is shown in <xref linkend="Fig-Pipeline2"/>. First, a parser is
      applied to a source program. This results in an abstract syntax
      tree, which is then transformed by a sequence of transformation
      tools. Finally, the tree is pretty-printed back to a source
      program. So, this pipeline is a source to source transformation
      system. The tools that are part of the pipeline exchange
      <emphasis>structured representations</emphasis> of a program, in
      the form of an abstract syntax tree. These structured
      representations can be read in any programming language you
      want, so the various components of a transformation system can
      be implemented in different programming languages. Usually, the
      real transformation components will be implemented in Stratego.
    </para>

    <figure xml:id="Fig-Pipeline2">
      <title>
	Pipeline of a software transformation system.
      </title>
      <pngobject fileref="../../introduction/pipe.png" align="center"/>
    </figure>

    <para>
      Of course, some compositions are very common. For example, you
      definitly don't want to enter the complete pipeline of a
      compiler again and again. So, you want to pre-define such a
      composition to make it reusable as single tool. For this, you
      could of create a shell script, but option handling in shell
      scripts is quite tiresome and you cannot easily add composition
      specific glue code. To solve this, Stratego itself has a concise
      library for creating compositions of transformation tools,
      called XTC. We will come back to that later in <xref
      linkend="xtc"/>.
    </para>

    <para>
      The nice thing about this approach is that all the tools can be
      reused in different transformation systems. A parser,
      pretty-printer, desugarer, optimizer, simplifier, and so an is
      automatically available to other transformation systems that
      operate on the same language. Even if a tool will typically be
      used in a single dominant composition (e.g. a compiler), having
      the tool available to different transformation systems is very
      useful. In other words: an XT transformation system is
      <emphasis>open</emphasis> and its components are
      <emphasis>reusable</emphasis>.
    </para>
  </section>

  <section>
    <title>Grammar Oriented</title>

    <para>
      Programmers write programs as texts using text editors. Some
      programming environments provide more graphical (visual)
      interfaces for programmers to specify certain domain-specific
      ingredients (e.g., user interface components). But ultimately,
      such environments have a textual interface for specifying the
      details. So, a program transformation system needs to deal with
      programs that are in text format. 
    </para>

    <para>
      However, for all but the most trivial transformations, a
      structured, rather than a textual, representation is
      needed. Working directly on the textual representation does not
      give the transformation enough information about what the text
      actually means. To bridge the gap between the textual and the
      structured representation, parsers and unparsers are
      needed. Also, we need to know how this structured representation
      is actually structured.
    </para>

    <para>
      The syntactical rules of a programming language are usually
      expressed in a context-free grammar. This grammar (or syntax
      definition) of a programming language plays a central role in
      Stratego/XT. Most of the XT tools work on a grammar in one way
      or another. The grammar is a rich source of information. For
      example, it can be used to generate a parser, pretty-printer,
      disambiguator, tree grammar, format-checker, and
      documentation. This central role of a grammar is the most
      crucial aspect of XT, which is illustrated in <xref
      linkend="Fig-Architecture"/>: all the components of a
      transformation system are directly or indirectly based on the
      grammar of a programming language.
    </para>

    <para>
      What makes this all possible is the way syntax is defined in
      Stratego/XT. Stratego/XT uses the SDF language for syntax
      definition, which is a very high-level and declarative language
      for this purpose. SDF does not require the programmer to
      <emphasis>encode</emphasis> all kinds of properties of a
      programming language (such as associativity and priorities) in a
      grammar. Instead, SDF has declarative, concise, ways of defining
      these properties in such a way that they can actually be
      <emphasis>understood</emphasis> by tools that take the grammar
      as an input. And, of course, creating a grammar in such language
      is much more fun!
    </para>

    <figure xml:id="Fig-Architecture">
      <title>
	Syntax definitions play a central role in a transformation
	system.
      </title>
      <pngobject fileref="contracts.png" align="center"/>
    </figure>

    <para>
      As mentioned before, the XT tools exchange a structured
      representation of a program: an abstract syntax tree. The
      structure of this abstract syntax tree is called the
      <emphasis>abstract syntax</emphasis>, as opposed to the ordinary
      textual syntax, which is called the <emphasis>concrete
      syntax</emphasis>. In XT, the abstract syntax is directly
      related to the syntax definition and can be generated from
      it. The result is a <emphasis>tree grammar</emphasis> that
      defines the format of the trees that are exchanged between the
      transformation tools. From the world of XML, you are probably
      already familiar with tree grammars: DTD, W3C XML Schema and
      RELAX NG are tree grammars in disguise.
    </para>
  </section>

  <section>
    <title>Being on Good Terms with Trees</title>

    <informalfigure pgwide="0">
      <pngobject fileref="simple-expr-tree.png" align="right"/>
    </informalfigure>

    <para>
      Until now, we have been a bit vague about the format in which
      abstract syntax trees are actually exchanged between
      transformation tools. What is this structured program
      representation?
    </para>

    <para>
      We can easily imagine an abstract syntax tree as a graphical
      structure. For example, the tree at the right is a simple
      abstract syntax tree for the expression <code>a + n *
      1</code>. This representation corresponds closely to the
      representation of trees in computer memory. However, drawing
      pictures is not a very effective way of specifying tree
      transformations. We need a concise, textual, way to express an
      abstract syntax tree. Fortunately, there is a one-to-one
      correspondence between trees and so-called first-order prefix
      terms (terms, for short). A term is a constructor, i.e., an
      identifier, applied to zero or more terms. Strings and integer
      constants are terms as well. Thus, the following term
      corresponds to the abstract syntax tree that we have just drawn.
    </para>

    <screen>Times(Plus(Var("a"), Var("n")), Int("1"))</screen>

    <para>
      In Stratego/XT, programs are exchanged between transformation
      tools as terms. The exact format we use for terms, is the
      Annotated Term Format, or <emphasis>ATerms</emphasis> for
      short. We will discuss this format in more detail later, but
      some of its features are interesting to note here.
    </para>

    <!-- TODO: where? -->

    <para>
      First, ATerms are not only used to exchange programs between
      tools. ATerms are also used in the Stratego language itself for
      the representation of programs. In other words, ATerms are used
      for the <emphasis>external</emphasis> representation as well as
      the <emphasis>internal representation</emphasis> of programs in
      Stratego/XT. This is very convenient, since we don't have to
      bind the ATerms to Stratego specific data-structures. Usually,
      if such a data-binding is necessary, then there is always a
      mismatch here and there.
    </para>

    <para>
      Second, an important feature of the implementation is that terms
      are represented using <emphasis>maximal sharing</emphasis>. This
      means that any term in use in a program is represented only
      once. In other words, two occurrences of the same term will be
      represented by pointers to the same location. This greatly
      reduces the amount of memory needed for representing programs.
    </para>
  </section>

<!--
  <para>
    The ATerm Format is an external representation for terms that can
    be used to exchange structured data between programs.  In order to
    use a term, a program needs to parse ATerms and transform them
    into some internal representation. To export a term after
    processing it, a program should transform the internal
    representation into the standard format.  There are libraries
    supporting these operation for a number of languages, including C,
    Java, and Haskell.

  </para>

  <para>
       
    The implementation of the Stratego transformation language is
    based on the C implementation of the library. The library provides
    term input and output, and an API for constructing and inspecting
    terms. Garbage collection is based on B\"ohms conservative garbage
    collection algorithm.

  </para>

  <para>
        
    An important feature of the implementation is that terms are
    represented using maximal sharing. This means that any term in use
    in a program is represented only once. In other words, two
    occurrences of the same term will be represented by pointers to
    the same location. <xref linkend="Fig-Sharing"/> illustrates the
    difference between a pure tree representation and a tree, or more
    accurately, a <emphasis>directed acyclic graph</emphasis>, with
    maximal sharing. That is, any sub-term is represented exactly once
    in memory, with each occurrence pointing to the same memory
    location. This representation entails that term equality is a
    constant operation, since it consists of comparing pointers. It
    should be noted that annotations create different terms, that is,
    two terms, one with and the other without annotations that are
    otherwise, modulo annotations, the same, are not equal.

  </para>

  <figure xml:id="Fig-Sharing">
    <title>
      Tree and dag for the string <code>(a + b) * c + (a + b)</code>
    </title>
    <nexttoeachother>
      <entry>
        <pngobject fileref="xmpl/sharing-acub.png" align="center"/>
      </entry>
      <entry>
        <pngobject fileref="xmpl/sharing-scub.png" align="center"/>
      </entry>
    </nexttoeachother>
  </figure>

  <para>

    Maximal sharing can make a big difference [BJKO00] in the amount
    of memory needed for representing programs.  When exporting a term
    using the textual exchange format, this compression is
    lost. Therefore, the ATerm Library also provides a binary exchange
    format that preserves maximal sharing.

  </para>
  <para>
    See <xref linkend="ref-aterms"/> for more information on ATerms.
  </para>
 </section>
-->
</chapter>

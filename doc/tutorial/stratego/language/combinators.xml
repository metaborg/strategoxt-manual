<chapter xml:id="stratego-strategy-combinators"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Strategy Combinators</title>

<para>

  We have seen the use of strategies to combine rules into complex
  transformations.

  Rather than providing a fixed set of high-level strategy operators
  such as <code>bottomup</code>, <code>topdown</code>, and
  <code>innermost</code>, Stratego provides a small set of basic
  combinators, that can be used to create a wide variety of
  strategies.

  In <xref linkend="stratego-strategy-combinators"/> until <xref
  linkend="stratego-type-unifying-strategies"/> we will introduce these
  combinators.

  In this chapter we start with a set of combinators for sequential
  composition and choice of strategies.

</para>

<section xml:id="identity">
  <title>Identity and Failure</title>

<para>

  The most basic operations in Stratego are <code>id</code> and
  <code>fail</code>. 

  The identity strategy <code>id</code> always succeeds and behaves as
  the identity function on terms.

  The failure strategy <code>fail</code> always fails.

  The operations have no side effects.

<screen>
<prompt>stratego></prompt> !Foo(Bar())
Foo(Bar)
<prompt>stratego></prompt> id
Foo(Bar)
<prompt>stratego></prompt> fail
command failed
</screen>

</para>

</section>

<section xml:id="seq">
   <title>Sequential composition</title>
    
<para>
      
  The sequential composition <code>s1 ; s2</code> of the strategies
  <code>s1</code> and <code>s2</code> first applies the strategy
  <code>s1</code> to the subject term and then <code>s2</code> to the
  result of that first application. The strategy fails if either
  <code>s1</code> or <code>s2</code> fails.
    
</para>

<formalpara>
  <title>Properties</title>

<para>

  Sequential composition is associative.  Identity is a left and right
  unit for sequential composition; since <code>id</code> always
  succeeds and leaves the term alone, it has no additional effect to
  the strategy that it is composed with. Failure is a left zero for
  sequential composition; since <code>fail</code> always fails the
  next strategy will never be reached.

<screen>
(s1; s2) ; s3 = s1; (s2; s3)

id; s = s

s; id = s

fail; s = fail
</screen>

  However, not for all strategies <code>s</code> we have that failure
  is a right zero for sequential composition:

<screen>
s ; fail = fail   (is not a law)
</screen>

  Although the composition <code>s; fail</code> will always fail, the
  execution of <code>s</code> may have side effects that are not
  performed by <code>fail</code>. For example, consider printing a
  term in <code>s</code>.

</para>

</formalpara>

<formalpara>
  <title>Examples</title>

<para>
      
  As an example of the use of sequential composition consider the
  following rewrite rules.

<screen>
<prompt>stratego></prompt> A : P(Z(),x) -> x
<prompt>stratego></prompt> B : P(S(x),y) -> P(x,S(y))
</screen>

  The following session shows the effect of first applying
  <code>B</code> and then <code>A</code>:

<screen>
<prompt>stratego></prompt> !P(S(Z()), Z())
P(S(Z),Z)
<prompt>stratego></prompt> B
P(Z,S(Z))
<prompt>stratego></prompt> A
S(Z)
</screen>

  Using the sequential composition of the two rules, this effect can
  be achieved `in one step':

<screen>
<prompt>stratego></prompt> !P(S(Z()),Z())
P(S(Z),Z)
<prompt>stratego></prompt> B; A
S(Z)
</screen>

   The following session shows that the application of a composition
   fails if the second strategy in the composition fails to apply to
   the result of the first:

<screen>
<prompt>stratego></prompt> !P(S(Z()),Z())
P(S(Z),Z)
<prompt>stratego></prompt> B; B
command failed
</screen>

</para> 

</formalpara>

</section>

<section xml:id="choice">
    <title>Choice</title>

<para>

  Choosing between rules to apply is achieved using one of several
  <emphasis>choice</emphasis> combinators, all of which are based on
  the guarded choice combinator. The common approach is that failure
  to apply one strategy leads to backtracking to an alternative
  strategy.

</para>

<section xml:id="stratego-left-choice">
    <title>Deterministic Choice (Left Choice)</title>
  
<para>
      
  The left choice or deterministic choice <code>s1 &lt;+ s2</code>
  tries to apply <code>s1</code> and <code>s2</code> in that
  order. That is, it first tries to apply <code>s1</code>, and if that
  succeeds the choice succeeds. However, if the application of
  <code>s1</code> fails, <code>s2</code> is applied to <emphasis>the
  original term</emphasis>.
    
</para>

<formalpara>
  <title>Properties</title>

<para>

  Left choice is associative. Identity is a left zero for left choice;
  since <code>id</code> always succeeds, the alternative strategy will
  never be tried. Failure is a left and right unit for left choice;
  since <code>fail</code> always fails, the choice will always
  backtrack to the alternative strategy, and use of <code>fail</code>
  as alternative strategy is pointless.

<screen>
(s1 &lt;+ s2) &lt;+ s3 = s1 &lt;+ (s2 &lt;+ s3)

id &lt;+ s  = id

fail &lt;+ s = s

s &lt;+ fail = s
</screen>

  However, identity is not a right zero for left choice. That is, 
  not for all strategies <code>s</code> we have that

<screen>
s &lt;+ id =  s    (is not a law)
</screen>

  The expression <code>s &lt;+ id</code> always succeeds, even
  (especially) in the case that <code>s</code> fails, in which case
  the right-hand side of the equation fails of course.

</para>

</formalpara>

<formalpara>
  <title>Local Backtracking</title>

<para>

  The left choice combinator is a <emphasis>local
  backtracking</emphasis> combinator.  That is, the choice is
  committed once the left-hand side strategy has succeeded, even if
  the continuation strategy fails. This is expressed by the fact that
  the property

<screen>
(s1 &lt;+ s2); s3 = (s1; s3) &lt;+ (s2; s3)    (is not a law)
</screen>

  does <emphasis>not</emphasis> hold for all <code>s1</code>,
  <code>s2</code>, and <code>s3</code>.

  The difference is illustrated by the following applications:

<screen>
<prompt>stratego></prompt> !P(S(Z()),Z())
P(S(Z),Z)
<prompt>stratego></prompt> (B &lt;+ id); B
command failed

<prompt>stratego></prompt> !P(S(Z()),Z())
P(S(Z),Z)
<prompt>stratego></prompt> (B &lt;+ id)
P(Z,S(Z))
<prompt>stratego></prompt> B
command failed

<prompt>stratego></prompt> (B; B) &lt;+ (id; B)
P(Z,S(Z))
</screen>

  In the application of <code>(B &lt;+ id); B</code>, the first
  application of <code>B</code> succeeds after which the choice is
  committed. The subsequent application of <code>B</code> then fails.

  This equivalent to first applying <code>(B &lt;+ id)</code> and then
  applying <code>B</code> to the result.

  The application of <code>(B; B) &lt;+ (id; B)</code>, however, is
  successful; the application of <code>B; B</code> fails, after which
  the choice backtracks to <code>id; B</code>, which succeeds.

</para>

</formalpara>

<formalpara>
  <title>Choosing between Transformations</title>

<para>

  The typical use of left choice is to create a composite strategy
  trying one from several possible transformations. If the strategies
  that are composed are mutually exclusive, that is, don't succeed for
  the same terms, their sum is a transformation that
  (deterministically) covers a larger set of terms. 

  For example, consider the following two rewrite rules:
      
<screen>
<prompt>stratego></prompt> PlusAssoc : Plus(Plus(e1, e2), e3) -> Plus(e1, Plus(e2, e3))
<prompt>stratego></prompt> PlusZero  : Plus(Int("0"),e) -> e
</screen>

  These rules are mutually exclusive, since there is no term that
  matches the left-hand sides of both rules. Combining the rules with
  left choice into <code>PlusAssoc &lt;+ PlusZero</code> creates a
  strategy that transforms terms matching both rules as illustrated by
  the following applications:

<screen>
<prompt>stratego></prompt> !Plus(Int("0"),Int("3"))
Plus(Int("0"),Int("3"))

<prompt>stratego></prompt> PlusAssoc
command failed
<prompt>stratego></prompt> PlusAssoc &lt;+ PlusZero
Int("3")

<prompt>stratego></prompt> !Plus(Plus(Var("x"),Int("42")),Int("3"))
Plus(Plus(Var("x"),Int("42")),Int("3"))

<prompt>stratego></prompt> PlusZero
command failed
<prompt>stratego></prompt> PlusAssoc &lt;+ PlusZero
Plus(Var("x"),Plus(Int("42"),Int("3")))
</screen>

</para>

</formalpara>

<formalpara>
  <title>Ordering Overlapping Rules</title>

<para>

  When two rules or strategies are mutually exlusive the order of
  applying them does not matter. 

  In cases where strategies are overlapping, that is, succeed for the
  same terms, the order becomes crucial to determining the semantics
  of the composition.

  For example, consider the following rewrite rules reducing
  applications of <code>Mem</code>:

<screen>
<prompt>stratego></prompt> Mem1 : Mem(x,[]) -> False()
<prompt>stratego></prompt> Mem2 : Mem(x,[x|xs]) -> True()
<prompt>stratego></prompt> Mem3 : Mem(x,[y|ys]) -> Mem(x,ys)
</screen>

  Rules <code>Mem2</code> and <code>Mem3</code> have overlapping
  left-hand sides.  Rule <code>Mem2</code> only applies if the first
  argument is equal to the head element of the list in the second
  argument. Rule <code>Mem3</code> applies always if the list in the
  second argument is non-empty.

<screen>
<prompt>stratego></prompt> !Mem(1, [1,2,3])
Mem(1, [1,2,3])
<prompt>stratego></prompt> Mem2
True
<prompt>stratego></prompt> !Mem(1, [1,2,3])
Mem(1,[1,2,3])
<prompt>stratego></prompt> Mem3
Mem(1,[2,3])
</screen>

  In such situations, depending on the order of the rules, differents
  results are produced. (The rules form a non-confluent rewriting
  system.)

  By ordering the rules as <code>Mem2 &lt;+ Mem3</code>, rule
  <code>Mem2</code> is tried before <code>Mem3</code>, and we have a
  deterministic transformation strategy.

</para>

</formalpara>

<formalpara>
  <title>Try</title>

<para>
      
  A useful application of <code>&lt;+</code> in combination with
  <code>id</code> is the reflexive closure of a strategy
  <code>s</code>:
    
<screen>
try(s) = s &lt;+ id
</screen>

  The user-defined strategy combinator <code>try</code> tries to apply
  its argument strategy <code>s</code>, but if that fails, just
  succeeds using <code>id</code>.

</para>

</formalpara>
    
</section>


<section xml:id="stratego-guarded-choice">
  <title>Guarded Choice</title>

<para>

  Sometimes it is not desirable to backtrack to the alternative
  specified in a choice. Rather, after passing a
  <emphasis>guard</emphasis>, the choice should be committed. This can
  be expressed using the <emphasis>guarded left choice</emphasis>
  operator <code>s1 &lt; s2 + s3</code>.

  If <code>s1</code> succeeds <code>s2</code> is applied, else
  <code>s3</code> is applied. If <code>s2</code> fails, the complete
  expression fails; no backtracking to <code>s3</code> takes place.

</para>

<formalpara>
  <title>Properties</title>

<para>

  This combinator is a generalization of the left choice combinator
  <code>&lt;+</code>. 

<screen>
s1 &lt;+ s2 = s1 &lt; id + s2
</screen>

  The following laws make clear that the `branches' of the choice are
  selected by the success or failure of the guard:

<screen>
id &lt; s2 + s3  = s2

fail &lt; s2 + s3 = s3
</screen>

  If the right branch always fails, the construct reduces to the
  sequential composition of the guard and the left branch.

<screen>
s1 &lt; s2 + fail = s1; s2
</screen>

  Guarded choice is not associative:

<screen>
(s1 &lt; s2 + s3) &lt; s4 + s5 = s1 &lt; s2 + (s3 &lt; s4 + s5)    (not a law)
</screen>

   To see why consider the possible traces of these expressions. For example,
   when <code>s1</code> and <code>s2</code> succeed subsequently, the left-hand
   side expression calls <code>s4</code>, while the right-hand side expression does
   not.

</para>

</formalpara>

<para>

   However, sequential composition distributes over guarded choice
   from left <emphasis>and</emphasis> right:

<screen>
(s1 &lt; s2 + s3); s4 = s1 &lt; (s2; s4) + (s3; s4)

s0; (s1 &lt; s2 + s3) = (s0; s1) &lt; s2 + s3
</screen>

</para>


<formalpara>
    <title>Examples</title>

<para>

  The guarded left choice operator is most useful for the
  implementation of higher-level control-flow strategies.

  For example, the <emphasis>negation</emphasis> <code>not(s)</code>
  of a strategy <code>s</code>, succeeds if <code>s</code> fails, and
  fails when it succeeds:

<screen>
not(s) = s &lt; fail + id
</screen>

  Since failure discards the effect of a (succesful) transformation,
  this has the effect of testing whether <code>s</code> succeeds. So
  we have the following laws for <code>not</code>:

<screen>
not(id) = fail
not(fail) = id
</screen>

  However, side effects performed by <code>s</code> are not undone, of
  course.  Therefore, the following equation does
  <emphasis>not</emphasis> hold:

<screen>
not(not(s)) = s   (not a law)
</screen>

</para>

</formalpara>

<para>

  Another example of the use of guarded choice is the
  <code>restore-always</code> combinator:

<screen>
restore-always(s, r) = s &lt; r + (r; fail)
</screen>

  It applies a `restore' strategy <code>r</code> after applying a
  strategy <code>s</code>, even if <code>s</code> fails, and preserves
  the success/failure behaviour of <code>s</code>. Since
  <code>fail</code> discards the transformation effect of
  <code>r</code>, this is mostly useful for ensuring that some
  side-effecting operation is done (or undone) after applying
  <code>s</code>.

</para>

<para>

  For other applications of guarded choice, Stratego provides
  syntactic sugar.

</para>

</section>

<section xml:id="stratego-if-then-else">
  <title>If Then Else</title>

<para>
      
  The guarded choice combinator is similar to the traditional
  if-then-else construct of programming languages. The difference is
  that the `then' branch applies to the result of the application of
  the condition.

  Stratego's <code>if s1 then s2 else s3 end</code> construct is more
  like the traditional construct since both branches apply to the
  original term. The condition strategy is only used to test if it
  succeeds or fails, but it's transformation effect is
  undone. However, the condition strategy <code>s1</code> is still
  applied to the current term.

  The <code>if s1 then s2 end</code> strategy is similar; if the
  condition fails, the strategy succeeds.

</para>

<formalpara>
   <title>Properties</title>

<para>

  The <code>if-then-else-end</code> strategy is just syntactic sugar
  for a combination of guarded choice and the <code>where</code>
  combinator:
   
<screen>
if s1 then s2 else s3 end  =  where(s1) &lt; s2 + s3
</screen>

  The strategy <code>where(s)</code> succeeds if <code>s</code>
  succeeds, but returns the original subject term. The implementation
  of the <code>where</code> combinator will be discussed in <xref
  linkend="stratego-creating-and-analyzing-terms"/>. 

  The following laws show that the branches are selected by success or
  failure of the condition:

<screen>
if id   then s2 else s3 end  =  s2

if fail then s2 else s3 end  =  s3
</screen>

</para>

</formalpara>

<para>

  The <code>if-then-end</code> strategy is an abbreviation for the
  <code>if-then-else-end</code> with the identity strategy as right
  branch:

<screen>
if s1 then s2 end  =  where(s1) &lt; s2 + id
</screen>

</para>

<formalpara>
   <title>Examples</title>

<para>

  The <emphasis>inclusive or</emphasis> <code>or(s1, s2)</code>
  succeeds if one of the strategies <code>s1</code> or <code>s2</code>
  succeeds, but guarantees that both are applied, in the order
  <code>s1</code> first, then <code>s2</code>:

<screen>
or(s1, s2) = 
  if s1 then try(where(s2)) else where(s2) end
</screen>

  This ensures that any side effects are always performed, in contrast
  to <code>s1 &lt;+ s2</code>, where <code>s2</code> is only executed
  if <code>s1</code> fails. (Thus, left choice implements a short
  circuit Boolean or.)

</para>

</formalpara>

<para>

  Similarly, the following <code>and(s1, s2)</code> combinator is the
  non-short circuit version of Boolean conjunction:

<screen>
and(s1, s2) = 
  if s1 then where(s2) else where(s2); fail end
</screen>

</para>

</section>

<section xml:id="stratego-switch">
  <title>Switch</title>

<para>

  The <code>switch</code> construct is an n-ary branching construct
  similar to its counter parts in other programming languages. It is
  defined in terms of guarded choice.

  The <code>switch</code> construct has the following form:

<screen>
  switch s0
    case s1 : s1'
    case s2 : s2'
    ...
    otherwise : sdef
  end
</screen>

  The switch first applies the <code>s0</code> strategy to the current
  term <code>t</code> resulting in a term <code>t'</code>. Then it
  tries the cases in turn applying each <code>si</code> to
  <code>t'</code>. As soon as this succeeds the corresponding case is
  selected and <code>si'</code> is applied to the <code>t</code>, the
  term to which the switch was applied. If none of the cases applies,
  the default strategy <code>sdef</code> from the
  <code>otherwise</code> is applied.

</para>

<formalpara>
  <title>Properties</title>

<para>

  The switch construct is syntactic sugar for a nested if-then-else:

<screen>
  {x : where(s0 => x);
       if &lt;s1> x 
       then s1' 
       else if &lt;s2> x 
            then s2' 
            else if ...
                 then ...
                 else sdef
                 end
            end 
       end}
</screen>

  This translation uses a couple of Stratego constructs that we
  haven't discussed so far.

</para>

</formalpara>

<formalpara>
  <title>Examples</title>

<para>

  TODO

</para>

</formalpara>

</section>

<section>
  <title>Non-deterministic Choice</title>

<para>
      
  The deterministic left choice operator prescribes that the left
  alternative should be tried before the right alternative, and that
  the latter is only used if the first fails. There are applications
  where it is not necessary to define the order of the
  alternatives. In those cases non-deterministic choice can be used.
    
</para>

<para>
      
  The non-deterministic choice operator <code>s1 + s2</code> chooses
  one of the two strategies <code>s1</code> or <code>s2</code> to
  apply, such that the one it chooses succeeds. If both strategies
  fail, then the choice fails as well.
    
  Operationally the choice operator first tries one strategy, and, if
  that fails, tries the other. The order in which this is done is
  undefined, i.e., arbitrarily chosen by the compiler.

</para>

<para>
      
  The <code>+</code> combinator is used to model modular composition
  of rewrite rules and strategies with the same name. Multiple
  definitions with the same name, are merged into a single definition
  with that name, where the bodies are composed with
  <code>+</code>. The following transformation illustrates this:

<screen>
  f = s1  f = s2      ==>    f = s1 + s2
</screen>

  This transformation is somewhat simplified; the complete
  transformation needs to take care of local variables and parameters.

</para>

<para>

  While the <code>+</code> combinator is used internally by the
  compiler for this purpose, programmers are advised
  <emphasis>not</emphasis> to use this combinator, but rather use the
  left choice combinator <code>&lt;+</code> to avoid surprises.

</para>

</section>

</section> 

<section>
  <title>Recursion</title>

<para>

   Repeated application of a strategy can be achieved with recursion.
   There are two styles for doing this; with a recursive definition or
   using the fixpoint operator <code>rec</code>. A recursive
   definition is a normal strategy definition with a recursive call in
   its body. 

<screen>
f(s) = ... f(s) ...
</screen>

   Another way to define recursion is using the fixpoint operator
   <code>rec x(s)</code>, which recurses on applications of
   <code>x</code> within <code>s</code>. For example, the definition
     
<screen>
f(s) = rec x(... x ...)
</screen>

   is equivalent to the one above.

   The advantage of the <code>rec</code> operator is that it allows
   the definition of an unnamed strategy expression to be recursive.
   For example, in the definition

<screen>
g(s) = foo; rec x(... x ...); bar
</screen>

   the strategy between <code>foo</code> and <code>bar</code> is a
   recursive strategy that does <emphasis>not</emphasis> recurse to
   <code>g(s)</code>.

</para>
    
<para>
    
   Originally, the <code>rec</code> operator was the only way to
   define recursive strategies. It is still in the language in the
   first place because it is widely used in many existing programs,
   and in the second place because it can be a concise expression of a
   recursive strategy, since call parameters are not included in the
   call. Furthermore, all free variables remain in scope.

</para>

<formalpara>
  <title>Examples</title>

<para>

   The <code>repeat</code> strategy applies a transformation
   <code>s</code> until it fails. It is defined as a recursive
   definition using <code>try</code> as follows:

<screen>
try(s)    = s &lt;+ id
repeat(s) = try(s; repeat(s))
</screen>

   An equivalent definition using <code>rec</code> is:

<screen>
repeat(s) = rec x(try(s; x))
</screen>

   The following Stratego Shell session illustrates how it works. We
   first define the strategies:

<screen>
<prompt>stratego></prompt> try(s) = s &lt;+ id
<prompt>stratego></prompt> repeat(s) = try(s; repeat(s))
<prompt>stratego></prompt> A : P(Z(),x) -> x
<prompt>stratego></prompt> B : P(S(x),y) -> P(x,S(y))
</screen>

  Then we observe that the repeated application of the individual
  rules <code>A</code> and <code>B</code> reduces terms:

<screen>
<prompt>stratego></prompt> !P(S(Z()),Z())
P(S(Z),Z)
<prompt>stratego></prompt> B
P(Z,S(Z))
<prompt>stratego></prompt> A
S(Z)
</screen>

  We can automate this using the <code>repeat</code> strategy, which
  will repeat the rules as often as possible:

<screen>
<prompt>stratego></prompt> !P(S(Z()),Z())
P(S(Z),Z)
<prompt>stratego></prompt> repeat(A &lt;+ B)
S(Z)

<prompt>stratego></prompt> !P(S(S(S(Z()))),Z())
P(S(S(S(Z))),Z)
<prompt>stratego></prompt> repeat(A &lt;+ B)
S(S(S(Z)))
</screen>

  To illustrate the intermediate steps of the transformation we can
  use <code>debug</code> from the Stratego Library.

<screen>
<prompt>stratego></prompt> import libstratego-lib
<prompt>stratego></prompt> !P(S(S(S(Z()))),Z())
P(S(S(S(Z))),Z)
<prompt>stratego></prompt> repeat(debug; (A &lt;+ B))
P(S(S(S(Z))),Z)
P(S(S(Z)),S(Z))
P(S(Z),S(S(Z)))
P(Z,S(S(S(Z))))
S(S(S(Z)))
S(S(S(Z)))
</screen>

</para>

</formalpara>

<formalpara>
  <title>A Library of Iteration Strategies</title>

<para>

    Using sequential composition, choice, and recursion a large
    variety of iteration strategies can be defined. The following
    definitions are part of the Stratego Library (in module
    <code>strategy/iteration</code>).

<screen>
repeat(s) = 
  rec x(try(s; x))

repeat(s, c) =
  (s; repeat(s, c)) &lt;+ c

repeat1(s, c) = 
  s; (repeat1(s, c) &lt;+ c)

repeat1(s) = 
  repeat1(s, id)

repeat-until(s, c) = 
  s; if c then id else repeat-until(s, c) end

while(c, s) = 
  if c then s; while(c, s) end

do-while(s, c) =
  s; if c then do-while(s, c) end
</screen>

  The following equations describe some relations between these
  strategies:

<screen>
  do-while(s, c) = repeat-until(s, not(c))

  do-while(s, c) = s; while(c, s)
</screen>

</para>

</formalpara>

</section>

<section>
  <title>Summary</title>

<para>

  We have seen that rules and strategies can be combined into more
  complex strategies by means of strategy combinators. 
 
  Cumulative effects are obtained by sequential composition of
  strategies using the <code>s1 ; s2</code> combinator.

  Choice combinators allow a strategy to decide between alternative
  transformations.  While Stratego provides a variety of choice
  combinators, they are all based on the guarded choice combinator
  <code>s1 &lt; s2 + s3</code>.

  Repetition of transformations is achieved using recursion, which can
  be achieved through recursive definitions or the <code>rec</code>
  combinator.

</para>

<para>

  Next up: <xref linkend="stratego-creating-and-analyzing-terms"/>
  shows the stuff that rewrite rules are made of.

</para>

</section>


</chapter>

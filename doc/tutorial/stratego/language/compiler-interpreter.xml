<section
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Running Stratego Programs (*)</title>

 <para>

   Now let's see how we can actually transform terms using Stratego
   programs. In the rest of this chapter we will first look at the
   structure of Stratego programs, and how to compile and run them.
   In the next chapter we will then see how define transformations.

 </para>

<section>
  <title>The Identity Transformation</title>

<para>

   The simplest program you can write in Stratego is the following:

<screen>
module identity
imports list-cons
strategies
  main = id
</screen>

       main definition

       identity strategy

       compiling with the Stratego compiler <code>strc</code>

<screen>
$ strc -i identity.str
</screen>

<screen>
$ ./identity foo bar
["./identity","foo","bar"]
</screen>

       command-line arguments turned into a list of strings

</para>
</section>

<section>
  <title>The Identity Transformation with I/O</title>

<para>

<screen>
module identity-io
imports liblib
strategies
  main = io-wrap(id)
</screen>

       seperate compilation

       linking with stratego-lib

<screen>
$ strc -i identity-io.str -la stratego-lib
</screen>

       now we
  
<screen>
$ echo "Foo(Bar())" | ./identity-io
Foo(Bar)
</screen>

       so the <code>identity-io</code> program just returns its input, big deal.

       In fact, the <code>identity-io</code> does not just accept any input.

       If we try to apply the program to a text file that is not an
       ATerm, it protests and fails:

<screen>
$ echo "+ foo bar" | ./identity-io
readFromTextFile: parse error at line 0, col 0
not a valid term
./identity: rewriting failed
</screen>

       So we have written a program to check if a file represents an ATerm.

</para>
</section>

<section>
  <title>Structure of a Stratego Program</title>
  <para>

       file extensions

       libraries?

       modules, imports

    </para>
</section>

<section>
    <title>Compiling Programs</title>
    <para>
       main definition
       seperate compilation
    </para>
</section>

<section>
    <title>Running Programs Interactively</title>
    <para>
       stratego-shell: just for trying out language
    </para>

    <para>
      Strategies are the statements and functions of the Stratego
      language. A strategy transforms a term into a new term, or
      fails. The term to which a strategy is applied, is called the
      <emphasis>current term</emphasis>. In the Stratego Shell you can
      see the current term with <command>:show</command>.
    </para>

    <screen>
<prompt>stratego></prompt> :show
()
<prompt>stratego></prompt></screen>

    <para>
      So, the current term is the empty tuple if you have just started
      the Stratego Shell. At the prompt of the shell you can enter
      strategies. If the strategy succeeds, then the shell will show
      the transformed term, which is now the new current term.
    </para>

    <screen>
<replaceable>current term</replaceable>
<prompt>stratego></prompt> <replaceable>strategy expression</replaceable>
<replaceable>transformed current</replaceable>
<prompt>stratego></prompt></screen>

    <para>
      Strategies can also fail. In that case, the shell will print a
      message and leave the current term untouched:
    </para>

    <screen>
<replaceable>current term</replaceable>
<prompt>stratego></prompt> <replaceable>strategy expression</replaceable>
command failed
<prompt>stratego></prompt> :show
<replaceable>current term</replaceable></screen>
 </section>

</section>

<chapter 
  xml:id="rules-and-strategies"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Rules and Strategies (*)</title>

<para>

  In the <link linkend="stratego-rewriting-strategies">previous
  chapter</link> we saw that pure term rewriting is not adequate for
  term rewriting because of the lack of control over the application
  of rules.

  Attempts to encoding such control within the pure rewriting paradigm
  lead to functionalized control by means of extra rules and
  constructors at the expense of traversal overhead and at the loss of
  the separation of rules and strategies.

  By selecting the appropriate rules and strategy for a
  transformation, Stratego programmers can control the application of
  rules, while maintaining the separation of rules and strategies and
  keeping traversal overhead to a minimum.

</para>

<para>

  We saw that many transformation problems can be solved by
  alternative strategies such as a one-pass bottom-up or top-down
  traversal. Others can be solved by selecting the rules that are
  applied in an innermost normalization, rather than all the rules in
  a specification. However, no fixed set of such alternative
  strategies will be sufficient for dealing with all transformation
  problems.

  Rather than providing one or a few fixed collection of rewriting
  strategies, Stratego allows to <emphasis>compose</emphasis>
  strategies from basic building blocks with a few fundamental
  operators.

</para>

<para>

  While we have seen rules and strategies in the previous chapters, we
  have been vague about what kinds of things they are.

  In this chapter we define the basic notions of rules and strategies,
  and we will see how new strategies and strategy combinators can be
  defined.

  The next chapters will then introduce the basic combinators used for
  composition of strategies.

</para>

<section>
  <title>What is a Rule?</title>

<para>

  In <xref linkend="stratego-term-rewriting"/> rewrite rules were
  introduced as transformations that are applied throughout a term by
  the innermost strategy.

  In <xref linkend="stratego-rewriting-strategies"/> we saw that the
  application of rewrite rules can be controlled by other strategies
  as well.

</para>

<para>

  A <emphasis>named rewrite rule</emphasis> is a declaration of the form

<screen>
L : p1 -> p2
</screen>

  where <code>L</code> is the rule name, <code>p1</code> the left-hand
  side term pattern, and <code>p2</code> the right-hand side term
  pattern.

  A rule defines a transformation on terms. 

  A rule can be applied <emphasis>through its name</emphasis> to a term.

  It will transform the term if it matches with <code>p1</code>, and
  will replace the term with <code>p2</code> instantiated with the
  variables bound during the match to <code>p1</code>.

  The application <emphasis>fails</emphasis> if the term does not
  match <code>p1</code>.

</para>

<para>

  Let's look at an example. The <code>SwapArgs</code> rule swaps the
  subterms of the <code>Plus</code> constructor. Note that it is
  possible to introduce rules on the fly in the <link
  linkend="ref-stratego-shell">Stratego Shell</link>.

<screen>
<prompt>stratego></prompt> SwapArgs : Plus(e1,e2) -> Plus(e2,e1)
</screen>

  Now we create a new term, and apply the <code>SwapArgs</code> rule
  to it by calling its name at the prompt. (The build <code>!t</code>
  of a term replaces the current term by <code>t</code>, as will be
  explained in <xref
  linkend="stratego-creating-and-analyzing-terms"/>.)

<screen>
<prompt>stratego></prompt> !Plus(Var("a"),Int("3"))
Plus(Var("a"),Int("3"))

<prompt>stratego></prompt> SwapArgs 
Plus(Int("3"),Var("a"))
</screen>

  fails if applied to term to which it does not match

<screen>
<prompt>stratego></prompt> !Times(Int("4"),Var("x"))
Times(Int("4"),Var("x"))

<prompt>stratego></prompt> SwapArgs 
command failed
</screen>

  Furthermore, a rule is applied at the <emphasis>root</emphasis> of a
  term, not at one of its subterms. Thus the 
 
<screen>
<prompt>stratego></prompt> !Times(Plus(Var("a"),Int("3")),Var("x"))
Times(Plus(Var("a"),Int("3")),Var("x"))

<prompt>stratego></prompt> SwapArgs 
command failed

<prompt>stratego></prompt> !Plus(Var("a"),Plus(Var("x"),Int("42")))
Plus(Var("a"),Plus(Var("x"),Int("42")))

<prompt>stratego></prompt> SwapArgs 
Plus(Plus(Var("x"),Int("42")),Var("a"))
</screen>

  Finally, there may be multiple rules with the same name. This has
  the effect that all rules with that name will be tried in turn, in
  some undefined order. This means that it only makes sense to define
  rules with the same name if they are mutually exclusive, that is, do
  not have overlapping left-hand sides. For example, we can extend the
  definition of <code>SwapArgs</code> with a rule for the
  <code>Times</code> constructor.

<screen>
stratego> SwapArgs : Times(e1, e2) -> Times(e2, e1)   
</screen>

  Now the rule can be applied to both terms with 

</para>

<para>

  Later we will see that a rule is nothing more than a syntactical
  convention for a strategy definition.

</para>

</section>


<section>
  <title>What is a Strategy?</title>

<para>

  Strategies are the central notion in Stratego programs. High time we
  got to know what they are.

  A strategy expression defines a transformation, that is, a partial
  function from terms to terms. 

  A transformation is a function since it maps terms to terms.

  The function is partial since the application of a strategy may
  fail.

  Transformations are <emphasis>functions</emphasis>, and strategy
  expressions often combine transformations into more complex
  transformations. Therefore, they don't have to explicitly mention
  the term they are transforming, the so called `current term'.

</para>

<para>

  Lets look at some examples.

  A rule 

  rules are strategies

  combinations of rules

  innermost(E)

</para>

<para>

  Stratego allows programs to have side effects such as performing
  input/output operations.

</para>

<para>

  transformation on the `current' term

  current term is implicit in a strategy expression

</para>

<para>

  combinators for strategies

</para>

</section>




<section>
  <title>Strategy Definitions</title>

<para>

  a strategy definition names a strategy expression such that it can
  be invoked at several points in the program

  somewhat of a crossover between a function definition in functional
  programming languages, and a method definition in object-oriented
  programming languages

  the current term is implicit

</para>

<section>
  <title>Simple Strategy Definition and Call</title>

<para>
        
  Given a set of rules and primitives as basic transformations, more
  complex transformations can be composed using a set of strategy
  combinators. For example, if $s_1$ and $s_2$ are two strategy
  expressions, then $(s_1;s_2)$ is a strategy expression as well.
  These combinators are the subject of this and the next two
  chapters. In order to reuse common strategy compositions, they can
  be named and parameterized using strategy definitions. A strategy
  definition of the form

<screen>
<code>$f$($x_1$,...,$x_n$ | $y_1$,..., $y_m$) = $s$</code>
</screen>

  introduces a user-defined operator \verb|f| with $n$ strategy
  arguments and $m$ term arguments. Such a user-defined strategy
  operator can be called as <code>$f$($s_1,...,s_n$|$t_1,...,t_m$)</code>
  by providing it $n$ argument strategies and $m$ argument terms. The
  meaning of such a call is the body $s$ of the definition in which
  the actual arguments have been substituted for the formal arguments.

  Strategy arguments and term arguments can be left out of calls and
  definitions.  That is, a call <code>$f$(|)</code> without strategy and
  term arguments can be written as <code>$f$()</code>, or even just $f$.
  A call <code>$f$($s_1$,..., $s_n$|)</code> without term arguments can be
  written as <code>$f$($s_1$,..., $s_n$)</code> The same holds for
  definitions.

</para>

<para>

  Syntax: f = s 

  Name strategy expression s 

  Syntax: f 

  Invoke (call) named strategy f
  
</para>

<screen>
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> SwapArgs = {e1,e2 :(Plus(e1,e2) -> Plus(e2,e1))} 
<prompt>stratego></prompt> SwapArgs 
Plus(Int("3"),Var("a"))
</screen>

</section>

<section>
   <title>Parameterized Definitions</title>

<para>
	  
  Parameterized and Recursive Definitions

  Syntax: f (x1,...,xn|y1,...,ym) = s 

  Strategy definition parameterized with strategies (x1,...,xn) and terms (y1,...,ym)

  Note: definitions may be recursive
	
        
  The list of term arguments of a strategy combinator is optional and
  the \texttt{|} can be left out if no term arguments are
  present. Similarly, if the list of strategy arguments is also empty
  the parentheses may be omitted.

</para>

<screen>
foo(s) = innermost(s &lt;+ A)
</screen>

<para>

  overloading of definitions with different number of arguments

</para>

</section>

<section>
  <title>Local Definitions</title>

<para>

  Strategy definitions at top-level are visible everywhere.  Sometimes
  it is useful to define a <emphasis>local</emphasis> strategy
  operator.  This can be done using a let expression of the form
  <code>let $d*$ in $s$ end</code>, where $d*$ is a list of
  definitions.

<screen>
let foo = 
 in ... foo ...
end
</screen>

</para>

</section>

<section>
  <title>Calling Primitives</title>

<para>

  primitive definitions are used to call strategies implemented in
  another language

<screen>
print(|x) = SSL_print(|x)
</screen>

  The strategy combinators introduced in the next sections are
  impartial to the way atomic transformations are defined.  We could
  just as well use an implementation in a different language, rather
  than a rewrite rule, if that is useful.  Thus, <code>prim("$f$",
  $ss$ | $ts$)</code> represents a call to an <emphasis>external
  primitive function</emphasis> $f$ with strategy arguments $ss$ and
  term arguments $ts$.

  Note that the `current' term $t$ is not passed automatically as
  argument.

  This mechanism allows the incorporation of mundane tasks such as
  arithmetic, I/O, and other tasks not directly related to
  transformation, but necessary for the integration of transformations
  with the other parts of a transformation system. For example, the
  addition of two integer terms is defined via a call to a primitive
  <code>prim("SSL\_addi",x,y)</code>.

  primitive function should take ATerms as arguments

  not possible to use `unboxed' values

  requires writing wrapper function in C

</para>

</section>

<section>
  <title>External Definitions</title>

<para>

  external definitions are implemented in a separately compiled
  Stratego program

  compiling Stratego program as library

</para>

</section>

<section>
  <title>Extending Definitions</title>

<para>

  existing definitions can be extended

  multiple definitions are possible

  semantics: non-deterministic choice of bodies

</para>

</section>

</section>


<section>
  <title>Summary</title>

<para>

</para>

</section>



</chapter>

<chapter 
  xml:id="rules-and-strategies"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Rules and Strategies (*)</title>

<para>

  In the <link linkend="stratego-rewriting-strategies">previous
  chapter</link> we saw that pure term rewriting is not adequate for
  program transformation because of the lack of control over the
  application of rules.

  Attempts to encoding such control within the pure rewriting paradigm
  lead to functionalized control by means of extra rules and
  constructors at the expense of traversal overhead and at the loss of
  the separation of rules and strategies.

  By selecting the appropriate rules and strategy for a
  transformation, Stratego programmers can control the application of
  rules, while maintaining the separation of rules and strategies and
  keeping traversal overhead to a minimum.

</para>

<para>

  We saw that many transformation problems can be solved by
  alternative strategies such as a one-pass bottom-up or top-down
  traversals. Others can be solved by selecting the rules that are
  applied in an innermost normalization, rather than all the rules in
  a specification. However, no fixed set of such alternative
  strategies will be sufficient for dealing with all transformation
  problems.

  Rather than providing one or a few fixed collection of rewriting
  strategies, Stratego supports the <emphasis>composition</emphasis>
  of strategies from basic building blocks with a few fundamental
  operators.

</para>

<para>

  While we have seen rules and strategies in the previous chapters, we
  have been vague about what kinds of things they are.

  In this chapter we define the basic notions of rules and strategies,
  and we will see how new strategies and strategy combinators can be
  defined.

  The next chapters will then introduce the basic combinators used for
  composition of strategies.

</para>

<section>
  <title>What is a Rule?</title>

<para>


</para>

<para>

  A <emphasis>named rewrite rule</emphasis> is a declaration of the form

<screen>
L : p1 -> p2
</screen>

  where <code>L</code> is the rule name, <code>p1</code> the left-hand
  side term pattern, and <code>p2</code> the right-hand side term
  pattern.

  A rule defines a transformation on terms. 

  A rule can be applied <emphasis>through its name</emphasis> to a
  term.

  It will transform the term if it matches with <code>p1</code>, and
  will replace the term with <code>p2</code> instantiated with the
  variables bound during the match to <code>p1</code>.

  The application <emphasis>fails</emphasis> if the term does not
  match <code>p1</code>.

  Thus, a <emphasis>transformation</emphasis> is a <emphasis>partial
  function from terms to terms</emphasis>

</para>

<para>

  Let's look at an example. The <code>SwapArgs</code> rule swaps the
  subterms of the <code>Plus</code> constructor. Note that it is
  possible to introduce rules on the fly in the <link
  linkend="ref-stratego-shell">Stratego Shell</link>.

<screen>
<prompt>stratego></prompt> SwapArgs : Plus(e1,e2) -> Plus(e2,e1)
</screen>

  Now we create a new term, and apply the <code>SwapArgs</code> rule
  to it by calling its name at the prompt. (The build <code>!t</code>
  of a term replaces the current term by <code>t</code>, as will be
  explained in <xref
  linkend="stratego-creating-and-analyzing-terms"/>.)

<screen>
<prompt>stratego></prompt> !Plus(Var("a"),Int("3"))
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> SwapArgs 
Plus(Int("3"),Var("a"))
</screen>

  The application of <code>SwapArgs</code> fails when applied to a
  term to which the left-hand side does not match. For example, since
  the pattern <code>Plus(e1,e2)</code> does not match with a term
  constructed with <code>Times</code> the following application fails:

<screen>
<prompt>stratego></prompt> !Times(Int("4"),Var("x"))
Times(Int("4"),Var("x"))
<prompt>stratego></prompt> SwapArgs 
command failed
</screen>

  A rule is applied at the <emphasis>root</emphasis> of a term, not at
  one of its subterms. Thus, the following application fails even
  though the term <emphasis>contains</emphasis> a <code>Plus</code>
  subterm:
 
<screen>
<prompt>stratego></prompt> !Times(Plus(Var("a"),Int("3")),Var("x"))
Times(Plus(Var("a"),Int("3")),Var("x"))
<prompt>stratego></prompt> SwapArgs 
command failed
</screen>
  
  Likewise, the following application only transforms the outermost
  occurrence of <code>Plus</code>, not the inner occurrence:

<screen>
<prompt>stratego></prompt> !Plus(Var("a"),Plus(Var("x"),Int("42")))
Plus(Var("a"),Plus(Var("x"),Int("42")))
<prompt>stratego></prompt> SwapArgs 
Plus(Plus(Var("x"),Int("42")),Var("a"))
</screen>

  Finally, there may be multiple rules with the same name. This has
  the effect that all rules with that name will be tried in turn until
  one succeeds, or all fail. The rules are tried in some undefined
  order. This means that it only makes sense to define rules with the
  same name if they are mutually exclusive, that is, do not have
  overlapping left-hand sides. For example, we can extend the
  definition of <code>SwapArgs</code> with a rule for the
  <code>Times</code> constructor, as follows:

<screen>
<prompt>stratego></prompt> SwapArgs : Times(e1, e2) -> Times(e2, e1)   
</screen>

  Now the rule can be applied to terms with a <code>Plus</code>
  <emphasis>and</emphasis> a <code>Times</code> constructor, as
  illustrated by the following applications:

<screen>
<prompt>stratego></prompt> !Times(Int("4"),Var("x"))
Times(Int("4"),Var("x"))
<prompt>stratego></prompt> SwapArgs 
Times(Var("x"),Int("4"))

<prompt>stratego></prompt> !Plus(Var("a"),Int("3"))
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> SwapArgs 
Plus(Int("3"),Var("a"))
</screen>

</para>

<para>

  Later we will see that a rule is nothing more than a syntactical
  convention for a strategy definition.

</para>

</section>


<section>
  <title>What is a Strategy?</title>

<para>

  A rule defines a transformation, that is, a partial function from
  terms to terms.

  A <emphasis>strategy expression</emphasis> is a combination of one
  or more transformations into a new transformation.

  So, a strategy expression also defines a transformation, i.e., a
  partial function from terms to terms.

  Strategy <emphasis>operators</emphasis> are functions from
  transformations to transformations.

</para>

<para>

  In the <link linkend="stratego-rewriting-strategies">previous
  chapter</link> we saw some examples of strategy expressions.

  Lets examine these examples in the light of our new definition.

  First of all, <emphasis>rule names</emphasis> are basic strategy
  expressions. If we import module <code>prop-laws</code>, we have at
  our disposal all rules it defines as basic strategies:

<screen>
<prompt>stratego></prompt> import prop-laws
<prompt>stratego></prompt> !Impl(True(), Atom("p"))
Impl(True, Atom("p"))
<prompt>stratego></prompt> DefI
Or(Not(True),Atom("p"))
</screen>

  Next, given a collection of rules we can create more complex
  transformations by means of strategy operators. For example, the
  <code>innermost</code> strategy creates from a collection of rules a
  new transformation that exhaustively applies those rules.

<screen>
<prompt>stratego></prompt> !Eq(Atom("p"), Atom("q"))
Eq(Atom("p"),Atom("q"))

<prompt>stratego></prompt> innermost(DefI &lt;+ DefE &lt;+ DAOL &lt;+ DAOR &lt;+ DN &lt;+ DMA &lt;+ DMO)

Or(Or(And(Not(Atom("p")),Not(Atom("q"))),
      And(Not(Atom("p")),Atom("p"))),
   Or(And(Atom("q"),Not(Atom("q"))),
      And(Atom("q"),Atom("p"))))
</screen>

  (Exercise: add rules to this composition that remove tautologies or
  false propositions.)

  Here we see that the rules are first combined using the choice
  operator <code>&lt;+</code> into a composite transformation, which
  is the argument of the <code>innermost</code> strategy.

</para>

<para>

   The <code>innermost</code> strategy always succeeds (but may not
   terminate), but this is not the case for all strategies.

   For example <code>bottomup(DefI)</code> will not succeed, since it
   attempts to apply rule <code>DefI</code> to all subterms, which is
   clearly not possible.

   Thus, strategies extend the property of rules that they are
   <emphasis>partial</emphasis> functions from terms to terms.

</para>

<para>

  Observe that in the composition <code>innermost(...)</code>, the
  term to which the transformation is applied is never mentioned.

  The `current term', to which a transformation is applied is
  often implicit in the definition of a strategy.

  That is, there is no variable that is bound to the current term and
  then passed to an argument strategy.

  Thus, a strategy operator such as <code>innermost</code> is a
  function from transformations to transformations.

</para>

<para>

  While strategies are functions, they are not necessarily
  <emphasis>pure</emphasis> functions.  Strategies in Stratego may
  have side effects such as performing input/output operations.

  This is of course necessary in the implementation of basic tool
  interaction such as provided by <code>io-wrap</code>, but is also
  useful for debugging. For example, the <code>debug</code> strategy
  prints the current term, but does not transform it. We can use it to
  visualize the way that <code>innermost</code> transforms a term.

<screen>
<prompt>stratego></prompt> !Not(Impl(Atom("p"), Atom("q")))
Not(Impl(Atom("p"),Atom("q")))
<prompt>stratego></prompt> innermost(debug(!"in:  "); (DefI &lt;+ DefE &lt;+ DAOL &lt;+ DAOR &lt;+ DN &lt;+ DMA &lt;+ DMO); debug(!"out: "))
in:  p
in:  Atom("p")
in:  q
in:  Atom("q")
in:  Impl(Atom("p"),Atom("q"))
out: Or(Not(Atom("p")),Atom("q"))
in:  p
in:  Atom("p")
in:  Not(Atom("p"))
in:  q
in:  Atom("q")
in:  Or(Not(Atom("p")),Atom("q"))
in:  Not(Or(Not(Atom("p")),Atom("q")))
out: And(Not(Not(Atom("p"))),Not(Atom("q")))
in:  p
in:  Atom("p")
in:  Not(Atom("p"))
in:  Not(Not(Atom("p")))
out: Atom("p")
in:  p
in:  Atom("p")
in:  q
in:  Atom("q")
in:  Not(Atom("q"))
in:  And(Atom("p"),Not(Atom("q")))
And(Atom("p"),Not(Atom("q")))
</screen>

  This session nicely shows how innermost traverses the term it
  transforms.  The <code>in:</code> lines show terms to which it
  attempts to apply a rule, the <code>out:</code> lines indicate when
  this was successful and what the result of applying the rule was.
  Thus, <code>innermost</code> performs a post-order traversal
  applying rules after transforming the subterms of a term.

  (Note that when applying <code>debug</code> to a string constant,
  the quotes are not printed.)

</para>

</section>


<section>
  <title>Strategy Definitions</title>

<para>

  Stratego programs are about defining transformations in the form of
  rules and strategy expressions that combine them.

  Just defining strategy <emphasis>expressions</emphasis> does not
  scale, however.

  Strategy <emphasis>definitions</emphasis> are the abstraction
  mechanism of Stratego and allow naming and parameterization of
  strategy expresssions for reuse.

</para>

<section>
  <title>Simple Strategy Definition and Call</title>

<para>

  A simple strategy definition names a strategy expression. For
  instance, the following module define a combination of rules
  (<code>dnf-rules</code>), and some strategies based on it:
        
<screen>
module dnf-strategies
strategies

  dnf-rules = 
    DefI &lt;+ DefE &lt;+ DAOL &lt;+ DAOR &lt;+ DN &lt;+ DMA &lt;+ DMO

  dnf = 
    innermost(dnf-rules)

  dnf-debug = 
    innermost(debug(!"in:  "); dnf-rules; debug(!"out: "))

  main =
    io-wrap(dnf)
</screen>

  Note how <code>dnf-rules</code> is used in the definition of
  <code>dnf</code>, and <code>dnf</code> itself in the definition of
  <code>main</code>.

</para>

<para>

  In general, a definition of the form

<screen>
f = s
</screen>

  introduces a new transformation <code>f</code>, which can be invoked
  by calling <code>f</code> in a strategy expression, with the effect
  of executing strategy expression <code>s</code>.
  
  The expression should have no free variables. That is, all strategie
  called in <code>s</code> should be defined strategies.

  Simple strategy definitions just introduce names for strategy
  expressions.

  Still such strategies have an argument, namely the implicit current
  term.

</para>

</section>

<section>
   <title>Parameterized Definitions</title>

<para>
  
  Strategy definitions with strategy and/or term parameters can be
  used to define transformation <emphasis>schemas</emphasis> that can
  instantiated for various situations.

</para>

<para>
	  
  A parameterized strategy definition of the form

<screen>
f(x1,...,xn | y1,..., ym) = s
</screen>

  introduces a user-defined operator <code>f</code> with
  <code>n</code> <emphasis>strategy arguments</emphasis> and
  <code>m</code> <emphasis>term arguments</emphasis>. Such a
  user-defined strategy operator can be called as
  <code>f(s1,...,sn|t1,...,tm)</code> by providing it <code>n</code>
  argument strategies and <code>m</code> argument terms. The meaning
  of such a call is the body <code>s</code> of the definition in which
  the actual arguments have been substituted for the formal arguments.

  Strategy arguments and term arguments can be left out of calls and
  definitions.  That is, a call <code>f(|)</code> without strategy and
  term arguments can be written as <code>f()</code>, or even just
  <code>f</code>.  A call <code>f(s1,..., sn|)</code> without term
  arguments can be written as <code>f(s1,...,sn)</code> The same holds
  for definitions.

</para>

<para>

  As we will see in the coming chapters, strategies such as
  <code>innermost</code>, <code>topdown</code>, and
  <code>bottomup</code> are not <emphasis>not built into the
  language</emphasis>, but are defined using strategy definitions in
  the language itself using more basic combinators, as illustrated by
  the following definitions (without going into the exact meaning of
  these definitions):

<screen>
strategies
  try(s)      = s &lt;+ id
  repeat(s)   = try(s; repeat(s))
  topdown(s)  = s; all(topdown(s))
  bottomup(s) = all(bottomup(s)); s
</screen>

  Such parameterized strategy operators are invoked by providing
  arguments for the parameters. Specifically, strategy arguments are
  instantiated by means of strategy expressions. Wherever the argument
  is invoked in the body of the definition, the strategy expression is
  invoked.

  For example, in the <link
  linkend="stratego-rewriting-strategies">previous chapter</link> we
  saw the following instantiations of the <code>topdown</code>,
  <code>try</code>, and <code>repeat</code> strategies:

<screen>
module prop-desugar
// ...
strategies

  desugar = 
    topdown(try(DefI &lt;+ DefE))

  impl-nf = 
    topdown(repeat(DefN &lt;+ DefA2 &lt;+ DefO1 &lt;+ DefE))
</screen>

</para>

<para>

  There can be multiple definitions with the same name but
  <emphasis>different</emphasis> number of parameters. Such
  definitions introduce <emphasis>different</emphasis> strategy
  operators.

</para>

</section>

<section>
  <title>Local Definitions</title>

<para>

  Strategy definitions at top-level are visible everywhere.  Sometimes
  it is useful to define a <emphasis>local</emphasis> strategy
  operator.  This can be done using a let expression of the form
  <code>let d* in s end</code>, where <code>d*</code> is a list of
  definitions.

  For example, in the following strategy expression, the definition of
  <code>dnf-rules</code> is only visible in the instantiation of
  <code>innermost</code>:

<screen>
let dnf-rules = DefI &lt;+ DefE &lt;+ DAOL &lt;+ DAOR &lt;+ DN &lt;+ DMA &lt;+ DMO
 in innermost(dnf-rules)
end
</screen>

</para>

</section>

<section>
  <title>Calling Primitives</title>

<para>

  Stratego provides combinators for composing transformations and
  basic operators for analyzing, creating and traversing
  terms. However, it does not provide built-in support for other types
  of computation such as input/output and process control. In order to
  make such functionality available to Stratego programmers, the
  language provides access to user-definable
  <emphasis>primitive</emphasis> strategies through the
  <code>prim</code> construct. For example, the following call to
  <code>prim</code> invokes the <code>SSL_printnl</code> function from
  the native code of the C library:

<screen>
<prompt>stratego></prompt>prim("SSL_printnl", stdout(), ["foo", "bar"])
foobar
""
</screen>

  In general, a call <code>prim("f", s* | t*)</code> represents a call
  to a <emphasis>primitive function</emphasis> <code>f</code> with
  strategy arguments <code>s*</code> and term arguments
  <code>t*</code>.

  Note that the `current' term is not passed automatically as
  argument.

  This mechanism allows the incorporation of mundane tasks such as
  arithmetic, I/O, and other tasks not directly related to
  transformation, but necessary for the integration of transformations
  with the other parts of a transformation system.

</para>

<para>
 
  Primitive functions should take ATerms as arguments. It is not
  possible to use `unboxed' values, i.e., raw native types.  This
  requires writing a wrapper function in C.  For example, the addition
  of two integers is defined via a call to a primitive
  <code>prim("SSL_addi",x,y)</code>, where the argument should
  represent integer ATerms, not C integers.

</para>

<para>

  The Stratego Library provides all the primitives for I/O,
  arithmetic, string processing, and process control that are usually
  needed in Stratego programs. However, it is possible to add new
  primitives to a program as well. That requires linking with the
  compiled program a library that implements the function.  See the
  documentation of <xref linkend="ref-strc"/> for instructions.
 
</para>

<formalpara>
  <title>Implementing Primitives</title>

<para>

  TODO: explain how to implement primitives in C and use their
  implementation in a Stratego program

</para>

</formalpara>

</section>


<section>
  <title>External Definitions</title>

<para>

  The <link linkend="ref-strc">Stratego Compiler</link> is a
  <emphasis>whole program compiler</emphasis>. That is, the compiler
  includes all definitions from imported modules (transitively) into
  the program defined by the main module (the one being compiled).

  This is the reason that the compiler takes its time to compile a
  program.

  To reduce the compilation effort and the size of the resulting
  programs it is possible to create separately compiled
  <emphasis>libraries</emphasis> of Stratego definitions.

  The strategies that such a library provides are declared as
  <emphasis>external</emphasis> definitions. A declaration of the form

<screen>
external f(s1 ... sn | x1 ... xm)
</screen>

  states that there is an externally defined strategy operator
  <code>f</code> with <code>n</code> strategy arguments and
  <code>m</code> term arguments. When compiling a program with
  external definitions a library should be provided that implements
  these definitions.

</para>

<para>

  The Stratego Library is provided as a separately compiled library.

  The <code>libstrateglib</code> module that we have been using in the
  example programs contains external definitions for all strategies in
  the library, as illustrated by the following excerpt:

<screen>
module libstrategolib
// ...
strategies
  // ...
  external io-wrap(s)
  external bottomup(s)
  external topdown(s)
  // ...
</screen>

  When compiling a program using the library we used the <code>-la
  stratego-lib</code> option to provide the implementation of those
  definitions.

</para>

<formalpara>
  <title>Creating Libraries</title>

<para>

  It is possible to create your own Stratego libraries as
  well. Currently that exposes you to a bit of C compilation giberish;
  in the future this may be incorporated in the Stratego compiler.

  Lets create a library for the rules and strategy definitions in the
  <code>prop-laws</code> module. We do this using the
  <code>--library</code> option to indicate that a library is being
  built, and the <code>-c</code> option to indicate that we are only
  interested in the generated C code.

<screen>
$ strc -i prop-laws.str -c -o libproplib.rtree --library
[ strc | info ] Compiling 'proplib.str'
[ strc | info ] Front-end succeeded         : [user/system] = [4.71s/0.77s]
[ strc | info ] Abstract syntax in 'libproplib.rtree'
[ strc | info ] Concrete syntax in 'libproplib.str'
[ strc | info ] Export of externals succeeded : [user/system] = [2.02s/0.11s]
[ strc | info ] Back-end succeeded          : [user/system] = [6.66s/0.19s]
[ strc | info ] Compilation succeeded       : [user/system] = [13.4s/1.08s]
$ rm libproplib.str
</screen>

  The result is of this compilation is a module
  <code>libproplib</code> that contains the external definitions of
  the module <emphasis>and</emphasis> those inherited from
  <code>libstrategolib</code>. (This module comes in to versions; one
  in concrete syntax <code>libproplib.str</code> and one in abstract
  syntax <code>libproplib.rtree</code>; for some obscure reason you
  should throw away the <code>.str</code> file.)

  Furthermore, the Stratego Compiler produces a C program
  <code>libproplib.c</code> with the implementation of the
  library. This C program should be turned into an object library
  using <code>libtool</code>, as follows:

<screen>
<prompt>$</prompt> libtool --mode=compile gcc -g -O -c libproplib.c -o libproplib.o -I &lt;path/to/aterm-stratego/include>
...
<prompt>$</prompt> libtool --mode=link gcc -g -O -o libproplib.la libproplib.lo
...
</screen>

  The result is a shared library <code>libproplib.la</code> that can
  be used in other Stratego programs.
  
  (TODO: the production of the shared library should really be
  incorporated into strc.)

</para>

</formalpara>

<formalpara>
  <title>Using Libraries</title>

<para>

  Programmers that want to use your library can now import the module
  with external definitions, instead of the original module.

<screen>
module dnf-tool
imports libproplib
strategies
  main = main-dnf
</screen>

  This program can be compiled in the usual way, adding the new
  library to the libraries that should be linked against:

<screen>
<prompt>$</prompt> strc -i dnf-tool.str -la stratego-lib -la ./libproplib.la

<prompt>$</prompt> cat test3.prop
And(Impl(Atom("r"),And(Atom("p"),Atom("q"))),ATom("p"))

<prompt>$</prompt> ./dnf-tool -i test3.prop
Or(And(Not(Atom("r")),ATom("p")),And(And(Atom("p"),Atom("q")),ATom("p")))
</screen>

  To correctly deploy programs based on shared libraries requires some
  additional effort. <xref linkend="stratego-building"/> explains how
  to create deployable packages for your Stratego programs.

</para>

</formalpara>

</section>


<section>
  <title>Dynamic Calls</title>

<para>

  external definitions are implemented in a separately compiled
  Stratego program

  compiling Stratego program as library

</para>

</section>


<section>
  <title>Extending Definitions</title>

<para>

  existing definitions can be extended

  multiple definitions are possible

  semantics: non-deterministic choice of bodies

</para>

</section>

</section>


<section>
  <title>Summary</title>

<para>

</para>

</section>



</chapter>

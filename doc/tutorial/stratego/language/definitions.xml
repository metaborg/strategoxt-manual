<section
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Stategy Definitions (*)</title>

      <para>
	Reuse of transformation requires definitions

1 Naming strategy expressions 

2 Named rewrite rules 

3 Reusing rewrite rules through modules

      </para>

<section>
  <title>Simple Strategy Definition and Call</title>

  <para>
I Syntax: f = s 

Name strategy expression s 

Syntax: f 

Invoke (call) named strategy f
  </para>

  <screen>
Plus(Var("a"),Int("3"))
stratego> SwapArgs = {e1,e2 :(Plus(e1,e2) -> Plus(e2,e1))} 
stratego> SwapArgs 
Plus(Int("3"),Var("a"))</screen>

</section>

<section>
  <title>Named rewrite rules</title>

  <para>

Syntax: f : p1 -> p2 where s 

Name rewrite rule p1 -> p2 where s 

Equivalent to: f = {x1,...,xn: (p1 -> p2 where s)} (with x1,...,xn the variables in p1, p2, and s)

  </para>

  <screen>
Plus(Var("a"),Int("3")) 
stratego> SwapArgs : Plus(e1,e2) -> Plus(e2,e1) 
stratego> SwapArgs 
Plus(Int("3"),Var("a"))</screen>

</section>


<section>
  <title>Modules with Reusable Transformation Rules</title>

  <para>
  </para>

  <screen>
module Simplification-Rules
rules
  EvalPlus :
    Plus(Int(i),Int(j)) -> Int(k) where &lt;addS>(i,j) => k

  PlusAssoc :
    Plus(Plus(e1, e2), e3) -> Plus(e1, Plus(e2, e3))

  EvalIf :
    If(Int("0"), e1, e2) -> e2

  EvalIf :
    If(Int(i), e1, e2) -> e1 where &lt;not(eq)> (i, "0")</screen>

  <screen>
stratego> import Simplification-Rules</screen>


</section>



<section>
   <title>Parameterized and recursive definitions</title>

	<para>
	  Parameterized and Recursive Definitions

Syntax: f (x1,...,xn|y1,...,ym) = s 

Strategy definition parameterized with strategies (x1,...,xn) and terms (y1,...,ym)

Note: definitions may be recursive


	</para>

	<para>
	  Repeated application of a strategy can be achieved with
	  recursion. There are two styles for doing this; with a
	  recursive definition or using the fixpoint operator rec. A
	  recursive definition is a normal strategy definition with a
	  recursive call in its body.
	</para>

  <screen>
try(s) = s &lt;+ id

repeat(s) = try(s; repeat(s))

while(c, s) = if c then s; while(c,s) end

do-while(s, c) = s; if c then do-while(s, c) end
  </screen>

<screen>
  strategies
    repeat(s) = s; repeat(s) &lt;+ id
    eval = repeat(A &lt;+ B)
  rules
    A : P(Z,x) -> x
    B : P(S(x),y) -> P(x,S(y))
</screen>


  <para>
  </para>

  <screen>
map(s) =
  ?[] &lt;+ \ [x | xs] -> [&lt;s> x | &lt;map(s)> xs] \

foldr(s1, s2, f) =
  []; s1 &lt;+ \ [x|xs] -> &lt;s2>(&lt;f> x, &lt;foldr(s1, s2, f)> xs) \

length = foldr(!0, add, !1)
  </screen>

</section>

<section xml:id="rec">
   <title>Fixpoint operator (rec)</title>
    <para>
      Another way to define recursion is using the fixpoint operator
      <code>rec x(s)</code>, which recurses on applications of
      <code>x</code> within <code>s</code>.
    </para>

    <para>
      Originally, the <code>rec</code> operator was the only way to define
      recursion. It is still in the language in the first place
      because it is widely used in many existing programs, and in the
      second place because it can be a nice concise expression of a
      recursive strategy. An example usage is the definition of repeat
      with <code>rec</code>:
    </para>

    <screen>repeat(s) = try(s; repeat(s))</screen>


    <para>
Iteration Strategies}

        Using sequential composition, choice, and recursion a large
        variety of iteration strategies can be defined. The following
        module is part of the Stratego Standard Library:

    </para>

<screen>
  module iteration
  imports conditional
  strategies
    repeat(s, c)       = rec x(s; x &lt;+ c)
    repeat(s)          = repeat(s, id)
    repeat1(s, c)      = rec x(s; (x &lt;+ c))
    repeat1(s)         = repeat1(s, id)
    repeat-until(s, c) = rec x(s; (c &lt;+ x))

    while(c, s)        = rec x(try(c; s; x))
    do-while(s, c)     = rec x(s; try(c; x))
    while-not(c, s)    = rec x(c &lt;+ s; x)

    for(i, c, s)       = i; while-not(c, s)
</screen>

</section>

<section>
  <title>External and Primitive Definitions</title>

  <para>
  </para>

  <screen>
  </screen>

</section>


<section>
  <title></title>

  <para>
  </para>

  <screen>
  </screen>

</section>


</section>

<chapter xml:id="stratego-type-unifying-strategies"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Type Unifying Strategies</title>

<para>

  In <xref linkend="stratego-traversal-strategies"/> we have seen
  combinators for composing <emphasis>type preserving</emphasis>
  strategies. That is, structural transformations in which basic
  transformation rules don't change the type of a term. Such
  strategies are typically applied in transformations, which change
  the structure of a term, but not its type. Examples are
  simplification and optimization.

  In this chapter we consider the class of <emphasis>type
  unifying</emphasis> strategies, in which terms of different types
  are mapped onto one type. The application area for this type of
  strategy is analysis of expresssions with examples such as free
  variables collection and call-graph extraction.

</para>

<para>

  We consider the following example problems:
            
  <itemizedlist>
    <listitem>
      <para>
	<emphasis>term-size</emphasis>: Count the number of nodes in a term
      </para>
    </listitem>

    <listitem>
      <para>
	<emphasis>occurrences</emphasis>: Count number of occurrences of a
	subterm in a term
      </para>
    </listitem>

    <listitem>
      <para>
	<emphasis>collect-vars</emphasis>: Collect all variables in expression
      </para>
    </listitem>

    <listitem>
      <para>
	<emphasis>free-vars</emphasis>: Collect all <emphasis>free</emphasis>
	variables in expression
      </para>
    </listitem>
  </itemizedlist>

  These problems have in common that they reduce a structure to a
  single value or to a collection of derived values. The structure of
  the original term is usually lost.

</para>

<para>

  We start with examining these problems in the context of lists, and
  then generalize the solutions we find there to arbitrary terms using
  generic term deconstruction, which allows concise implementation of
  generic type unifying strategies, similarly to the generic traversal
  strategies of <xref linkend="stratego-traversal-strategies"/>.

</para>

<section>
   <title>Type Unifying List Transformations</title>

<para>

  We start with considering type-unifying operations on lists.

</para>

<formalpara>
  <title>Sum</title>

<para>

  Reducing a list to a value can be conveniently expressed by means of
  a fold, which has as parameters operations for reducing the list
  constructors.

  The <code>foldr/2</code> strategy reduces a list by replacing each
  <code>Cons</code> by an application of <code>s2</code>, and the
  empty list by <code>s1</code>.

<screen>
foldr(s1, s2) = 
  []; s1 &lt;+ \ [y|ys] -> &lt;s2>(y, &lt;foldr(s1, s2)> ys) \ 
</screen>

  Thus, when applied to a list with three terms the result is

<screen>
&lt;foldr(s1,s2)> [t1,t2,t3] => &lt;s2>(t1, &lt;s2>(t2, &lt;s2>(t3, &lt;s1> [])))
</screen>

</para>

</formalpara>

<para>

  A typical application of <code>foldr/2</code> is <code>sum</code>,
  which reduces a list to the sum of its elements.  It sums the
  elements of a list of integers, using <code>0</code> for the empty
  list and <code>add</code> to combine the head of a list and the
  result of folding the tail.

<screen>
sum = foldr(!0, add)
</screen>
 
  The effect of <code>sum</code> is illustrated by the following
  application:

<screen>
&lt;foldr(!0,add)> [1,2,3] => &lt;add>(1, &lt;add>(2, &lt;add>(3, &lt;!0> []))) => 6
</screen>

  Note the build operator for replacing the empty list with
  <code>0</code>; writing <code>foldr(0, add)</code> would be wrong,
  since <code>0</code> by itself is a congruence operator, which
  basically <emphasis>matches</emphasis> the subject term with the
  term <code>0</code> (rather than replacing it).

</para>

<formalpara>
  <title>Size</title>

<para>

  The <code>foldr/2</code> strategy does not touch the elements of a
  list.  The <code>foldr/3</code> strategy is a combination of fold
  and map that extends <code>foldr/2</code> with a parameter that is
  applied to the elements of the list.

<screen>
foldr(s1, s2, f) = 
  []; s1 &lt;+ \ [y|ys] -> &lt;s2>(&lt;f>y, &lt;foldr(s1,s2,f)>ys) \ 
</screen>

  Thus, when applying it to a list with three elements, we get:

<screen>
&lt;foldr(s1,s2)> [t1,t2,t3] => &lt;s2>(&lt;f>t1, &lt;s2>(&lt;f>t2, &lt;s2>(&lt;f>t3, &lt;s1> [])))
</screen>

</para>

</formalpara>

<para>

  Now we can solve our first example problem
  <code>term-size</code>. The size of a list is its
  <emphasis>length</emphasis>, which corresponds to the sum of the
  list with the elements replaced by <code>1</code>.

<screen>
length = foldr(!0, add, !1)
</screen>

</para>

<formalpara>
  <title>Number of occurrences</title>

<para>

  The number of occurrences in a list of terms that satisfy some
  predicate, entails only counting those elements in the list for
  which the predicate succeeds. (Where a predicate is implemented with
  a strategy that succeeds only for the elements in the domain of the
  predicate.)

  This follows the same pattern as counting the length of a list, but
  now only counting the elements for which <code>s</code> succeeds.

<screen>
list-occurrences(s) = foldr(!0, add, s &lt; !1 + !0)
</screen>

  Using <code>list-occurrences</code> and a match strategy we can
  count the number of variables in a list:

<screen>
list-occurrences(?Var(_))
</screen>

</para>

</formalpara>

<formalpara>
  <title>Collect</title>

<para>

  The next problem is to <emphasis>collect</emphasis> all terms for
  which a strategy succeeds. We have already seen how to do this for
  lists.  The <code>filter</code> strategy reduces a list to the
  elements for which its argument strategy succeeds.

<screen>
filter(s) = [] &lt;+ [s | filter(s)] &lt;+ ?[ |&lt;filter(s)>]
</screen> 

  Collecting the variables in a list is a matter of filtering with the
  <code>?Var(_)</code> match.

<screen>
filter(?Var(_)) 
</screen>

  The final problem, collecting the free variables in a term, does not
  really have a counter part in lists, but we can mimick this if we
  consider having two lists; where the second list is the one with the
  bound variables that should be excluded.

<screen>
(filter(?Var(_)),id); diff
</screen>

  This collects the variables in the first list and subtracts the
  variables in the second list.

</para>

</formalpara>

</section>

<section>
   <title>Extending Fold to Expressions</title>

<para>

  We have seen how to do typical analysis transformations on
  lists. How can we generalize this to arbitrary terms?

  The general idea of a folding operator is that it replaces the
  constructors of a data-type by applying a function to combine the
  reduced arguments of constructor applications.

  For example, the following definition is a sketch for a fold over
  abstract syntax trees:

<screen>
fold-exp(binop, assign, if, ...) = rec f( 
  fold-binop(f, binop)
  &lt;+ fold-assign(f, assign)
  &lt;+ fold-if(f, if)
  &lt;+ ... )

fold-binop(f, s)  : BinOp(op, e1, e2) -> &lt;s>(op, &lt;f>e1, &lt;f>e2)
fold-assign(f, s) : Assign(e1, e2)    -> &lt;s>(&lt;f>e1, &lt;f>e2)
fold-if(f, s)     : If(e1, e2, e3)    -> &lt;s>(&lt;f>e1, &lt;f>e2, &lt;f>e3)
</screen>

  For each constructor of the data-type the fold has an argument
  strategy and a rule that matches applications of the constructor,
  which it replaces with an application of the strategy to the tuple
  of subterms reduced by a recursive invocation of the fold.

</para>

<para>

  Instantation of this strategy requires a rule for each constructor
  of the data-type. For instance, the following instantiation defines
  <code>term-size</code> using <code>fold-exp</code> by providing
  rules that sum up the sizes of the subterms and add one
  (<code>inc</code>) to account for the node itself.

<screen>
term-size  = fold-exp(BinOpSize, AssignSize, IfSize, ...)

BinOpSize  : (Plus(), e1, e2) -> &lt;add; inc>(e1, e2)
AssignSize : (e1, e2)         -> &lt;add; inc>(e1, e2)
IfSize     : (e1, e2, e3)     -> &lt;add; inc>(e1, &lt;add>(e2, e3))
</screen>

</para>

<para>

  This looks suspiciously like the traversal rules in <xref
  linkend="stratego-traversal-strategies"/>.

  Defining folds in this manner has several limitations.  In the
  definition of fold, one parameter for each constructor is provided
  and traversal is defined explicitly for each constructor.
  Furthermore, in the instantiation of fold, one rule for each
  constructor is needed, and the default behaviour is not generically
  specified.

</para>

<para>

  One solution would be to use the generic traversal strategy
  <code>bottomup</code> to deal with fold:

<screen>
fold-exp(s) = bottomup(s) 

term-size   = fold-exp(BinOpSize &lt;+ AssignSize &lt;+ IfSize &lt;+ ...) 

BinOpSize   : BinOp(Plus(), e1, e2) -> &lt;add>(1, &lt;add>(e1, e2))
AssignSize  : Assign(e1, e2)        -> &lt;add>(e1, e2)
IfSize      : If(e1, e2, e3)        -> &lt;add>(e1, &lt;add>(e2, e3))
</screen>

  Although the recursive application to subterms is now defined
  generically , one still has to specify rules for the default
  behaviour.

</para>

</section>

<section>
  <title>Generic Term Deconstruction</title>
  
<para>

  Instead of having folding rules that are specific to a data type,
  such as

<screen>
BinOpSize  : BinOp(op, e1, e2) -> &lt;add>(1, &lt;add>(e1, e2)) 
AssignSize : Assign(e1, e2)    -> &lt;add>(1, &lt;add>(e1, e2)) 
</screen>

  we would like to have a generic definition of the form

<screen>
CSize : c(e1, e2, ...) -> &lt;add>(e1, &lt;add>(e2, ...)) 
</screen>

  This requires generic decomposition of a constructor application
  into its constructor and the list with children. This can be done
  using the <code>#</code> operator. The match strategy
  <code>?p1#(p2)</code> decomposes a constructor application into its
  constructor name and the list of direct subterms. Matching such a
  pattern against a term of the form <code>C(t1,...,tn)</code> results
  in a match of <code>"C"</code> against <code>p1</code> and a match
  of <code>[t1,...,tn]</code> against <code>p2</code>.

<screen>
Plus(Int("1"), Var("2")) 
<prompt>stratego></prompt> ?c#(xs)
<prompt>stratego></prompt> :binding c
variable c bound to "Plus" 
<prompt>stratego></prompt> :binding xs 
variable xs bound to [Int("1"), Var("2")]
</screen>

</para>

<formalpara>
  <title>Crush</title>

<para>

  Using generic term deconstruction we can now generalize the type
  unifying operations on lists to arbitrary terms.

  In analogy with the generic traversal operators we need a generic
  one-level reduction operator. 

  The <code>crush/3</code> strategy reduces a constructor application
  by folding the list of its subterms using <code>foldr/3</code>.

<screen>
crush(nul, sum, s) : c#(xs) -> &lt;foldr(nul, sum, s)> xs
</screen>

   Thus, <code>crush</code> performs a fold-map over the direct
   subterms of a term. The following application illustrates what

<screen>
&lt;crush(s1, s2, f)> C(t1, t2) => &lt;s2>(&lt;f>t1, &lt;s2>(&lt;f>t2, &lt;s1>[]))
</screen>

   The following Shell session instantiates this application in two ways:

<screen>
<prompt>stratego></prompt> import libstrategolib
<prompt>stratego></prompt> !Plus(Int("1"), Var("2"))
Plus(Int("1"),Var("2"))

<prompt>stratego></prompt> crush(id, id, id)
(Int("1"),(Var("2"),[]))

<prompt>stratego></prompt> !Plus(Int("1"), Var("2"))
Plus(Int("1"),Var("2"))

<prompt>stratego></prompt> crush(!Tail(&lt;id>), !Sum(&lt;Fst>,&lt;Snd>), !Arg(&lt;id>))
Sum(Arg(Int("1")),Sum(Arg(Var("2")),Tail([])))
</screen>

  The <code>crush</code> strategy is the tool we need to implement
  solutions for the example problems above.

</para>

</formalpara>

<formalpara>
  <title>Size</title>

<para>

   Counting the number of direct subterms of a term is similar to
   counting the number of elements of a list. The definition of
   <code>node-size</code> is the same as the definition of
   <code>length</code>, except that it uses <code>crush</code> instead
   of <code>foldr</code>:
 
<screen>
node-size = crush(!0, add, !1)
</screen>

   Counting the number of subterms (nodes) in a term is a similar
   problem. But, instead of counting each direct subterm as 1, we need
   to count <emphasis>its</emphasis> subterms.  

<screen>
term-size = crush(!1, add, term-size) 
</screen>

   The <code>term-size</code> strategy achieves this simply with a
   recursive call to itself.

<screen>
<prompt>stratego></prompt> &lt;node-size> Plus(Int("1"), Var("2"))
2
<prompt>stratego></prompt> &lt;term-size> Plus(Int("1"), Var("2"))
5
</screen>

</para>

</formalpara>

<formalpara>
   <title>Occurrences</title>

<para>

  Counting the number of occurrences of a certain term in another
  term, or more generally, counting the number of subterms that
  satisfy some predicate is similar to counting the term size.

  However, only those terms satisfying the predicate should be
  counted.

  The solution is again similar to the solution for lists, but now
  using <code>crush</code>.

<screen>
om-occurrences(s) = s &lt; !1 + crush(!0, add, om-occurrences(s))
</screen>

  The <code>om-occurrences</code> strategy counts the
  <emphasis>outermost</emphasis> subterms satisfying
  <code>s</code>. That is, the strategy stops counting as soon as it
  finds a subterm for which <code>s</code> succeeds.

</para>

</formalpara>

<para>

  The following strategy counts <emphasis>all</emphasis> occurrences:

<screen>
occurrences(s) = &lt;add>(&lt;s &lt; !1 + !0>, &lt;crush(!0, add, occurrences(s))>)
</screen>

  It counts the current term if it satisfies <code>s</code> and adds
  that to the occurrences in the subterms.

<screen>
<prompt>stratego></prompt> &lt;om-occurrences(?Int(_))> Plus(Int("1"), Plus(Int("34"), Var("2")))
2
<prompt>stratego></prompt> &lt;om-occurrences(?Plus(_,_))> Plus(Int("1"), Plus(Int("34"), Var("2")))
1
<prompt>stratego></prompt> &lt;occurrences(?Plus(_,_))> Plus(Int("1"), Plus(Int("34"), Var("2")))
2
</screen>

</para>

<formalpara>
   <title>Collect</title>

<para>

  <emphasis>Collecting</emphasis> the subterms that satisfy a
  predicate is similar to counting, but now a
  <emphasis>list</emphasis> of subterms is produced.

  The <code>collect(s)</code> strategy collects all
  <emphasis>outermost</emphasis> occurrences satisfying
  <code>s</code>.

<screen>
collect(s) = ![&lt;s>] &lt;+ crush(![], union, collect(s)) 
</screen>

  When encountering a subterm for which <code>s</code> succeeds, a
  singleton list is produced. For other terms, the matching subterms
  are collected for each direct subterm, and the resulting lists are
  combined with <code>union</code> to remove duplicates.


</para>

</formalpara>

<para>

  A typical application of <code>collect</code> is the collection of
  all variables in an expression, which can be defined as follows:

<screen>
get-vars = collect(?Var(_))
</screen>

  Applying <code>get-vars</code> to an expression AST produces the
  list of all subterms matching <code>Var(_)</code>.

</para>

<para>

  The <code>collect-all(s)</code> strategy collects
  <emphasis>all</emphasis> occurrences satisfying <code>s</code>.

<screen>
collect-all(s) = 
  ![&lt;s> | &lt;crush(![], union, collect(s))>] &lt;+ crush(![], union, collect(s))
</screen>

  If <code>s</code> succeeds for the subject term combines the subject
  term with the collected terms from the subterms.

</para>

<formalpara>
   <title>Free Variables</title>

<para>

  Collecting the variables in an expression is easy, as we saw above.
  However, when dealing with languages with variable bindings, a
  common operation is to extract only the <emphasis>free</emphasis>
  variables in an expression or block of statements. That is, the
  occurrences of variables that are not bound by a variable
  declaration.

  For example, in the expression

<screen>
x + let var y := x + 1 in f(y, a + x + b) end 
</screen>

  the free variables are <code>{x, a, b}</code>, but not
  <code>y</code>, since it is bound by the declaration in the let.

  Similarly, in the function definition 

<screen>
function f(x : int) = let var y := h(x) in x + g(z) * y end 
</screen>

  the only free variable is <code>z</code> since <code>x</code> and
  <code>y</code> are declared.

</para>

</formalpara>

<para>

  Here is a free variable extraction strategy for Tiger expressions.

  It follows a similar pattern of mixing generic and data-type specific
  operations as we saw in <xref linkend="stratego-traversal-strategies"/>.

  The <code>crush</code> alternative takes care of the non-special
  constructors, while <code>ExpVars</code> and <code>FreeVars</code>
  deal with the special cases, i.e. variables and variable binding
  constructs:

<screen>
free-vars = 
  ExpVars 
  &lt;+ FreeVars(free-vars) 
  &lt;+ crush(![], union, free-vars) 

ExpVars : 
  Var(x) -> [x]

FreeVars(fv) : 
  Let([VarDec(x, t, e1)], e2) -> &lt;union>(&lt;fv> e1, &lt;diff>(&lt;fv> e2, [x])) 

FreeVars(fv) : 
  Let([FunctionDec(fdecs)], e2) -> &lt;diff>(&lt;union>(&lt;fv> fdecs, &lt;fv>e2), fs) 
  where &lt;map(?FunDec(&lt;id>,_,_,_))> fdecs => fs 

FreeVars(fv) : 
  FunDec(f, xs, t, e) -> &lt;diff>(&lt;fv>e, xs) 
  where &lt;map(Fst)> xs => xs
</screen>

  The <code>FreeVars</code> rules for binding constructs use their
  <code>fv</code> parameter to recursively get the free variables from
  subterms, and they subtract the bound variables from any free
  variables found using <code>diff</code>.
   
</para>

<para>

  We can even capture the pattern exhibited here in a generic
  collection algorithm with support for special cases:

<screen>
collect-exc(base, special : (a -> b) * a -> b) = 
  base 
  &lt;+ special(collect-exc(base, special)) 
  &lt;+ crush(![], union, collect-exc(base, special)) 
</screen>

  The <code>special</code> parameter is a strategy parameterized with
  a recursive call to the collection strategy.

  The original definition of <code>free-vars</code> above, can now be
  replaced with

<screen>
free-vars = collect-exc(ExpVars, FreeVars)
</screen>

</para>

</section>

<section>
   <title>Generic Term Construction</title>

<para>

  It can also be useful to <emphasis>construct</emphasis> terms
  generically. For example, in parse tree implosion, application nodes
  should be reduced to constructor applications. Hence build operators
  can also use the <code>#</code> operator. In a strategy
  <code>!p1#(p2)</code>, the current subject term is replaced by a
  constructor application, where the constructor name is provided by
  <code>p1</code> and the list of subterms by <code>p2</code>. So, if
  <code>p1</code> evaluates to <code>"C"</code> and <code>p2</code>
  evaluates to <code>[t1,...,tn]</code>, the expression
  <code>!p1#(p2)</code> build the term <code>C(t1,...,tn)</code>.

</para>

<formalpara>
  <title>Imploding Parse Trees</title>
<para>

  A typical application of generic term construction is the implosion
  of parse trees to abstract syntax trees performed by <xref
  linkend="ref-implode-asfix"/>. 

  Parse trees produced by <xref linkend="ref-sglr"/> have the form:

<screen>
appl(prod(sorts, sort, attrs([cons("C")])),[t1,...,tn]) 
</screen>

  That is, a node in a parse tree consists of an encoding of the
  original production from the syntax definition, and a list with
  subtrees. The production includes a constructor annotation
  <code>cons("C")</code> with the name of the abstract syntax tree
  constructor. Such a tree node should be imploded to an abstract
  syntax tree node of the form <code>C(t1,...,tn)</code>. 

  Thus, this requires the construction of a term with constructor
  <code>C</code> given the string with its name.

  The following implosion strategy achieves this using generic term
  construction:

<screen>
implode = appl(id, map(implode)); Implode 
Implode : appl(prod(sorts, sort, attrs([cons(c)])), ts) -> c#(ts) 
</screen>

  The <code>Implode</code> rule rewrites an <code>appl</code> term to
  a constructor application, by extracing the constructor name from
  the production and then using generic term construction to apply the
  constructor.

</para>

</formalpara>

<para>

  Note that this is a gross over simplification of the actual
  implementation of <xref linkend="ref-implode-asfix"/>.  See the
  source code for the full strategy.

</para>

</section>

<section>
  <title>Summary</title>

<para>

  Generic term construction and deconstruction support the definition
  of generic analysis and generic translation problems. The generic
  solutions for the example problems term size, number of occurrences,
  and subterm collection demonstrate the general approach to solving
  these types of problems.

</para>

</section>

</chapter>

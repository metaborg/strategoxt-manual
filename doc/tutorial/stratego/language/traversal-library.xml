<section
  xml:id="stratego-traversal-library"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Idioms and Library Strategies for Traversal</title>

<para>

  Above we have seen the basic mechanisms for defining traversals in
  Stratego: custom traversal rules, data-type specific congruence
  operators, and generic traversal operators.

  Term traversals can be categorized into classes according to how
  much of the term they traverse and to which parts of the term they
  modify.

  We will consider a number of idioms and standard strategies from the
  Stratego Library that are useful in the definition of traversals.

</para>

<section>
  <title>Full Traversals</title>

<para>

  One class of traversal strategies performs a <emphasis>full
  traversal</emphasis>, that is visits and transforms every subterm of
  the subject term.

  We already saw the <code>bottomup</code> strategy defined as

<screen>
bottomup(s) = all(bottomup(s)); s
</screen>

  It first visits the subterms of the subject term, recursively
  transforming <emphasis>its</emphasis> subterms, and then applies the
  transformation <code>s</code> to the result.
  
</para>

<para>

  A related strategy is <code>topdown</code>, which is defined as
  
<screen>
topdown(s) = s; all(topdown(s))
</screen>
 
  It <emphasis>first</emphasis> transforms the subject therm and
  <emphasis>then</emphasis> visits the subterms of the result.

</para>

<para>

  A combination of <code>topdown</code> and <code>bottomup</code> is
  <code>downup</code>, defined as

<screen>
downup(s) = s; all(downup(s)); s
</screen>

  It applies <code>s</code> on the way down the tree, and again on the
  way up. 

  A variation is <code>downup(2,0)</code>

<screen>
downup(s1, s2) = s1; all(downup(s1, s2)); s2
</screen>

  which applies one strategy on the way down and another on the way
  up.

</para>

<para>

  Since the parameter strategy is applied at every subterm, these
  traversals only succeed if it succeeds everywhere. Therefore, these
  traversals are typically applied in combination with
  <code>try</code> or <code>repeat</code>.

<screen>
topdown(try(R1 &lt;+ R2 &lt;+ ...))
</screen>

  This has the effect that the rules are tried at each subterm. If
  none of the rules apply the term is left as it was and traversal
  continues with its subterms.

</para>

<formalpara>
  <title>Choosing a Strategy</title>

<para>

  The strategy to be used for a particular transformation depends on
  the rules and the goal to be achieved.

</para>

</formalpara>

<para>

  For example, a constant folding transformation for proposition
  formulae can be defined as a bottom-up traversal that tries to apply
  one of the truth-rules <code>T</code> at each subterm:
    
<screen>
T : And(True(), x) -> x
T : And(x, True()) -> x
T : And(False(), x) -> False()
T : And(x, False()) -> False()
T : Or(True(), x) -> True()
T : Or(x, True()) -> True()
T : Or(False(), x) -> x
T : Or(x, False()) -> x
T : Not(False()) -> True()
T : Not(True()) -> False()

eval = bottomup(try(T))
</screen>

   Bottomup is the strategy of choice here because it evaluates
   subterms before attempting to rewrite a term.

   An evaluation strategy using <code>topdown</code>

<screen>
eval2 = topdown(try(T)) // bad strategy
</screen>

  does not work as well, since it attempts to rewrite terms before
  their subterms have been reduced, thus missing rewriting
  opportunities.

  The following Stratego Shell session illustrates this:

<screen>
<prompt>stratego></prompt> !And(True(), Not(Or(False(), True())))
And(True,Not(Or(False,True)))
<prompt>stratego></prompt> eval
False
<prompt>stratego></prompt> !And(True(), Not(Or(False(), True())))
And(True,Not(Or(False,True)))
<prompt>stratego></prompt> eval2
Not(True)
</screen>

  Exercise: find other terms that show the difference between these
  strategies.

</para>

<para>
    
  On the other hand, a desugaring transformation for propositions,
  which defines implication and equivalence in terms of other
  connectives is best defined as a <code>topdown</code> traversal
  which tries to apply one of the rules <code>DefI</code> or
  <code>DefE</code> at every subterm.

<screen>
DefI : Impl(x, y) -> Or(Not(x), y)
DefE : Eq(x, y) -> And(Impl(x, y), Impl(y, x))

desugar = topdown(try(DefI &lt;+ DefE))
</screen>

  Since <code>DefE</code> rewrites <code>Eq</code> terms to terms
  involving <code>Impl</code>, a strategy with <code>bottomup</code>
  does not work.

<screen>
desugar2 = bottomup(try(DefI &lt;+ DefE))   // bad strategy
</screen>

  Since the subterms of a node are traversed
  <emphasis>before</emphasis> the node itself is visited, this
  transformation misses the desugaring of the implications
  (<code>Impl</code>) originating from the application of the
  <code>DefE</code> rule.

  The following Shell session illustrates this:

<screen>
<prompt>stratego></prompt> !Eq(Atom("p"), Atom("q"))
Eq(Atom("p"),Atom("q"))
<prompt>stratego></prompt> desugar
And(Or(Not(Atom("p")),Atom("q")),Or(Not(Atom("q")),Atom("p")))
<prompt>stratego></prompt> !Eq(Atom("p"), Atom("q"))
Eq(Atom("p"),Atom("q"))
<prompt>stratego></prompt> desugar2
And(Impl(Atom("p"),Atom("q")),Impl(Atom("q"),Atom("p")))
</screen>

</para>

<formalpara>
   <title>Repeated Application</title>

<para>

  In case one rule produces a term to which another desugaring rule
  can be applied, the desugaring strategy should repeat the
  application of rules to each subterm.

  Consider the following rules and strategy for desugaring
  propositional formulae to implicative normal form (using only
  implication and <code>False</code>).
    
<screen>
DefT  : True() -> Impl(False(), False())
DefN  : Not(x) -> Impl(x, False())
DefA2 : And(x, y) -> Not(Impl(x, Not(y)))
DefO1 : Or(x, y) -> Impl(Not(x), y)
DefE  : Eq(x, y) -> And(Impl(x, y), Impl(y, x))

impl-nf = topdown(repeat(DefT &lt;+ DefN &lt;+ DefA2 &lt;+ DefO1 &lt;+ DefE))
</screen>

  Application of the rules with <code>try</code> instead of
  <code>repeat</code> 

<screen>
impl-nf2 = topdown(try(DefT &lt;+ DefN &lt;+ DefA2 &lt;+ DefO1 &lt;+ DefE))  // bad strategy
</screen>

  is not sufficient, as shown by the following Shell session:

<screen>
<prompt>stratego></prompt> !And(Atom("p"),Atom("q"))
And(Atom("p"),Atom("q"))
<prompt>stratego></prompt> impl-nf
Impl(Impl(Atom("p"),Impl(Atom("q"),False)),False)
<prompt>stratego></prompt> !And(Atom("p"),Atom("q"))
And(Atom("p"),Atom("q"))
<prompt>stratego></prompt> impl-nf2
Not(Impl(Atom("p"),Impl(Atom("q"),False)))
</screen>

  Note that the <code>Not</code> is not desugared with
  <code>impl-nf2</code>.

</para>

</formalpara>

<formalpara>
   <title>Paramorphism</title>

<para>

  A variation on bottomup is a traversal that also provides the
  original term as well as the term in which the direct subterms have
  been transformed. (Also known as a paramorphism?)

<screen>
bottomup-para(s) = &lt;s>(&lt;id>, &lt;all(bottomup-para(s))>)
</screen>

  This is most useful in a bottom-up traversal; the original term is
  always available in a top-down traversal.

</para>

</formalpara>

<para>
  Exercise: give an example application of this strategy
</para>

</section>

<section>
  <title>Cascading Transformations</title>

<para>

  Cascading transformations are transformations upon
  transformations. While the full traversals discussed above walk over
  the tree once, cascading transformations apply multiple `waves' of
  transformations to the nodes in the tree.

  The prototypical example is the <code>innermost</code> strategy,
  which exhaustively applies a transformation, typically a set of
  rules, to a tree.

<screen>
simplify =
  innermost(R1 &lt;+ ... &lt;+ Rn)
</screen>

  The basis of <code>innermost</code> is a <code>bottomup</code>
  traversal that tries to apply the transformation at each node after
  visiting its subterms.

<screen>
innermost(s) = bottomup(try(s; innermost(s)))
</screen>

  If the transformation <code>s</code> succeeds, the result term is
  transformed again with a recursive call to <code>innermost</code>.

</para>

<para>

  Application of <code>innermost</code> exhaustively applies
  <emphasis>one</emphasis> set of rules to a tree.

  Using sequential composition we can apply several
  <emphasis>stages</emphasis> of reductions.

  A special case of such a <emphasis>staged transformation</emphasis>,
  is known as <emphasis>sequence of normal forms</emphasis> (in the
  TAMPR system):

<screen>
simplify =
  innermost(A1 &lt;+ ... &lt;+ Ak)
  ; innermost(B1 &lt;+ ... &lt;+ Bl)
  ; ...
  ; innermost(C1 &lt;+ ... &lt;+ Cm)
</screen>

  At each stage the term is reduced with respect to a different set of
  rules.

</para>

<para>

  Of course it is possible to mix different types of transformations
  in such a stage pipeline, for example.

<screen>
simplify =
  topdown(try(A1 &lt;+ ... &lt;+ Ak))
  ; innermost(B1 &lt;+ ... &lt;+ Bl)
  ; ...
  ; bottomup(repeat(C1 &lt;+ ... &lt;+ Cm))
</screen>

  At each stage a different strategy and different set of rules can be
  used. (Of course one may use the same strategy several times, and
  some of the rule sets may overlap.)

</para>

</section>

<section>
  <title>Mixing Generic and Specific Traversals</title>

<para>

  While completely generic strategies such as <code>bottomup</code>
  and <code>innermost</code> are often useful, there are also
  situations where a mixture of generic and data-type specific
  traversal is necessary. Fortunately, Stratego allows you to mix
  generic traversal operators, congruences, your own traversal and
  regular rules, any way you see fit.

</para>

<para>

  A typical pattern for such strategies first tries a number of
  special cases that deal with traversal themselves. If none of the
  special cases apply, a generic traversal is used, followed by
  application of some rules applicable in the general case.

<screen>
transformation =
  special-case1
  &lt;+ special-case2
  &lt;+ special-case3
  &lt;+ all(transformation); reduce

reduce = ...
</screen>

</para>
 
<formalpara>
  <title>Constant Propagation</title>

<para>

  A typical example is the following constant propagation strategy.
  It uses the exceptions to the basic generic traversal to traverse
  the tree in the order of the control-flow of the program that is
  represented by the term.

  This program makes use of <emphasis>dynamic rewrite
  rules</emphasis>, which are used to propagate context-sensitive
  information through a program. In this case, the context-sensitive
  information concerns the constant values of some variables in the
  program, which should be propagated to the uses of those variables.

  Dynamic rules will be explained in <xref
  linkend="stratego-dynamic-rules"/>; for now we are mainly concerned
  with the traversal strategy.

<screen>
module propconst
imports 
  liblib

signature
  constructors
    Var    : String -> Exp
    Plus   : Exp * Exp -> Exp
    Assign : String * Exp -> Stat
    If     : Exp * Stat * Stat -> Stat
    While  : Exp * Stat -> Stat
    
strategies

  propconst = <co xml:id='stratego-trav-propconst' />
    PropConst <co xml:id='stratego-trav-PropConst' />
    &lt;+ propconst-assign
    &lt;+ propconst-if
    &lt;+ propconst-while
    &lt;+ all(propconst); try(EvalBinOp) 

  EvalBinOp : <co xml:id='stratego-trav-propconst-evalbinop' />
    Plus(Int(i), Int(j)) -> Int(k) where &lt;addS>(i,j) => k

  EvalIf :
    If(Int("0"), s1, s2) -> s2

  EvalIf :
    If(Int(i), s1, s2) -> s1 where &lt;not(eq)>(i, "0")

  propconst-assign = <co xml:id='stratego-trav-propconst-assign' />
    Assign(?x, propconst => e)
    ; if &lt;is-value> e then
        rules( PropConst : Var(x) -> e )
      else
        rules( PropConst :- Var(x) )
      end

  propconst-if = <co xml:id='stratego-trav-propconst-if' />
    If(propconst, id, id)
    ; (EvalIf; propconst
       &lt;+ (If(id, propconst, id) /PropConst\ If(id,id,propconst)))

  propconst-while = <co xml:id='stratego-trav-propconst-while' />
    While(id,id)
    ; (/PropConst\* While(propconst, propconst))

  is-value = Int(id)
</screen>

</para>

</formalpara>

<para>

  The main strategy of the constant propagation transformation <xref
  linkend='stratego-trav-propconst' />, follows the pattern described
  above; a number of special case alternatives followed by a generic
  traversal alternative. The special cases are defined in their own
  definitions. 

  Generic traversal is followed by the constant folding rule
  <code>EvalBinOp</code> <xref
  linkend='stratego-trav-propconst-evalbinop' />.

</para>

<para>

  The first special case is an application of the dynamic rule
  <code>PropConst</code>, which replaces a constant valued variable by
  its constant value <xref linkend='stratego-trav-PropConst' />.

  This rule is defined by the second special case strategy,
  <code>propconst-assign</code> <xref
  linkend='stratego-trav-propconst-assign' />. It first traverses the
  right-hand side of an assignment with an <code>Assign</code>
  congruence operator, and a recursive call to
  <code>propconst</code>. Then, if the expression evaluated to a
  constant value, a new <code>PropConst</code> rule is
  defined. Otherwise, any old instance of <code>PropConst</code> for
  the left-hand side variable is undefined.

</para>

<para>

  The third special case for <code>If</code> uses congruence operators
  to order the application of <code>propconst</code> to its subterms
  <xref linkend='stratego-trav-propconst-if' />.  The first congruence
  applies <code>propconst</code> to the condition expression. Then an
  application of the rule <code>EvalIf</code> attempts to eliminate
  one of the branches of the statement, in case the condition
  evaluated to a constant value. If that is not possible the branches
  are visited by two more congruence operator applications joined by a
  dynamic rule intersection operator, which distributes the constant
  propagation rules over the branches and merges the rules afterwards,
  keeping only the consistent ones.

  Something similar happens in the case of <code>While</code>
  statements <xref linkend='stratego-trav-propconst-while' />.

  For details concerning dynamic rules, see <xref
  linkend="stratego-dynamic-rules"/>.

</para>

<para>

  To see what <code>propconst</code> achieves, consider the following
  abstract syntax tree (say in file <code>foo.prg</code>).

<screen>
Block([
  Assign("x", Int("1")),
  Assign("y", Int("42")),
  Assign("z", Plus(Var("x"), Var("y"))),
  If(Plux(Var("a"), Var("z")),
     Assign("b", Plus(Var("x"), Int("1"))),
     Block([
       Assign("z", Int("17")),
       Assign("b", Int("2"))
     ])),
  Assign("c", Plus(Var("b"), Plus(Var("z"), Var("y"))))
])
</screen>

  We import the module in the Stratego Shell, read the abstract syntax
  tree from file, and apply the <code>propconst</code> transformation
  to it:

<screen>
<prompt>stratego></prompt> import libstrategolib
<prompt>stratego></prompt> import propconst
<prompt>stratego></prompt> &lt;ReadFromFile> "foo.prg"
...
<prompt>stratego></prompt> propconst
Block([Assign("x",Int("1")),Assign("y",Int("42")),Assign("z",Int("43")),
If(Plux(Var("a"),Int("43")),Assign("b",Int("2")),Block([Assign("z",
Int("17")),Assign("b",Int("2"))])),Assign("c",Plus(Int("2"),Plus(
Var("z"),Int("42"))))])
</screen>

  Since the Stratego Shell does not (yet) pretty-print terms, the
  result is rather unreadable. We can remedy this by writing the
  result of the transformation to a file, and pretty-printing it on
  the regular command-line with <xref linkend="ref-pp-aterm"/>.

<screen>
<prompt>stratego></prompt> &lt;ReadFromFile> "foo.prg"
...
<prompt>stratego></prompt> propconst; &lt;WriteToTextFile> ("foo-pc.prg", &lt;id>)
...
<prompt>stratego></prompt> :quit
...
<prompt>$</prompt> pp-aterm -i foo-pc.prg
Block(
  [ Assign("x", Int("1"))
  , Assign("y", Int("42"))
  , Assign("z", Int("43"))
  , If(
      Plux(Var("a"), Int("43"))
    , Assign("b", Int("2"))
    , Block(
        [Assign("z", Int("17")), Assign("b", Int("2"))]
      )
    )
  , Assign(
      "c"
    , Plus(Int("2"), Plus(Var("z"), Int("42")))
    )
  ]
)
</screen>

  Compare the result to the original program and try to figure out
  what has happened and why that is correct. (Assuming the `usual'
  semantics for this type of imperative language.)

</para>

<formalpara>
  <title>Generic Strategies with Exceptional Cases</title>

<para>

  Patterns for mixing specific and generic traversal can be captured
  in parameterized strategies such as the following.  They are
  parameterized with the usual transformation parameter <code>s</code>
  and with a higher-order strategy operator <code>stop</code>, which
  implements the special cases.

<screen>
topdownS(s, stop: (a -> a) * b -> b) =
  rec x(s; (stop(x) &lt;+ all(x)))

bottomupS(s, stop: (a -> a) * b -> b) =
  rec x((stop(x) &lt;+ all(x)); s)

downupS(s, stop: (a -> a) * b -> b) =
  rec x(s; (stop(x) &lt;+ all(x)); s)

downupS(s1, s2, stop: (a -> a) * b -> b) =
  rec x(s1; (stop(x) &lt;+ all(x)); s2)
</screen>

  While normal strategies (parameters) are functions from terms to
  terms, the <code>stop</code> parameter is a function from strategies
  to strategies. Such exceptions to the default have to be declared
  explicitly using a type annotation.

  Note that the <code>bottomupS</code> strategy is slightly different
  from the pattern of the <code>propconst</code> strategy; instead of
  applying <code>s</code> <emphasis>only</emphasis> after the generic
  traversal case, it is here applied in all cases.

</para>

</formalpara>

<para>

  However, the added value of these strategies is not very high. The
  payoff in the use of generic strategies is provided by the basic
  generic traversal operators, which provide generic behaviour for all
  constructors. The <code>stop</code> callback can make it harder to
  understand the control-flow structure of a strategy; use with care
  and don't overdo it.

</para>

<note>
  <title>Separate rules and strategies</title>

  <para>
    
    While it is possible to construct your own strategies by mixing
    traversal elements and rules, in general, it is a good idea to try
    to get a clean separation between pure rewrite rules and a
    (simple) strategy that applies them.

  </para>

</note>

</section>

<section>
  <title>Partial Traversals</title>

<para>

  The full traversals introduced above mostly visit all nodes in the
  tree. Now we consider traversals that visit only some of the nodes
  of a tree.

</para>

<para>

  The <code>oncet</code> and <code>oncebu</code> strategies apply the
  argument strategy <code>s</code> at one position in the tree. That
  is, application is tried at every node along the traversal until it
  succeeds.

<screen>
oncetd(s) = s &lt;+ one(oncetd(s))
oncebu(s) = one(oncebu(s)) &lt;+ s
</screen>

<!--screen>
oncetd-skip(s, skip: (a -> a) * b -> b) =
  s &lt;+ skip(oncetd-skip(s, skip)) 
    &lt;+ one(oncetd-skip(s, skip))
</screen-->

  The <code>sometd</code> and <code>somebu</code> strategies are
  variations on <code>oncet</code> and <code>oncebu</code> that apply
  <code>s</code> at least once at some positions, but possibly many
  times. As soon as one is found, searching is stopped, i.e., in the
  top-down case searching in subtrees is stopped, in bottom-up case,
  searching in upper spine is stopped.

<screen>
sometd(s) = s &lt;+ some(sometd(s))
somebu(s) = some(somebu(s)) &lt;+ s
</screen>

 Similar strategies that find as many applications as possible, but at
 least one, can be built using <code>some</code>:

<screen>
manybu(s) = rec x(some(x); try(s) &lt;+ s)
manytd(s) = rec x(s; all(try(x)) &lt;+ some(x))
</screen>

<screen>
somedownup(s) = rec x(s; all(x); try(s) &lt;+ some(x); try(s))
</screen>

</para>

<para>

  The <code>alltd(s)</code> strategy stops as soon as it has found a
  subterm to which <code>s</code> can be succesfully applied.

<screen>
  alltd(s) = s &lt;+ all(alltd(s))
</screen>

  If <code>s</code> does not succeed, the strategy is applied
  recursively at all direct subterms. This means that <code>s</code>
  is applied along a frontier of the subject term. This strategy is
  typically used in substitution operations in which subterms are
  replaced by other terms. For example, the strategy
  <code>alltd(?Var(x); !e)</code> replaces all occurrences of
  <code>Var(x)</code> by <code>e</code>.

  Note that <code>alltd(try(s))</code> is not a useful strategy.
  Since <code>try(s)</code> succeeds at the root of the term, no
  traversal is done.

</para>

<para>

  A typical application of <code>alltd</code> is the definition of
  local transformations, that only apply to some specific subterm.

<screen>
transformation =
  alltd(
    trigger-transformation
    ; innermost(A1 &lt;+ ... &lt;+ An) 
  )
</screen>

</para>

<para>

  Some relatives of <code>alltd</code> that add a strategy to apply on
  the way up.

<screen>
alldownup2(s1, s2) = rec x((s1 &lt;+ all(x)); s2)
alltd-fold(s1, s2) = rec x(s1 &lt;+ all(x); s2)
</screen>

</para>

<para>

  Finally, the following strategies select the
  <emphasis>leaves</emphasis> of a tree, where the determination of
  what is a leaf is upto a parameter strategy.

<screen>
leaves(s, is-leaf, skip: a * (a -> a) -> a) =
  rec x((is-leaf; s) &lt;+ skip(x) &lt;+ all(x))

leaves(s, is-leaf) =
  rec x((is-leaf; s) &lt;+ all(x))
</screen>

  </para>

</section>

<section>
  <title>Path (*)</title>

<para>

  A spine of a term is a chain of nodes from the root to some
  subterm. <code>spinetd</code> goes down one spine and applies
  <code>s</code> along the way to each node on the spine. The
  traversal stops when <code>s</code> fails for all children of a
  node.

<screen>
spinetd(s)  = s; try(one(spinetd(s)))
spinebu(s)  = try(one(spinebu(s))); s
spinetd'(s) = s; (one(spinetd'(s)) + all(fail))
spinebu'(s) = (one(spinebu'(s)) + all(fail)); s
</screen>

  Apply <code>s</code> everywhere along al spines where <code>s</code>
  applies.

<screen>
somespinetd(s) = rec x(s; try(some(x)))
somespinebu(s) = rec x(try(some(x)); s)
spinetd'(s)    = rec x(s; (one(x) + all(fail)))
spinebu'(s)    = rec x((one(x) + all(fail)); s)
</screen>

  While these strategies define the notion of applying along a spine,
  they are rarely used. In practice one would use more specific
  traversals with that determine which subterm to include in the
  search for a path.

</para>

<para>

  TODO: examples

</para>

</section>

<section>
  <title>Recursive Patterns (*)</title>

<para>

  TODO: format checking 

</para>
  
<para>

  TODO: matching of complex patterns

</para>
  
<para>

  TODO: contextual rules (local traversal)

</para>
  
</section>

<section>
  <title>Dynamic programming (*)</title>

<para>

  TODO (probably move to dynamic rules chapter)

</para>
  
</section>

</section>

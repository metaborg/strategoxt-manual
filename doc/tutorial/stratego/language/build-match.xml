<section
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Building and Matching Terms (*)</title>
    
  <para>

        Rules are not really atomic transformation actions. To see
        this, consider what happens when the rewrite rule
<screen>
  DAOL : And(Or(x, y), z) -> Or(And(x, z), And(y, z))
</screen>
        is applied.  First it matches the subject term against the
        pattern \texttt{And(Or(x, y), z)} in the left-hand side. This
        means that a substitution for the variables \texttt{x},
        \texttt{y}, and \texttt{z} is sought, that makes the pattern
        equal to the subject term. If the match fails, the rule
        fails. If the match succeeds, the pattern \texttt{Or(And(x,
        z), And(y, z))} on the right-hand side is instantiated with
        the bindings found during the match of the left-hand side. The
        instantiated term then replaces the original subject
        term. Furthermore, the rule limits the scope of the variables
        occurring in the rule. That is, the variables \texttt{x},
        \texttt{y}, \texttt{z} are local to this rule. After the rule
        is applied the bindings to these variables are invisible
        again.



    The atomic actions of program transformation in Stratego are
    building terms from patterns and matching terms against
    patterns.
  </para>

  <section xml:id="build">
    <title>Building terms</title>
    
    <para>

        The build operation \texttt{!p} replaces the subject term with
        the instantiation of the pattern~\texttt{p} using the bindings
        from the environment to the variables occurring in \texttt{p}.
        For example, the strategy \texttt{!Or(And(x, z), And(y, z))}
        replaces the subject term with the instantiation of
        \texttt{Or(And(x, z), And(y, z))} using bindings to variables
        \texttt{x}, \texttt{y} and \texttt{z}. 


      Building a term will replace the current term by the term that
      is build. The syntax for building a term is
      <code>!<replaceable>t</replaceable></code>, where
      <replaceable>t</replaceable> can be any term.
    </para>

    <screen>
<prompt>stratego></prompt> !Int("10")
Int("10")
<prompt>stratego></prompt> !Plus(Var("a"), Int("10"))
Plus(Var("a"), Int("10"))</screen>

    <para>
      It is possible to build terms with variables. We call this
      building a term pattern. A pattern is a term with
      <emphasis>meta-variables</emphasis>. The current term is
      replaced by an instantiation of pattern
      <replaceable>p</replaceable>.
    </para>

    <screen>
<prompt>stratego></prompt> :binding e
e is bound to Var("b")
<prompt>stratego></prompt> !Plus(Var("a"),e)
Plus(Var("a"),Var("b"))
<prompt>stratego></prompt> !e
Var("b")</screen>

  </section>

  <section xml:id="match">
    <title>Matching terms</title>

    <para>

        The match operation \texttt{?$p$} \index{match \texttt{?$p$}}
        matches the subject term against the term pattern
        \texttt{p}. This involves checking that the subject term
        corresponds to the pattern and binding the variables in
        \texttt{t} to the corresponding subterms of the subject term.
        For example, \texttt{?And(Or(x, y), z)} matches the subject
        term against the pattern \texttt{And(Or(x, y), z)} and binds
        the variables \texttt{x}, \texttt{y} and \texttt{z}.  Matching
        is defined formally using the following rules.  A strategy
        $\match(p)$ applies to a term $t$ if there is a substitution
        that extends the current environemnt $\env$ and makes $p$
        equal to term.  A match fails if there is no such
        substitution.

Syntax: ?t 

Match current term against term t 

Succeed if equal, fail if unequal 

    </para>

    <screen>
Plus(Var("a"),Int("3")) 
stratego> ?Plus(Var("a"),Int("3")) 
stratego> ?Plus(Int("3"),Var("b")) 
command failed
    </screen>


    <para>
      The match strategy <code>?<replaceable>x</replaceable></code>
      compares the current term (<replaceable>t</replaceable>) to
      variable <replaceable>x</replaceable>. It binds variable
      <replaceable>x</replaceable> to term
      <replaceable>t</replaceable> in the environment. A variable can
      only be bound once, or to the same term.
    </para>
  
    <screen>
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> ?e
<prompt>stratego></prompt> :binding e
e is bound to Plus(Var("a"),Int("3")) 
<prompt>stratego></prompt> !Int("17")
<prompt>stratego></prompt> ?e
command failed
</screen>

    <para>
      The match strategy <code>?<replaceable>p</replaceable></code>
      compares the current term to a pattern
      <replaceable>p</replaceable>. It will bind the variables the
      variables in pattern <replaceable>p</replaceable> in the
      environment. The wildcard <code>_</code> in a match will match
      any term.
    </para>

    <screen>
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> ?Plus(e,_)
<prompt>stratego></prompt> :binding e
e is bound to Var("a")
Plus(Var("a"),Int("3"))
</screen>

    <para>
      If a variable in a term pattern is already bound to a term, then
      the variable in the pattern will be replaced with this value. If
      variables in term are not yet bound, then these variables will
      be bound to the actual values in the current term to which the
      pattern is applied.
    </para>
  
    <para>
      Patterns may be non-linear. Multiple occurences of the same
      varaible can occur and each occurence matches the same term.
    </para>
    
    <screen>
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> ?Plus(e,e)
command failed
<prompt>stratego></prompt> !Plus(Var("a"),Var("a"))
<prompt>stratego></prompt> ?Plus(e,e)
<prompt>stratego></prompt> :binding e
e is bound to Var("a")
</screen>

  </section>

</section>
    

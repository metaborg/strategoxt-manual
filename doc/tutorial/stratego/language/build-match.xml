<chapter 
  xml:id="stratego-creating-and-analyzing-terms"
  xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Creating and Analyzing Terms</title>

<para>

  In previous chapters we have presented rewrite rules as basic
  transformation steps.

  However, rules are not really atomic transformation actions. To see
  this, consider what happens when the rewrite rule

<screen>
DAOL : And(Or(x, y), z) -> Or(And(x, z), And(y, z))
</screen>

  is applied.  First it matches the subject term against the pattern
  <code>And(Or(x, y), z)</code> in the left-hand side. This means that
  a substitution for the variables <code>x</code>, <code>y</code>, and
  <code>z</code> is sought, that makes the pattern equal to the
  subject term. If the match fails, the rule fails. If the match
  succeeds, the pattern <code>Or(And(x, z), And(y, z))</code> on the
  right-hand side is instantiated with the bindings found during the
  match of the left-hand side. The instantiated term then replaces the
  original subject term. Furthermore, the rule limits the scope of the
  variables occurring in the rule. That is, the variables
  <code>x</code>, <code>y</code>, <code>z</code> are local to this
  rule. After the rule is applied the bindings to these variables are
  invisible again.

</para>

<para>

  Thus, rather than considering rules as the atomic actions of
  transformation programs, Stratego provides their constituents, that
  is building terms from patterns and matching terms against patterns,
  as atomic actions, and makes these available to the programmer.

  In this chapter, you will learn these basic actions and their use in
  the composition of more complex operations such as various flavours
  of rewrite rules.

</para>

<section xml:id="build">
  <title>Building terms</title>
    
  <para>

    The build operation <code>!p</code> replaces the subject term with
    the instantiation of the pattern <code>p</code> using the bindings
    from the environment to the variables occurring in <code>p</code>.
    For example, the strategy <code>!Or(And(x, z), And(y, z))</code>
    replaces the subject term with the instantiation of
    <code>Or(And(x, z), And(y, z))</code> using bindings to variables
    <code>x</code>, <code>y</code> and <code>z</code>.

  </para>

<screen>
<prompt>stratego></prompt> !Int("10")
Int("10")
<prompt>stratego></prompt> !Plus(Var("a"), Int("10"))
Plus(Var("a"), Int("10"))
</screen>

  <para>
    
    It is possible to build terms with variables. We call this
    building a term pattern. A pattern is a term with
    <emphasis>meta-variables</emphasis>. The current term is replaced
    by an instantiation of pattern <replaceable>p</replaceable>.

  </para>

<screen>
<prompt>stratego></prompt> :binding e
e is bound to Var("b")
<prompt>stratego></prompt> !Plus(Var("a"),e)
Plus(Var("a"),Var("b"))
<prompt>stratego></prompt> !e
Var("b")
</screen>

</section>

<section xml:id="match">
  <title>Matching terms</title>

  <para>

    Pattern matching allows the analysis of terms. The simplest case
    is matching against a literal term.

    The match operation <code>?t</code> matches the subject term
    against the term <code>t</code>.

  </para>

<screen>
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> ?Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> ?Plus(Int("3"),Var("b"))
command failed
</screen>

  <para>

    Matching against a term <emphasis>pattern</emphasis> with
    variables binds those variables to (parts of) the current term.

    The match strategy <code>?<replaceable>x</replaceable></code>
    compares the current term (<replaceable>t</replaceable>) to
    variable <replaceable>x</replaceable>. It binds variable
    <replaceable>x</replaceable> to term <replaceable>t</replaceable>
    in the environment. A variable can only be bound once, or to the
    same term.
    
  </para>
  
<screen>
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> ?e
<prompt>stratego></prompt> :binding e
e is bound to Plus(Var("a"),Int("3")) 
<prompt>stratego></prompt> !Int("17")
<prompt>stratego></prompt> ?e
command failed
</screen>

  <para>

    The general case is matching against an arbitrary term pattern.

    The match strategy <code>?<replaceable>p</replaceable></code>
    compares the current term to a pattern
    <replaceable>p</replaceable>. It will add bindings for the
    variables in pattern <replaceable>p</replaceable> to the
    environment. The wildcard <code>_</code> in a match will match any
    term.

  </para>

<screen>
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> ?Plus(e,_)
<prompt>stratego></prompt> :binding e
e is bound to Var("a")
Plus(Var("a"),Int("3"))
</screen>

<para>
      
  Patterns may be non-linear. Multiple occurences of the same variable
  can occur and each occurence matches the same term.
    
<screen>
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> ?Plus(e,e)
command failed
<prompt>stratego></prompt> !Plus(Var("a"),Var("a"))
<prompt>stratego></prompt> ?Plus(e,e)
<prompt>stratego></prompt> :binding e
e is bound to Var("a")
</screen>

  Non-linear pattern matching is a way to test equality of terms. Indeed
  the equality predicates from the Stratego Library are defined using 
  non-linear pattern matching:

<screen>
equal = ?(x, x)
equal(|x) = ?x
</screen>
   
  The <code>equal</code> strategy tests whether the current term is a
  a pair of the same terms.

  The <code>equal(|x)</code> strategy tests whether the current term
  is equal to the argument term.

<screen>
<prompt>stratego></prompt> equal = ?(x, x)
<prompt>stratego></prompt> !("a", "a")
("a", "a")
<prompt>stratego></prompt> equal
("a", "a")
<prompt>stratego></prompt> !("a", "b")
("a", "b")
<prompt>stratego></prompt> equal
command failed

<prompt>stratego></prompt> equal(|x) = ?x
<prompt>stratego></prompt> !Foo(Bar())
Foo(Bar)
<prompt>stratego></prompt> equal(|Foo(Baz()))
command failed
<prompt>stratego></prompt> equal(|Foo(Bar()))
Foo(Bar)
</screen>

</para>

</section>
    
<section>
 <title>Implementing Rewrite Rules</title>

<para>
 
  Match and build are first-class citizens in Stratego, which means
  that they can be used and combined just like any other strategy
  expressions.

  In particular, we can implement rewrite rules using these
  operations, since a rewrite rule is basically a match followed by a
  build.

  For example, consider the following combination of match and build:

<screen>
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> ?Plus(e1, e2); !Plus(e2, e1)
Plus(Int("3"),Var("a"))
</screen>

  This combination first recognizes a term, binds variables to the
  pattern in the match, and then replaces the current term with the
  instantiation of the build pattern.

  Note that the variable bindings are propagated from the match to the
  build.

</para>

<para>

  Stratego provides syntactic sugar for various combinations of match
  and build. We'll explore these in the rest of this chapter.

</para>

<section>
  <title>Anonymous Rewrite Rule</title>

  <para>

    An <emphasis>anonymous rewrite rule</emphasis> <code>(p1 ->
    p2)</code> transforms a term matching <code>p1</code> into an
    instantiation of <code>p2</code>.

    Such a rule is equivalent to the sequence <code>?p1; !p2</code>.

  </para>

<screen>
Plus(Var("a"),Int("3")) 
<prompt>stratego></prompt> (Plus(e1, e2) -> Plus(e2, e1)) 
Plus(Int("3"),Var("a"))
</screen>

</section>

<section>
  <title>Term variable scope</title>

<para>

    Once a variable is bound it cannot be rebound to a different
    term. Thus, once we have applied an anonymous rule once, its
    variables are bound and the next time it is applied it only
    succeeds for the same term. For example, in the next session the
    second application of the rule fails, because <code>e2</code> is
    bound to <code>Int("3")</code> and does not match with
    <code>Var("b")</code>.

<screen>
<prompt>stratego></prompt> !Plus(Var("a"),Int("3"))
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> (Plus(e1,e2) -> Plus(e2,e1))
Plus(Int("3"),Var("a"))

<prompt>stratego></prompt> :binding e1
e1 is bound to Var("a")
<prompt>stratego></prompt> :binding e2
e2 is bound to Int("3")

<prompt>stratego></prompt> !Plus(Var("a"),Var("b"))
Plus(Var("a"),Var("b"))
<prompt>stratego></prompt> (Plus(e1,e2) -> Plus(e2,e1))
command failed
</screen>

    To use a variable name more than once Stratego provides
    <emphasis>term variable scope</emphasis>.

    A scope <code>{x1,...,xn : s}</code> locally undefines the
    variables <code>xi</code>. That is, the binding to a variable
    <code>xi</code> outside the scope is not visible inside it, nor is
    the binding to <code>xi</code> inside the scope visible outside
    it.

    For example, to continue the session above, if we wrap the
    anonymous swap rule in a scope for its variables, it can be
    applied multiple times.

<screen>
<prompt>stratego></prompt> !Plus(Var("a"),Int("3"))
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> {e3,e4 : (Plus(e3,e4) -&gt; Plus(e4,e3))}
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> :binding e3 
e3 is not bound to a term

<prompt>stratego></prompt> !Plus(Var("a"),Var("b"))
Plus(Var("a"),Var("b"))
<prompt>stratego></prompt> {e3,e4 : (Plus(e3,e4) -&gt; Plus(e4,e3))}
Plus(Var("b"),Var("a"))
</screen>

  Of course we can name such a scoped rule using a strategy definition, and
  then invoke it by its name:

<screen>
<prompt>stratego></prompt> SwapArgs = {e1,e2 : (Plus(e1,e2) -> Plus(e2,e1))}
<prompt>stratego></prompt> !Plus(Var("a"),Int("3"))
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> SwapArgs 
Plus(Int("3"),Var("a"))
</screen>

</para>

</section>

<section>
  <title>Implicit Variable Scope</title>

<para>

  When using match and build directly in a strategy definition, rather
  than in the form of a rule, the definition contains free variables.
  Strictly speaking such variables should be declared using a scope,
  that is one should write

<screen>
SwapArgs = {e1,e2 : (Plus(e1,e2) -> Plus(e2,e1))}
</screen>
	
  However, since declaring all variables at the top of a definition is
  destracting and does not add much to the definition, such a scope
  declaration can be left out. Thus, one can write

<screen>
SwapArgs = (Plus(e1,e2) -> Plus(e2,e1))
</screen>

  instead. The scope is automatically inserted by the compiler.  This
  implies that there is no global scope for term variables.  Of
  course, variables in inner scopes should be declared where
  necessary. In particular, note that variable scope is
  <emphasis>not</emphasis> inserted for strategy definitions in a let
  binding, such as

<screen>
let  SwapArgs = (Plus(e1,e2) -> Plus(e2,e1))  in ... end
</screen>

  While the variables are bound in the enclosing definition, they are
  not restricted to <code>SwapArgs</code> in this case, since in a let
  you typically want to use bindings to variables in the enclosing
  code.

</para>

</section>

<section>
  <title>Where</title>
	
<para>

  Often it is useful to apply a strategy only to test whether some
  property holds or to compute some auxiliary result. For this
  purpose, Stratego provides the <code>where(s)</code> combinator,
  which applies <code>s</code> to the current term, but restores that
  term afterwards. Any bindings to variables are kept, however.

<screen>
Plus(Int("14"),Int("3"))
<prompt>stratego></prompt> where(?Plus(Int(i),Int(j)); &lt;addS&gt;(i,j) =&gt; k)
Plus(Int("14"),Int("3"))
<prompt>stratego></prompt> :binding i 
i is bound to "14"
<prompt>stratego></prompt> :binding k 
k is bound to "17"
</screen>

  With the match and build constructs <code>where(s)</code> is in fact
  just syntactic sugar for <code>{x: ?x; s; !x}</code> with
  <code>x</code> a fresh variable not occurring in <code>s</code>.

  Thus, the current subject term is <emphasis>saved</emphasis> by
  binding it to a new variable <code>x</code>, then the strategy
  <code>s</code> is applied, and finally, the original term is
  <emphasis>restored</emphasis> by building <code>x</code>.

</para>

<para>

  We saw the use of <code>where</code> in the definition of
  <code>if-then-else</code> in <xref
  linkend="stratego-strategy-combinators"/>.

</para>

</section>
      
<section>
  <title>Conditional rewrite rule</title>
	
<para>
	
  A simple rewrite rule succeeds if the match of the left-hand side
  succeeds. Sometimes it is useful to place additional requirements on
  the application of a rule, or to compute some value for use in the
  right-hand side of the rule. This can be achieved with
  <emphasis>conditional rewrite rules</emphasis>.

  A conditional rule <code>L: p1 -> p2 where s</code> is a simple rule
  extended with an additional computation <code>s</code> which should
  succeed in order for the rule to apply. 

  The condition can be used to test properties of terms in the
  left-hand side, or to compute terms to be used in the right-hand
  side. The latter is done by binding such new terms to variables used
  in the right-hand side.

</para>

<para>

  For example, the <code>EvalPlus</code> rule in the following session
  uses a condition to compute the sum of <code>i</code> and
  <code>j</code>:

<screen>
<prompt>stratego></prompt> EvalPlus: Plus(Int(i),Int(j)) -&gt; Int(k) where !(i,j); addS; ?k
<prompt>stratego></prompt> !Plus(Int("14"),Int("3"))
Plus(Int("14"),Int("3"))
<prompt>stratego></prompt> EvalPlus
Int("17")
</screen>

   A conditional rule can be desugared similarly to an unconditional
   rule. That is, a conditional rule of the form

<screen>
L : p1 -> p2 where s
</screen>
  
   is syntactic sugar for

<screen>
L = ?p1; where(s); !p2
</screen>

  Thus, after the match with <code>p1</code> succeeds the strategy
  <code>s</code> is applied to the subject term. Only if the
  application of <code>s</code> succeeds, is the right-hand side
  <code>p2</code> built. Note that since <code>s</code> is applied
  within a <code>where</code>, the build <code>!p2</code> is applied
  to the original subject term; only <emphasis>variable
  bindings</emphasis> computed within <code>s</code> can be used in
  <code>p2</code>.

</para>

<para>

  As an example, consider the following constant folding rule, which
  reduces an addition of two integer constants to the constant
  obtained by computing the addition.

<screen>
EvalPlus : Add(Int(i),Int(j)) -> Int(k) where !(i,j); addS; ?k
</screen>
	
  The addition is computed by applying the primitive strategy
  <code>add</code> to the pair of integers <code>(i,j)</code> and
  matching the result against the variable <code>k</code>, which is
  then used in the right-hand side. This rule is desugared to

<screen>
EvalPlus = ?Add(Int(i),Int(j)); where(!(i,j); addS; ?k); !Int(k)
</screen>

</para>

</section>
    
<section>
   <title>Lambda Rules</title>
   
<para>

  Sometimes it is useful to define a rule anonymously within a
  strategy expression. The syntax for anonymous rules with scopes is a
  bit much since it requires enumerating all variables. 

  A `lambda' rule of the form 

<screen>
\ p1 -> p2 where s \
</screen> 
  
  is an anonymous rewrite rule for which the variables in the
  left-hand side <code>p1</code> are local to the rule, that is,
  it is equivalent to an expression of the form

<screen>
{x1,...,xn : (p1 -> p2 where s)}
</screen> 
 
  with <code>x1</code>,...,<code>xn</code> the variables of
  <code>p1</code>.

  This means that any variables used in <code>s</code> and
  <code>p2</code> that do <emphasis>not</emphasis> occur in
  <code>p1</code> are bound in the context of the rule.
                
</para>

<para>
	
  A typical example of the use of an anonymous rule is 

<screen>
<prompt>stratego></prompt> ![(1,2),(3,4),(5,6)]
[(1,2),(3,4),(5,6)]
<prompt>stratego></prompt> map(\ (x, y) -> x \ )
[1,3,5]
</screen>

</para>

</section>
   
</section>

<section>
   <title>Apply and Match</title>
   
<para>   
        
  One frequently occuring scenario is that of applying a strategy to a
  term and then matching the result against a pattern. This typically
  occurs in the condition of a rule. In the constant folding example
  above we saw this scenario:

<screen>
EvalPlus : Add(Int(i),Int(j)) -> Int(k) where !(i,j); addS; ?k
</screen>

  In the condition, first the term <code>(i,j)</code> is built, then
  the strategy <code>addS</code> is applied to it, and finally the
  result is matched against the pattern <code>k</code>.

</para>

<para>

  To improve the readability of such expressions, the following two
  constructs are provided. The operation <code> &lt;s> p</code>
  captures the notion of <emphasis>applying</emphasis> a strategy to a
  term, i.e., the scenario <code>!p; s</code>. The operation <code>s
  => p</code> capture the notion of applying a strategy to the current
  subject term and then matching the result against the pattern
  <code>p</code>, i.e., <code>s; ?p</code>.  The combined operation
  <code> &lt;s> p1 => p2</code> thus captures the notion of applying a
  strategy to a term <code>p1</code> and matching the result against
  <code>p2</code>, i.e, <code>!t1; s; ?t2</code>.  Using this notation
  we can improve the constant folding rule above as

<screen>
EvalPlus : Add(Int(i),Int(j)) -> Int(k) where &lt;add>(i,j) => k
</screen>

 </para>

<formalpara>
  <title>Applying Strategies in Build</title>

<para>

  Sometimes it useful to apply a strategy directly to a subterm of a
  pattern, for example in the right-hand side of a rule, instead of
  computing a value in a condition, binding the result to a variable,
  and then using the variable in the build pattern. The constant
  folding rule above, for example, could be further simplified by
  directly applying the addition in the right-hand side:

<screen>
EvalPlus : Add(Int(i),Int(j)) -> Int(&lt;add>(i,j))
</screen>
        
  This abbreviates the conditional rule above. 

  In general, a strategy application in a build pattern can always be
  expressed by computing the application before the build and binding
  the result to a new variable, which then replaces the application in
  the build pattern.

 </para>

</formalpara>

<para>

  Another example is the following definition of the
  <code>map(s)</code> strategy, which applies a strategy to each term
  in a list:

<screen>
map(s) : [] -> []
map(s) : [x | xs] -> [&lt;s> x | &lt;map(s)> xs]
</screen>

</para>

</section>

<section>
  <title>Wrap and Project</title>

<para>

  Term wrapping and projection are concise idioms for constructing
  terms that wrap the current term and for extracting subterms from
  the current term.

</para>
   
<section>
  <title>Term Wrap</title>

<para>   
    
  One often write rules of the form <code>\ x -> Foo(Bar(x))\</code>,
  i.e. wrapping a term pattern around the current term. Using rule
  syntax this is quite verbose. The syntactic abstraction of
  <emphasis>term wraps</emphasis>, allows the concise specification of
  such little transformations as <code>!Foo(Bar(&lt;id>))</code>. 

</para>

<para>

  In general, a term wrap is a build strategy <code>!p[&lt;s>]</code>
  containing one or more strategy applications <code>&lt;s></code>
  that are <emphasis>not applied to a term</emphasis>.

  When executing the the build operation, each occurrence of such a
  strategy application <code>&lt;s></code> is replaced with the term
  resulting from applying <code>s</code> to the current subject term,
  i.e., the one that is being replaced by the build.

  The following sessions illustrate some uses of term wraps:

<screen>
3
<prompt>stratego></prompt> !(&lt;id&gt;,&lt;id&gt;)
(3,3)
<prompt>stratego></prompt> !(&lt;Fst; inc&gt;,&lt;Snd&gt;)
(4,3)
<prompt>stratego></prompt> !"foobar"
"foobar"
<prompt>stratego></prompt> !Call(&lt;id&gt;, [])
Call("foobar", [])
<prompt>stratego></prompt> mod2 = &lt;mod>(&lt;id>,2)
<prompt>stratego></prompt> !6
6
<prompt>stratego></prompt> mod2
0
</screen>

</para>

<para>

  As should now be a common pattern, term projects are implemented by
  translation to a combination of match and build expressions.

  Thus, a term wrap <code>!p[&lt;s>]</code> is translated to a strategy
  expression

<screen>
{x: where(s => x); !p[x]}  
</screen>

  where <code>x</code> is a fresh variable not occurring in
  <code>s</code>.

  In other words, the strategy <code>s</code> is applied to the
  <emphasis>current subject term</emphasis>, i.e., the term to which
  the build is applied.

</para>

<para>

  As an example, the term wrap <code>!Foo(Bar(&lt;id>))</code> is
  desugared to the strategy 
<screen>
\{x: where(id => x); !Foo(Bar(x))}
</screen>

  which after simplification is equivalent to <code>\{x: ?x;
  !Foo(Bar(x))\</code>}, i.e., exactly the original lambda rule
  <code>\ x -> Foo(Bar(x))\</code>.

</para>

</section>
   
<section>
  <title>Term Project</title>

 <para>  
 
   Term projections are the match dual of term wraps. 

   Term projections can be used to <emphasis>project</emphasis> a
   subterm from a term pattern. For example, the expression
   <code>?And(&lt;id>,x)</code> matches terms of the form
   <code>And(t1,t2)</code> and reduces them to the first subterm
   <code>t1</code>. 

   Another example is the strategy

<screen>
map(?FunDec(&lt;id>,_,_))
</screen>

   which reduces a list of function declarations to a list of the
   names of the functions, i.e., the first arguments of the
   <code>FunDec</code> constructor.

   Here are some more examples:

<screen>
[1,2,3]
<prompt>stratego></prompt> ?[_|&lt;id&gt;]
[2,3]
<prompt>stratego></prompt> !Call("foobar", [])
Call("foobar", [])
<prompt>stratego></prompt> ?Call(&lt;id&gt;, [])
"foobar"
</screen>

   Term projections can also be used to apply additional constraints
   to subterms in a match pattern. For example, <code>?Call(x,
   &lt;?args; length => 3>)</code> matches only with function calls
   with three arguments.

</para>

<para>

   A match expression <code>?p[&lt;s>]</code> is desugared as

<screen>
{x: ?p[x]; &lt;s> x}
</screen>

   That is, after the pattern <code>p[x]</code> matches, it is reduced
   to the subterm bound to <code>x</code> to which <code>s</code> is
   applied. The result is also the result of the projection.

   When multiple projects are used within a match the outcome is
   undefined, i.e., the order in which the projects will be performed
   can not be counted on.

</para>

</section>

</section>

<section>
  <title>Summary</title>

<para>

  We have seen that Stratego makes the atomic actions of
  transformations, matching and building terms, available to Stratego
  programmers. A number of higher-level concepts, including rewrite
  rules, are implemented by translation to these basic actions.

</para>

</section>


</chapter>

<chapter
  xml:id="stratego-traversal-strategies"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Traversal Strategies</title>

<para>

  In <xref linkend="stratego-rewriting-strategies"/> we saw a number
  of idioms of strategic rewriting, which all involved <emphasis>tree
  traversal</emphasis>.

  In the previous chapters we saw how strategies can be used to
  control transformations and how rules can be broken down into the
  primitive actions match, build and scope.

  The missing ingredient are combinators for defining traversals.

 </para>

<para>

  There are many ways to traverse a tree. For example, a bottom-up
  traversal, visits the subterms of a node before it visits the node
  itself, while a top-down traversal visits nodes before it visits
  children. One-pass traversals traverse the tree one time, while
  fixed-point traversals, such as <code>innermost</code>, repeatedly
  traverse a term until a normal form is reached.

 </para>

<para>

  It is not desirable to provide built-in implementations for all
  traversals needed in transformations, since such a collection would
  necessarily be imcomplete.

  Rather we would like to define traversals in terms of the primitive
  ingredients of traversal.  For example, a top-down, one-pass
  traversal strategy will first visit a node, and then descend to the
  children of a node in order to <emphasis>recursively</emphasis>
  traverse all subterms.  Similarly, the bottom-up, fixed-point
  traversal strategy <emphasis>innermost</emphasis>, will first
  descend to the children of a node in order to
  <emphasis>recursively</emphasis> traverse all subterms, then visit
  the node itself, and possibly recursively reapply the strategy.

 </para>

<para>

   Traversal in Stratego is based on the observation that a full term
   traversal is a recursive closure of a one-step descent, that is, an
   operation that applies a strategy to one or more direct subterms of
   the subject term.

   By separating this one-step descent operator from recursion, and
   making it a first-class operation, many different traversals can be
   defined.

 </para>

<para>

  In this chapter we explore the ways in which Stratego supports the
  definition of <emphasis>traversal strategies</emphasis>.

  We start with explicitly programmed traversals using recursive
  traversal rules.

  Next, <emphasis>congruences operators</emphasis> provide a more
  concise notation for such data-type specific traversal rules.

  Finally, <emphasis>generic traversal operators</emphasis> support
  data type independent definitions of traversals, which can be reused
  for any data type.

  Given these basic mechanisms, we conclude with an an exploration of
  idioms for traversal and standard traversal strategies in the
  Stratego Library.

</para>

<section>
  <title>Traversal Rules</title>

<para>

   In <xref linkend="stratego-creating-and-analyzing-terms"/> we saw
   the following definition of the <code>map</code> strategy, which
   applies a strategy to each element of a list:

<screen>
map(s) : [] -> []
map(s) : [x | xs] -> [&lt;s> x | &lt;map(s)> xs]
</screen>

   The definition uses explicit recursive calls to the strategy in the
   right-hand side of the second rule.

   What <code>map</code> does is to <emphasis>traverse</emphasis> the
   list in order to apply the argument strategy to all elements.

   We can use the same technique to other term structures as well.

</para>

<para>

  We will explore the definition of traversals using the propositional
  formulae from <xref linkend="stratego-rewriting-strategies"/>, where
  we introduced the following rewrite rules:

<screen>
module prop-rules
imports libstrategolib prop
rules
  DefI : Impl(x, y)       -> Or(Not(x), y)
  DefE : Eq(x, y)         -> And(Impl(x, y), Impl(y, x))
  DN   : Not(Not(x))      -> x
  DMA  : Not(And(x, y))   -> Or(Not(x), Not(y))
  DMO  : Not(Or(x, y))    -> And(Not(x), Not(y))
  DAOL : And(Or(x, y), z) -> Or(And(x, z), And(y, z))
  DAOR : And(z, Or(x, y)) -> Or(And(z, x), And(z, y))
  DOAL : Or(And(x, y), z) -> And(Or(x, z), Or(y, z))
  DOAR : Or(z, And(x, y)) -> And(Or(z, x), Or(z, y))
</screen>

  In <xref linkend="stratego-rewriting-strategies"/> we saw how a
  functional style of rewriting could be encoded using extra
  constructors. In Stratego we can achieve a similar approach by using
  rule names, instead of extra constructors. Thus, one way to achieve
  normalization to disjunctive normal form, is the use of an
  explicitly programmed traversal, implemented using recursive rules,
  similarly to the <code>map</code> example above:

<screen>
module prop-dnf4
imports libstrategolib prop-rules
strategies
  main = io-wrap(dnf)
rules
  dnf : True       ->          True
  dnf : False      ->          False
  dnf : Atom(x)    ->          Atom(x)
  dnf : Not(x)     -> &lt;dnfred> Not (&lt;dnf>x)
  dnf : And(x, y)  -> &lt;dnfred> And (&lt;dnf>x, &lt;dnf>y)
  dnf : Or(x, y)   ->          Or  (&lt;dnf>x, &lt;dnf>y)  
  dnf : Impl(x, y) -> &lt;dnfred> Impl(&lt;dnf>x, &lt;dnf>y)
  dnf : Eq(x, y)   -> &lt;dnfred> Eq  (&lt;dnf>x, &lt;dnf>y)
strategies
  dnfred = try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DAOL &lt;+ DAOR); dnf)
</screen>

  The <code>dnf</code> rules recursively apply themselves to the
  direct subterms and then apply <code>dnfred</code> to actually apply
  the rewrite rules.

</para>

<para>

  We can reduce this program by abstracting over the base cases. Since
  there is no traversal into <code>True</code>, <code>False</code>,
  and <code>Atom</code>s, these rules can be be left out. 

<screen>
module prop-dnf5
imports libstrategolib prop-rules
strategies
  main = io-wrap(dnf)
rules
  dnft : Not(x)     -> &lt;dnfred> Not (&lt;dnf>x)
  dnft : And(x, y)  -> &lt;dnfred> And (&lt;dnf>x, &lt;dnf>y)
  dnft : Or(x, y)   ->          Or  (&lt;dnf>x, &lt;dnf>y)  
  dnft : Impl(x, y) -> &lt;dnfred> Impl(&lt;dnf>x, &lt;dnf>y)
  dnft : Eq(x, y)   -> &lt;dnfred> Eq  (&lt;dnf>x, &lt;dnf>y)
strategies
  dnf    = try(dnft)
  dnfred = try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DAOL &lt;+ DAOR); dnf)
</screen>

  The <code>dnf</code> strategy is now defined in terms of the
  <code>dnft</code> rules, which implement traversal over the
  constructors. By using <code>try(dnft)</code>, terms for which no
  traversal rule has been specified are not transformed.

</para>

<para>

  We can further simplify the definition by observing that the
  application of <code>dnfred</code> does not necessarily have to take
  place in the right-hand side of the traversal rules.

<screen>
module prop-dnf6
imports libstrategolib prop-rules
strategies
  main = io-wrap(dnf)
rules
  dnft : Not(x)     -> Not (&lt;dnf>x)
  dnft : And(x, y)  -> And (&lt;dnf>x, &lt;dnf>y)
  dnft : Or(x, y)   -> Or  (&lt;dnf>x, &lt;dnf>y)
  dnft : Impl(x, y) -> Impl(&lt;dnf>x, &lt;dnf>y)
  dnft : Eq(x, y)   -> Eq  (&lt;dnf>x, &lt;dnf>y)
strategies
  dnf    = try(dnft); dnfred
  dnfred = try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DAOL &lt;+ DAOR); dnf)
</screen>

  In this program <code>dnf</code> first calls <code>dnft</code> to
  transform the subterms of the subject term, and then calls
  <code>dnfred</code> to apply the transformation rules (and possibly
  a recursive invocation of <code>dnf</code>).

</para>

<para>

  The program above has two problems. First, the traversal behaviour
  is mostly uniform, so we would like to specify that more
  concisely. We will address that concern below. Second, the traversal
  is not reusable, for example, to define a conjunctive normal form
  transformation. This last concern can be addressed by factoring out
  the recursive call to <code>dnf</code> and making it a parameter of
  the traversal rules.

<screen>
module prop-dnf7
imports libstrategolib prop-rules
strategies
  main = io-wrap(dnf)
rules
  proptr(s) : Not(x)     -> Not (&lt;s>x)
  proptr(s) : And(x, y)  -> And (&lt;s>x, &lt;s>y)
  proptr(s) : Or(x, y)   -> Or  (&lt;s>x, &lt;s>y)  
  proptr(s) : Impl(x, y) -> Impl(&lt;s>x, &lt;s>y)
  proptr(s) : Eq(x, y)   -> Eq  (&lt;s>x, &lt;s>y)
strategies
  dnf    = try(proptr(dnf)); dnfred
  dnfred = try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DAOL &lt;+ DAOR); dnf)
  cnf    = try(proptr(cnf)); cnfred
  cnfred = try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DOAL &lt;+ DOAR); cnf)
</screen>

  Now the traversal rules are reusable and used in two different
  transformations, by instantiation with a call to the particular
  strategy in which they are used (<code>dnf</code> or
  <code>cnf</code>).

</para>

<para>

  But we can do better, and also make the
  <emphasis>composition</emphasis> of this strategy reusable.

<screen>
module prop-dnf8
imports libstrategolib prop-rules
strategies
  main = io-wrap(dnf)
rules
  proptr(s) : Not(x)     -> Not (&lt;s>x)
  proptr(s) : And(x, y)  -> And (&lt;s>x, &lt;s>y)
  proptr(s) : Or(x, y)   -> Or  (&lt;s>x, &lt;s>y)
  proptr(s) : Impl(x, y) -> Impl(&lt;s>x, &lt;s>y)
  proptr(s) : Eq(x, y)   -> Eq  (&lt;s>x, &lt;s>y)
strategies
  propbu(s) = proptr(propbu(s)); s
strategies
  dnf    = propbu(dnfred)
  dnfred = try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DAOL &lt;+ DAOR); dnf)
  cnf    = propbu(cnfred)
  cnfred = try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DOAL &lt;+ DOAR); cnf)
</screen>

  That is, the <code>propbu(s)</code> strategy defines a complete
  bottom-up traversal over propostion terms, applying the strategy
  <code>s</code> to a term after transforming its subterms. The
  strategy is completely independent of the <code>dnf</code> and
  <code>cnf</code> transformations, which instantiate the strategy
  using the <code>dnfred</code> and <code>cnfred</code> strategies.

</para>

<para>

  Come to think of it, <code>dnfred</code> and <code>cnfred</code> are
  somewhat useless now and can be inlined directly in the
  instantiation of the <code>propbu(s)</code> strategy:

<screen>
module prop-dnf9
imports libstrategolib prop-rules
strategies
  main = io-wrap(dnf)
rules
  proptr(s) : Not(x)     -> Not (&lt;s>x)
  proptr(s) : And(x, y)  -> And (&lt;s>x, &lt;s>y)
  proptr(s) : Or(x, y)   -> Or  (&lt;s>x, &lt;s>y)
  proptr(s) : Impl(x, y) -> Impl(&lt;s>x, &lt;s>y)
  proptr(s) : Eq(x, y)   -> Eq  (&lt;s>x, &lt;s>y)
strategies
  propbu(s) = proptr(propbu(s)); s
strategies
  dnf = propbu(try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DAOL &lt;+ DAOR); dnf))
  cnf = propbu(try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DOAL &lt;+ DOAR); cnf))
</screen>

  Now we have defined a <emphasis>transformation
  independent</emphasis> traversal strategy that is
  <emphasis>specific</emphasis> for proposition terms.

</para>

<para>

  Next we consider cheaper ways for defining the traversal rules, and
  then ways to get completely rid of them.

</para>

</section>

<section>
  <title>Congruence Operators</title>

<para>

  The definition of the traversal rules above frequently occurs in the
  definition of transformation strategies.

  Congruence operators provide a convenient abbreviation of precisely
  this operation.

  A congruence operator applies a strategy to each direct subterm of a
  specific constructor. 

  For each n-ary constructor c declared in a signature, there is a
  corresponding <emphasis>congruence operator</emphasis> <code>c(s1 ,
  ..., sn)</code>, which applies to terms of the form <code>c(t1 ,
  ..., tn)</code> by applying the argument strategies to the
  corresponding argument terms.
    
  A congruence fails if the application of one the argument strategies
  fails or if constructor of the operator and that of the term do not
  match.

</para>

<formalpara>
  <title>Example</title>

<para>

  For example, consider the following signature of expressions:

<screen>
module expressions
signature
  sorts Exp
  constructors
    Int   : String -> Exp
    Var   : String -> Exp
    Plus  : Exp * Exp -> Exp
    Times : Exp * Exp -> Exp
</screen>

  The following Stratego Shell session applies the congruence
  operators <code>Plus</code> and <code>Times</code> to a term:

<screen>
<prompt>stratego></prompt> import expressions
<prompt>stratego></prompt> !Plus(Int("14"),Int("3"))
Plus(Int("14"),Int("3"))
<prompt>stratego></prompt> Plus(!Var("a"), id)
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> Times(id, !Int("42"))
command failed
</screen>

  The first application shows how a congruence transforms a specific
  subterm, that is the strategy applied can be different for each
  subterm. The second application shows that a congruence only
  succeeds for terms constructed with the same constructor.

</para>

</formalpara>

<para>

  The <code>import</code> at the start of the session is necessary to
  declare the constructors used; the definitions of congruences are
  derived from constructor declarations.

  Forgetting this import would lead to a complaint about an undeclared
  operator:

<screen>
<prompt>stratego></prompt> !Plus(Int("14"),Int("3"))
Plus(Int("14"),Int("3"))
<prompt>stratego></prompt> Plus(!Var("a"), id)
operator Plus/(2,0) not defined
command failed
</screen>

</para>

<formalpara>
   <title>Defining Traversals with Congruences</title>

<para>

  Now we return to our <code>dnf</code>/<code>cnf</code> example, to
  see how congruence operators can help in their implementation.

  Since congruence operators basically define a one-step traversal for
  a specific constructor, they capture the traversal rules defined above.
  That is, a traversal rule such as 

<screen>
proptr(s) : And(x, y) -> And(&lt;s>x, &lt;s>y)
</screen>

  can be written by the congruence <code>And(s,s)</code>.

  Applying this to the <code>prop-dnf</code> program we can replace
  the traversal rules by congruences as follows:

<screen>
module prop-dnf10
imports libstrategolib prop-rules
strategies
  main = io-wrap(dnf)
strategies
  proptr(s) = Not(s) &lt;+ And(s, s) &lt;+ Or(s, s) &lt;+ Impl(s, s) &lt;+ Eq(s, s)
  propbu(s) = proptr(propbu(s)); s
strategies
  dnf = propbu(try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DAOL &lt;+ DAOR); dnf))
  cnf = propbu(try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DOAL &lt;+ DOAR); cnf))
</screen>

  Observe how the five traversal rules have been reduced to five
  congruences which fit on a single line.

</para>

</formalpara>

<formalpara>
  <title>Traversing Tuples and Lists</title>

<para>
      
  Congruences can also be applied to tuples,
  <code>(s1,s2,...,sn)</code>, and lists,
  <code>[s1,s2,...,sn]</code>. A special list congruence is
  <code>[]</code> which 'visits' the empty list.

  As an example, consider again the definition of <code>map(s)</code>
  using recursive traversal rules:
    
<screen>
map(s) : [] -> []
map(s) : [x | xs] -> [&lt;s> x | &lt;map(s)> xs]
</screen>

  Using list congruences we can define this strategy as:

<screen>
map(s) = [] &lt;+ [s | map(s)]
</screen>

  The <code>[]</code> congruence matches an empty list. The <code>[s |
  map(s)]</code> congruence matches a non-empty list, and applies
  <code>s</code> to the head of the list and <code>map(s)</code> to
  the tail. Thus, <code>map(s)</code> applies <code>s</code> to each
  element of a list:

<screen>
<prompt>stratego></prompt> import libstratego-lib
<prompt>stratego></prompt> ![1,2,3]
[1,2,3]
<prompt>stratego></prompt> map(inc)
[2,3,4]
</screen>

  Note that <code>map(s)</code> only succeeds if <code>s</code>
  succeeds for each element of the list.

  The <code>fetch</code> and <code>filter</code> strategies are
  variations on <code>map</code> that use the failure of
  <code>s</code> to list elements.

<screen>
fetch(s) = [s | id] &lt;+ [id | fetch(s)]
</screen>

  The <code>fetch</code> strategy traverses a list
  <emphasis>until</emphasis> it finds a element for which
  <code>s</code> succeeds and then stops. That element is the only one
  that is transformed.

<screen>
filter(s) = [] + ([s | filter(s)] &lt;+ ?[ |&lt;id>]; filter(s))
</screen>

  The <code>filter</code> strategy applies <code>s</code> to each
  element of a list, but only keeps the elements for which it
  succeeds.

<screen>
<prompt>stratego></prompt> import libstratego-lib
<prompt>stratego></prompt> even = where(&lt;eq>(&lt;mod>(&lt;id>,2),0))
<prompt>stratego></prompt> ![1,2,3,4,5,6,7,8]
[1,2,3,4,5,6,7,8]
<prompt>stratego></prompt> filter(even)
[2,4,6,8]
</screen>

</para>

</formalpara>

<formalpara>
   <title>Format Checking</title>

<para>
      
  Another application of congruences is in the definition of format
  checkers. A format checker describes a subset of a term language
  using a recursive pattern. This can be used to verify input or
  output of a transformation, and for documentation purposes. Format
  checkers defined with congruences can check subsets of signatures or
  regular tree grammars. 

  For example, the subset of terms of a signature in a some normal form.

</para>

</formalpara>

<para>

  As an example, consider checking the output of the <code>dnf</code>
  and <code>cnf</code> transformations.
    
<screen>
conj(s) = And(conj(s), conj(s)) &lt;+ s
disj(s) = Or (disj(s), disj(s)) &lt;+ s

// Conjunctive normal form
conj-nf = conj(disj(Not(Atom(x)) &lt;+ Atom(x)))

// Disjunctive normal form
disj-nf = disj(conj(Not(Atom(x)) &lt;+ Atom(x)))
</screen>

  The strategies <code>conj(s)</code> and <code>disj(s)</code> check
  that the subject term is a conjunct or a disjunct, respectively,
  with terms satisfying <code>s</code> at the leaves.

  The strategies <code>conj-nf</code> and <code>disj-nf</code> check
  that the subject term is in conjunctive or disjunctive normal form,
  respectively.

</para>

</section>

<section>
  <title>Generic Traversal</title>
      
<para>
    
  Using congruence operators we constructed a generic,
  i.e. transformation independent, bottom-up traversal for proposition
  terms. The same can be done for other data types. However, since the
  sets of constructors of abstract syntax trees of typical programming
  languages can be quite large, this may still amount to quite a bit
  of work that is not reusable <emphasis>across</emphasis> data types;
  even though a strategy such as `bottom-up traversal', is basically
  data-type independent.

  Thus, Stratego provides generic traversal by means of several
  <emphasis>generic one-step descent operators</emphasis>. The
  operator <code>all</code>, applies a strategy to all direct
  subterms.  The operator <code>one</code>, applies a strategy to one
  direct subterm, and the operator <code>some</code>, applies a
  strategy to as many direct subterms as possible, and at least one.
      
</para>

<section>

  <title>Visiting All Subterms</title>

<para>
	
  The <code>all(s)</code> strategy transforms a constructor
  application by applying the parameter strategy <code>s</code> to
  each direct subterm. An application of <code>all(s)</code> fails if
  the application to one of the subterms fails.

  The following example shows how <code>all</code> (1) applies to any
  term, and (2) applies its argument strategy uniformly to all direct
  subterms. That is, it is not possible to do something special for a
  particular subterm (that's what congruences are for).
  
</para>

<screen>
<prompt>stratego></prompt> !Plus(Int("14"),Int("3"))
Plus(Int("14"),Int("3"))
<prompt>stratego></prompt> all(!Var("a"))
Plus(Var("a"),Var("a"))
<prompt>stratego></prompt> !Times(Var("b"),Int("3"))
Times(Var("b"),Int("3"))
<prompt>stratego></prompt> all(!Var("z"))
Times(Var("z"),Var("z"))
</screen>

<para>

  The <code>all(s)</code> operator is really the ultimate replacement
  for the traversal rules that we saw above. Instead of specifying a
  rule or congruence for each constructor, the single application of
  the <code>all</code> operator takes care of traversing all
  constructors.

  Thus, we can replace the <code>propbu</code> strategy by a
  completely generic definition of bottom-up traversal. Consider again
  the last definition of <code>propbu</code>:
	
<screen>
proptr(s) = Not(s) &lt;+ And(s, s) &lt;+ Or(s, s) &lt;+ Impl(s, s) &lt;+ Eq(s, s)
propbu(s) = proptr(propbu(s)); s
</screen>

  The role of <code>proptr(s)</code> in this definition can be
  replaced by <code>all(s)</code>, since that achieves exactly the
  same, namely applying <code>s</code> to the direct subterms of
  constructors:

<screen>
propbu(s) = all(propbu(s)); s
</screen>

  However, the strategy now is completely generic, i.e. independent of
  the particular structure it is applied to. In the Stratego Library
  this strategy is called <code>bottomup(s)</code>, and defined as
  follows:

<screen>
bottomup(s) = all(bottomup(s)); s
</screen>

  It first recursively transforms the subterms of the subject term and
  then applies <code>s</code> to the result.

  Using this definition, the normalization of propositions now reduces
  to the following module, which is only concerned with the selection
  and composition of rewrite rules:

<screen>
module prop-dnf11
imports libstrategolib prop-rules
strategies
  main = io-wrap(dnf)
strategies
  dnf = bottomup(try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DAOL &lt;+ DAOR); dnf))
  cnf = bottomup(try(DN &lt;+ (DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DOAL &lt;+ DOAR); cnf))
</screen>

  In fact, these definitions still contain a reusable pattern. With a
  little squinting we see that the definitions match the following
  pattern:

<screen>
dnf = bottomup(try(dnf-rules; dnf))
cnf = bottomup(try(cnf-rules; cnf))
</screen>

  In which we can recognize the definition of
  <emphasis>innermost</emphasis> reduction, which the Stratego Library
  defines as:

<screen>
innermost(s) = bottomup(try(s; innermost(s)))
</screen>

  The <code>innermost</code> strategy performs a bottom-up traversal
  of a term. After transforming the subterms of a term it tries to
  apply the transformation <code>s</code>. If succesful the result is
  recursively transformed with an application of
  <code>innermost</code>.

  This brings us to the final form for the proposition normalizations:

<screen>
module prop-dnf12
imports libstrategolib prop-rules
strategies
  main = io-wrap(dnf)
strategies
  dnf = innermost(DN &lt;+ DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DAOL &lt;+ DAOR)
  cnf = innermost(DN &lt;+ DefI &lt;+ DefE &lt;+ DMA &lt;+ DMO &lt;+ DOAL &lt;+ DOAR)
</screen>

  Different transformations can be achieved by using a selection of
  rules and a strategy, which is generic, yet defined in Stratego
  itself using strategy combinators.

</para>

<para>



</para>

</section>

<section>
  <title>Visiting One Subterm</title>

<para>

  The <code>one(s)</code> strategy transforms a constructor
  application by applying the parameter strategy <code>s</code> to
  exactly one direct subterm. An application of <code>one(s)</code>
  fails if the application to all of the subterms fails.
 
  The following Stratego Shell session illustrates the behaviour of
  the combinator:
  
<screen>
<prompt>stratego></prompt> !Plus(Int("14"),Int("3"))
Plus(Int("14"),Int("3"))
<prompt>stratego></prompt> one(!Var("a"))
Plus(Var("a"),Int("3"))
<prompt>stratego></prompt> one(\ Int(x) -> Int(&lt;addS>(x,"1")) \ )
Plus(Var("a"),Int("4"))
<prompt>stratego></prompt> one(?Plus(_,_))
command failed
</screen>

</para>

<para>

  A frequently used application of <code>one</code> is the
  <code>oncetd(s)</code> traversal, which performs a left to right
  depth first search/transformation that stops as soon as
  <code>s</code> has been successfuly applied.

<screen>
oncetd(s) = s &lt;+ one(oncetd(s))
</screen>

  Thus, <code>s</code> is first applied to the root of the subject
  term. If that fails, its direct subterms are searched one by one
  (from left to right), with a recursive call to
  <code>oncetd(s)</code>.

</para>

<para>

  An application of <code>oncetd</code> is the
  <code>contains(|t)</code> strategy, which checks whether the subject
  term contains a subterm that is equal to <code>t</code>.
    
<screen>
contains(|t) = oncetd(?t)
</screen>

  Through the depth first search of <code>oncetd</code>, either an
  occurrence of <code>t</code> is found, or all subterms are verified
  to be unequal to <code>t</code>.

</para>

<para>

  Here are some other one-pass traversals using the <code>one</code>
  combinator:

<screen>
oncebu(s)  = one(oncebu(s)) &lt;+ s
spinetd(s) = s; try(one(spinetd(s)))
spinebu(s) = try(one(spinebu(s))); s
</screen>

  Exercise: figure out what these strategies do.

</para>

<para>

  Here are some fixe-point traversals, i.e., traversals that apply
  their argument transformation exhaustively to the subject term.

<screen>
reduce(s)     = repeat(rec x(one(x) + s)) 
outermost(s)  = repeat(oncetd(s)) 
innermostI(s) = repeat(oncebu(s))
</screen>

  The difference is the subterm selection strategy. Exercise: create
  rewrite rules and terms that demonstrate the differences between
  these strategies.

</para>

</section>

<section>
  <title>Visiting Some Subterms</title>

<para>
	
  The <code>some(s)</code> strategy transforms a constructor
  application by applying the parameter strategy <code>s</code> to as
  many direct subterms as possible and at least one. An application of
  <code>some(s)</code> fails if the application to all of the subterms
  fails.

</para>

<para>

  Some one-pass traversals based on <code>some</code>:

<screen>
sometd(s) = s &lt;+ some(sometd(s)) 
somebu(s) = some(somebu(s)) &lt;+ s
</screen>

  A fixed-point traversal with <code>some</code>:

<screen>
reduce-par(s) = repeat(rec x(some(x) + s))
</screen>

</para>

</section>

</section>

<xi:include href="traversal-library.xml"/>

<section>
  <title>Summary</title>

<para>

  We have seen that tree traversals can be defined in several ways. 

  Recursive traversal rules allow finegrained specification of a
  traversal, but usually require too much boilerplate code.

  Congruence operators provide syntactic sugar for traversal rules
  that apply a strategy to each direct subterm of a term.

  The generic traversal operators <code>all</code>, <code>one</code>,
  and <code>some</code> allow consise, data-type independent
  implementation of traversals.

  A host of traversal strategies can be obtained by a combination of
  the strategy combinators from the previous chapters with these
  traversal operators.

</para>

</section>

</chapter>

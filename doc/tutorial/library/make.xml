<chapter xml:id="stratego-building"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">
  
  <title>Building and Deploying Stratego Programs (*)</title>
  
  <para>
    The Stratego build system is based on the GNU Autotools, that is
    to say, <command>automake</command>, <command>autoconf</command> and
    <command>libtool</command>. In addition, Stratego provides a
    tool called <command>autoxt</command>. If you are familiar with the 
    Autotools, setting up a project for Stratego should be rather easy. If
    this is unfamiliar ground to you, don't fear. We will walk through it
    slowly in this chapter, but a full treatise is beyond the scope of this
    tutorial.
  </para>

  <section>
    <title>Setting up your Project</title>
    
    <para>
      After creating your project directory, let's call it 
      <filename>ogetarts</filename>, the first thing you should do
      is populate it with the basic build system files, namely
      <filename>configure.ac</filename>, <filename>project.spec.in</filename>,
      <filename>bootstrap</filename> and <filename>Makefile.am</filename>.
      Additionally, you may want to add <filename>ChangeLog</filename>,
      <filename>AUTHORS</filename>, <filename>NEWS</filename> and
      <filename>README</filename>, but these are not essential.
    </para>

    <para>
      For a normal Stratego project, with XTC components and some stand-alone
      applications, we suggest the project layout given below (directories end
      in <filename>/</filename>). We will discuss the all the components of
      this hierarchy in turn.
    </para>
    
<screen>
ogetarts/
  bootstrap
  configure.ac
  Makefile.am
  syn/
      Makefile.am
  sig/
      Makefile.am
  src/
      Makefile.am      
  src/xtc/
          Makefile.am
  src/lib/
          Makefile.am
  test/
  doc/
</screen>

    <para>
      The build system is kickstarted by the <filename>bootstrap</filename>
      script. This script is responsible for generating a 
      <filename>configure</filename> script. When run, the
      <filename>configure</filename> script will autodetect the
      Stratego compiler and other tools required to build your project.
	  The concept of generation is very central to autotool-based build
	  systems. The <filename>configure</filename> script is generated
	  from a <filename>configure.ac</filename> declaration by the
      <command>autoreconf</command> tool. The 
      <filename>Makefile</filename>s are generated from
      <filename>Makefile.in</filename> files by the
      <filename>configure</filename> script, and
      <filename>Makefile.in</filename> files are generated from
      <filename>Makefile.am</filename> files by
      <command>automake</command>. Simple, huh? Generally, the
      idea is that complicated scripts and makefiles can be generated
      from high-level declarations using tools. Let's start with
      the <filename>bootstrap</filename> script.
    </para>
    
<screen><xi:include href="config/bootstrap.txt" parse="text"/></screen>

  <para>
    The <filename>bootstrap</filename> script should be an
    <command>sh</command> (or <command>bash</command>) shell script that
    takes care of running <command>autoxt</command> and
    <command>autoreconf</command>, as shown above. Note that we
    rely on resonably recent versions of <command>autoconf</command> and
    <command>automake</command>. Unfortunatley, ensuring that the correct
    version of these tools is executed is distribution-specific, hence
    the <code>if</code>-statements above.
  </para>
  
  
  <para>
    Assume we are in a palindromic mood and want to name our project
    Ogetarts. The following file will then provide a reasonable starting
    point for the <filename>configure.ac</filename> file.
  </para>

<screen><xi:include href="config/configure-ac.txt" parse="text"/></screen>
  
  <para>
    Most of this is standard boilerplate. The important lines are
    <code>XT_PKG_ATERM</code>, <code>XT_PKG_SDF</code> and
    <code>XT_PKG_STRATEGOXT</code>. These are actually macro invocations
    which will extend to shell script code that looks for the ATerm
    library, the SDF tools and Stratego/XT, respectively. At the end,
    the invocation of the <code>AC_CONFIG_FILES</code> macro lists other
    important files of the build system, particularly the
    <filename>Makefile</filename>s. We must provide these, but remember
    that these are generated from <filename>.in</filename> files
    which in turn come from <filename>.am</filename> files. Hence, we
    need to provide some <filename>Makefile.am</filename> files. The
    <filename>Makefile.am</filename> for the root of the project
    should look like:
  </para>
  
<screen><xi:include href="config/src-makefile-am.txt" parse="text"/></screen>

  <para>
    Again, most of this is boilerplate. The important point here is
    that <code>SUBDIRS = src</code> will eventually result in rules 
    which <command>make</command> to delve into the <filename>src/</filename>
    directory. We will explain below how the
    <filename>Makefile.am</filename> for source directories should
    look like. Let's finish up the root build system first, closing
    with the <filename>ogetarts.spec.in</filename> file.
  </para>
  
<screen><xi:include href="config/spec-in.txt" parse="text"/></screen>
  
  <para>
    This file is not strictly necessary. It's a so-called
    <filename>.spec</filename>-file, which is a package descriptor for
    rpm-based distributions. When you provide it, the Stratego/XT build
    system can automatically make a <filename>.rpm</filename> package
    file for your project.
  </para>  
  
  <para>
    The content of the <filename>Makefile.am</filename> files depends
    on whether you are building stand-alone Stratego applications, 
    XTC components or a Stratego library. We will discuss each variant
    separately, but you are of course free to mix several of these
    in your project, like we do in this project: In
    <filename>src/lib</filename> lives the library parts of Ogetarts,
    and in <filename>src/xtc</filename> live the XTC components.
  </para>
  </section>
  
  <section>
    <title>Building Stand-alone Applications</title>

    <para>
      Building parse tables
    </para>

<screen><xi:include href="config/syn-makefile-am.txt" parse="text"/></screen>

    <para>
      Building signatures
    </para>

<screen><xi:include href="config/sig-makefile-am.txt" parse="text"/></screen>
    
    <para>
      Building Stratego programs; <code>bin_PROGRAMS</code> in 
      <filename>Makefile.am</filename>.
    </para>

<screen><xi:include href="config/src2-makefile-am.txt" parse="text"/></screen>
    
  </section>
  
  <section>
    <title>Building XTC components</title>
    
    <para>
    </para>
    
<screen><xi:include href="config/xtc-makefile-am.txt" parse="text"/></screen>

  </section>
  
  <section>
     <title>Building Your Own library (*)</title>
     
     <para>Organizing your Library</para>
     <para>Supporing Separate Compilation</para>
     <para>Building and Using Shared Libraries</para>
     
  </section>
  
</chapter>

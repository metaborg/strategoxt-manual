<chapter xml:id="stratego-building"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">
  
  <title>Building and Deploying Stratego Programs (*)</title>
  
  <para>
    The Stratego build system is based on the GNU Autotools, that is
    to say, <command>automake</command>, <command>autoconf</command> and
    <command>libtool</command>. In addition, Stratego provides a
    tool called <command>autoxt</command>. If you are familiar with the 
    Autotools, setting up a project for Stratego should be rather easy. If
    this is unfamiliar ground to you, don't fear. We will walk through it
    slowly in this chapter, but a full treatise is beyond the scope of this
    tutorial.
  </para>

  <section>
    <title>Setting up your Project</title>
    
    <para>
      After creating your project directory, let's call it 
      <filename>ogetarts</filename>, the first thing you should do
      is populate it with the basic build system files, namely
      <filename>configure.ac</filename>, <filename>project.spec.in</filename>,
      <filename>bootstrap</filename> and <filename>Makefile.am</filename>.
      Additionally, you may want to add <filename>ChangeLog</filename>,
      <filename>AUTHORS</filename>, <filename>NEWS</filename> and
      <filename>README</filename>, but these are not essential.
    </para>

    <para>
      For a normal Stratego project, with XTC components and some stand-alone
      applications, we suggest the project layout given below (directories end
      in <filename>/</filename>). We will discuss the all the components of
      this hierarchy in turn.
    </para>
    
<screen>
ogetarts/
  bootstrap
  configure.ac
  Makefile.am
  syn/
      Makefile.am
  sig/
      Makefile.am
  src/
      Makefile.am      
  src/xtc/
          Makefile.am
  src/lib/
          Makefile.am
  test/
  doc/
</screen>

    <para>
      The build system is kickstarted by the <filename>bootstrap</filename>
      script. This script is responsible for generating a 
      <filename>configure</filename> script. When run, the
      <filename>configure</filename> script will autodetect the
      Stratego compiler and other tools required to build your project.
	  The concept of generation is very central to autotool-based build
	  systems. The <filename>configure</filename> script is generated
	  from a <filename>configure.ac</filename> declaration by the
      <command>autoreconf</command> tool. The 
      <filename>Makefile</filename>s are generated from
      <filename>Makefile.in</filename> files by the
      <filename>configure</filename> script, and
      <filename>Makefile.in</filename> files are generated from
      <filename>Makefile.am</filename> files by
      <command>automake</command>. Simple, huh? Generally, the
      idea is that complicated scripts and makefiles can be generated
      from high-level declarations using tools. Let's start with
      the <filename>bootstrap</filename> script.
    </para>
    
<screen><xi:include href="config/bootstrap.txt" parse="text"/></screen>

  <para>
    The <filename>bootstrap</filename> script should be an
    <command>sh</command> (or <command>bash</command>) shell script that
    takes care of running <command>autoxt</command> and
    <command>autoreconf</command>, as shown above. Note that we
    rely on resonably recent versions of <command>autoconf</command> and
    <command>automake</command>. Unfortunatley, ensuring that the correct
    version of these tools is executed is distribution-specific, hence
    the <code>if</code>-statements above.
  </para>
  
  
  <para>
    Assume we are in a palindromic mood and want to name our project
    Ogetarts. The following file will then provide a reasonable starting
    point for the <filename>configure.ac</filename> file.
  </para>

<screen><xi:include href="config/configure-ac.txt" parse="text"/></screen>
  
  <para>
    Most of this is standard boilerplate. The important lines are
    <code>XT_PKG_ATERM</code>, <code>XT_PKG_SDF</code> and
    <code>XT_PKG_STRATEGOXT</code>. These are actually macro invocations
    which will extend to shell script code that looks for the ATerm
    library, the SDF tools and Stratego/XT, respectively. These macros
    are provided by the <command>autoxt</command> tool. It provides
    the following macros.
    
  </para>

  <variablelist>
    <varlistentry>
      <term><code>XT_USE_XT_PACKAGES</code></term>
      <listitem>
       <para>
         Adds configuration options to configure the package with the location
         of the ATerm library, SDF and StrategoXT.
       </para>
     </listitem>
   </varlistentry>
   <varlistentry>
     <term><code>XT_PKG_ATERM</code></term>
     <listitem>
       <para>
         Checks if the ATerm library is installed at the specified prefix of the
         ATerm library.
       </para>
     </listitem>
   </varlistentry>
   <varlistentry>
     <term><code>XT_PKG_SDF</code></term>
     <listitem>
       <para>
         Checks if the SDF packages are installed at the specified prefix of SDF.
       </para>
     </listitem>
   </varlistentry>
   <varlistentry>
     <term><code>XT_PKG_STRATEGOXT</code></term>
     <listitem>
       <para>
         Checks if StrategoXT is installed at the specified prefix of StrategoXT.
       </para>
     </listitem>
   </varlistentry>
   <varlistentry>
     <term><code>XT_TERM_DEFINE</code></term>
     <listitem>
       <para>
         Defines some Stratego strategies that will return the values (as strings) of
         various Autoconf variables: <code>PACKAGE_NAME_TERM()</code>,
         <code>PACKAGE_TARNAME_TERM()</code>,
         <code>PACKAGE_VERSION_TERM()</code>,
         <code>PACKAGE_BUGREPORT_TERM()</code>,
         and <code>SVN_REVISION_TERM()</code>.
         These strategies can be used in any Stratego program in this package.
         Checks if StrategoXT is installed at the specified prefix of StrategoXT.
       </para>
     </listitem>
   </varlistentry>
   <varlistentry>
     <term><code>XT_PRE_RELEASE</code></term>
     <listitem>
       <para>
         Adds the suffix <code>pre${SVN_REVISION}</code> to the
         <code>PACKAGE_VERSION</code> and <code>VERSION</code> variables. This is a
         naming convention for unstable packages that we are using in our release
         management system.
       </para>
     </listitem>
   </varlistentry>

  </variablelist>

  <para>
    At the end of the <filename>configure.ac</filename> above, the invocation
     of the <code>AC_CONFIG_FILES</code> macro lists other
    important files of the build system, particularly the
    <filename>Makefile</filename>s. We must provide these, but remember
    that these are generated from <filename>.in</filename> files
    which in turn come from <filename>.am</filename> files. Hence, we
    need to provide some <filename>Makefile.am</filename> files. The
    <filename>Makefile.am</filename> for the root of the project
    should look like:
  </para>
  
<screen><xi:include href="config/src-makefile-am.txt" parse="text"/></screen>

  <para>
    Again, most of this is boilerplate. The important point here is
    that <code>SUBDIRS = src</code> will eventually result in rules 
    which <command>make</command> to delve into the <filename>src/</filename>
    directory. We will explain below how the
    <filename>Makefile.am</filename> for source directories should
    look like. Let's finish up the root build system first, closing
    with the <filename>ogetarts.spec.in</filename> file.
  </para>
  
<screen><xi:include href="config/spec-in.txt" parse="text"/></screen>
  
  <para>
    This file is not strictly necessary. It's a so-called
    <filename>.spec</filename>-file, which is a package descriptor for
    rpm-based distributions. When you provide it, the Stratego/XT build
    system can automatically make a <filename>.rpm</filename> package
    file for your project.
  </para>  
  
  <para>
    The content of the <filename>Makefile.am</filename> files depends
    on whether you are building stand-alone Stratego applications, 
    XTC components or a Stratego library. We will discuss each variant
    separately, but you are of course free to mix several of these
    in your project, like we do in this project: In
    <filename>src/lib</filename> lives the library parts of Ogetarts,
    and in <filename>src/xtc</filename> live the XTC components.
  </para>
  </section>
  
  <section>
    <title>Building Stand-alone Applications</title>

    <para>
      Building parse tables
    </para>

<screen><xi:include href="config/syn-makefile-am.txt" parse="text"/></screen>

    <para>
      Building signatures
    </para>

<screen><xi:include href="config/sig-makefile-am.txt" parse="text"/></screen>
    
    <para>
      Building Stratego programs; <code>bin_PROGRAMS</code> in 
      <filename>Makefile.am</filename>.
    </para>

<screen><xi:include href="config/src2-makefile-am.txt" parse="text"/></screen>
    
  </section>
  
  <section>
    <title>Building XTC components</title>
    
    <para>
      <code>io-wrap</code>
    </para>
    
<screen><xi:include href="config/xtc-makefile-am.txt" parse="text"/></screen>

  </section>
  
  <section>
     <title>Building Your Own library (*)</title>
     
     <para>Organizing your Library</para>
     <para>Supporing Separate Compilation</para>
     <para>Building and Using Shared Libraries</para>
     
  </section>
  
  <section>
    <title>AutoXT</title>
    
<screen>
Auto XT
Stratego -- Strategies for Program Transformation
The autoxt package provides Autoconf and Automake support for packages constructed with the XT toolset. The package provides the autoxt tool which should be run as part of the Autoconf/Automake bootstrapping process, prior to running autoconf. A typical bootstrap script looks like:

#! /bin/sh

autoxt
autoreconf -if

The toplevel Makefile.am should declare:


Autoconf

Autoxt installs a set of m4 macros autoxt.m4 with support for package configuration switches. By just including the macro call XT_USE_XT_PACKAGES a configure.ac file can be parameterized with switches for all the StrategoXT packages:

AC_INIT([java-front],[0.6],[stratego-bugs@cs.uu.nl])
AM_INIT_AUTOMAKE

XT_USE_XT_PACKAGES
XT_PKG_ATERM
XT_PKG_SDF
XT_PKG_STRATEGOXT

AC_PROG_CC
AC_PROG_INSTALL
AC_CONFIG_FILES([Makefile syn/Makefile])
AC_OUTPUT

Available Macros


Automake

Furthermore, autoxt installs Makefile.xt, a collection of automake rules for compiling Stratego programs and applying other XT tools, such as signature generation. Using this makefile, a makefile reduces to a declaration of programs to be compiled. The makefile automatically takes care of distributing the generated C code. The specification will only be compiled when it is newer than the C code. This means that packages using autoxt can be built using only the Stratego Run-Time System (srts).

include $(top_srcdir)/Makefile.xt
include $(wildcard *.dep)

bin_PROGRAMS    = xtc
pkgdata_DATA    = xtc-lib.rtree xtc-rep.rtree xtc-proc.rtree
SCFLAGS         = --main $*
STRINCLUDES     = -I $(XTC)/share/xtc
EXTRA_DIST      = $(pkgdata_DATA) $(wildcard *.str) $(wildcard *.meta)
CLEANFILES      = $(wildcard *.dep)
BOOTCLEANFILES  = xtc.c

Explanation of the example

    * include $(top_srcdir)/Makefile.xt
      Instructs the Stratego compiler to compile the Stratego files.

    * include $(wildcard *.dep)
      The Stratego compiler generates .dep files which contain information about file dependencies. When these .dep files are included a rebuild is forced when a dependent file changes.

    * bin_PROGRAMS
      Specifies the resulting binaries from the compilation.

    * pkgdata_DATA
      Are the files that will be placed in $prefix/share/pkg, see: How to Use Separate Compilation

    * SCFLAGS
      Contains compiler flags passed to the Stratego compiler.

    * STRINCLUDES
      Are the additional includes necessary for a succesful compilation.

    * EXTRA_DIST
      Specifies which auxilary files have to be included in the distribution.

    * CLEANFILES
      Deletes these files when the make clean command is issued.

    * BOOTCLEANFILES
      In addition to files specified in CLEANFILES, deletes these files when the make bootclean command is issued.

See also:

    * How to Use Separate Compilation
</screen>

  
  </section>
</chapter>

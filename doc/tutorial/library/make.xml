<chapter xml:id="library-building"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude">
  
  <title>Building and Deploying Stratego Programs</title>
  
  <para>
    The Stratego build system is based on the GNU Autotools, that is
    to say, <command>automake</command>, <command>autoconf</command> and
    <command>libtool</command>. In addition, Stratego provides a
    tool called <command>autoxt</command>. If you are familiar with the 
    Autotools, setting up a project for Stratego should be rather easy. If
    this is unfamiliar ground to you, don't fear. We will walk through it
    slowly in this chapter, but a full treatise is beyond the scope of this
    tutorial.
  </para>

  <section>
    <title>Setting up your Project</title>
    
    <para>
      After creating your project directory, let's call it 
      <filename>ogetarts</filename>, the first thing you should do
      is populate it with the basic build system files, namely
      <filename>configure.ac</filename>, <filename>project.spec.in</filename>,
      <filename>bootstrap</filename> and <filename>Makefile.am</filename>.
      Additionally, you may want to add <filename>ChangeLog</filename>,
      <filename>AUTHORS</filename>, <filename>NEWS</filename> and
      <filename>README</filename>, but these are not essential.
    </para>

    <para>
      For a normal Stratego project, with XTC components and some stand-alone
      applications, we suggest the project layout given below (directories end
      in <filename>/</filename>). We will discuss the all the components of
      this hierarchy in turn.
    </para>
    
<screen>
ogetarts/
  bootstrap
  configure.ac
  Makefile.am
  syn/
      Makefile.am
  sig/
      Makefile.am
  src/
      Makefile.am      
  src/xtc/
          Makefile.am
  src/lib/
          Makefile.am
  test/
  doc/
</screen>

    <para>
      The build system is kickstarted by the <filename>bootstrap</filename>
      script. This script is responsible for generating a 
      <filename>configure</filename> script. When run, the
      <filename>configure</filename> script will autodetect the
      Stratego compiler and other tools required to build your project.
	  The concept of generation is very central to autotool-based build
	  systems. The <filename>configure</filename> script is generated
	  from a <filename>configure.ac</filename> declaration by the
      <command>autoreconf</command> tool. The 
      <filename>Makefile</filename>s are generated from
      <filename>Makefile.in</filename> files by the
      <filename>configure</filename> script, and
      <filename>Makefile.in</filename> files are generated from
      <filename>Makefile.am</filename> files by
      <command>automake</command>. Simple, huh? Generally, the
      idea is that complicated scripts and makefiles can be generated
      from high-level declarations using tools. Let's start with
      the <filename>bootstrap</filename> script.
    </para>
    
<screen><xi:include href="config/bootstrap.txt" parse="text"/></screen>

  <para>
    The <filename>bootstrap</filename> script should be an
    <command>sh</command> (or <command>bash</command>) shell script
    that takes care of running <command>autoxt</command> and
    <command>autoreconf</command>, as shown above. Note that we rely
    on reasonably recent versions of <command>autoconf</command> and
    <command>automake</command>. Unfortunately, ensuring that the
    correct version of these tools is executed is
    distribution-specific, hence the <code>if</code>-statements above.
  </para>
  
  
  <para>
    Assume we are in a palindromic mood and want to name our project
    Ogetarts. The following file will then provide a reasonable starting
    point for the <filename>configure.ac</filename> file.
  </para>

<screen><xi:include href="config/configure-ac.txt" parse="text"/></screen>
  
  <para>
    Most of this is standard boilerplate. The important line is
    <code>XT_USE_XT_PACKAGES</code> which is a macro invocation that
    will extend to shell script code that looks for the ATerm library,
    the SDF tools and Stratego/XT, respectively. These macros are
    provided by the <command>autoxt</command> tool, via a macro file
    called <filename>autoxt.m4</filename>. It provides the following
    macros.
  </para>

  <variablelist>
    <varlistentry>
      <term><code>XT_USE_XT_PACKAGES</code></term>
      <listitem>
       <para>
         Adds configuration options to configure the package with the location
         of the ATerm library, SDF and StrategoXT.
       </para>
     </listitem>
   </varlistentry>
   <varlistentry>
     <term><code>XT_PRE_RELEASE</code></term>
     <listitem>
       <para>
         Adds the suffix <code>pre${SVN_REVISION}</code> to the
         <code>PACKAGE_VERSION</code> and <code>VERSION</code> variables. This is a
         naming convention for unstable packages that we are using in our release
         management system.
       </para>
     </listitem>
   </varlistentry>

  </variablelist>

  <para>
    At the end of the <filename>configure.ac</filename> above, the invocation
     of the <code>AC_CONFIG_FILES</code> macro lists other
    important files of the build system, particularly the
    <filename>Makefile</filename>s. We must provide these, but remember
    that these are generated from <filename>.in</filename> files
    which in turn come from <filename>.am</filename> files. Hence, we
    need to provide some <filename>Makefile.am</filename> files. The
    <filename>Makefile.am</filename> for the root of the project
    should look like:
  </para>
  
<screen><xi:include href="config/src-makefile-am.txt" parse="text"/></screen>

  <para>
    Again, most of this is boilerplate. The important point here is
    that <code>SUBDIRS = src</code> will eventually result in rules 
    which <command>make</command> to delve into the <filename>src/</filename>
    directory. We will explain below how the
    <filename>Makefile.am</filename> for source directories should
    look like. Let's finish up the root build system first, closing
    with the <filename>ogetarts.spec.in</filename> file.
  </para>
<screen><xi:include href="config/spec-in.txt" parse="text"/></screen>
  
  <para>
    This file is not strictly necessary. It's a so-called
    <filename>.spec</filename>-file, which is a package descriptor for
    rpm-based distributions. When you provide it, the Stratego/XT build
    system can automatically make a <filename>.rpm</filename> package
    file for your project.
  </para>  
  
  <para>
    The content of the <filename>Makefile.am</filename> files depends
    on whether you are building stand-alone Stratego applications, 
    XTC components or a Stratego library. We will discuss each variant
    separately, but you are of course free to mix several of these
    in your project, like we do in this project: In
    <filename>src/lib</filename> lives the library parts of Ogetarts,
    and in <filename>src/xtc</filename> live the XTC components.
  </para>
  </section>
  
  <section>
    <title>Building Stand-alone Applications</title>

    <para>
      In <xref linkend="running-stratego-programs"/>, we showed how to
      compile stand-alone Stratego programs using the <command>strc</command>
      compiler. This process is automated by the build system, provided you
      supply a suitable <filename>Makefile.am</filename>. Take the 
      one provided below as a starting point.
    </para>

<screen><xi:include href="config/src2-makefile-am.txt" parse="text"/></screen>
    
    <para>
      This file should be placed in <filename>src/prg/</filename>. The
      following list explains the various parts occurring in the file.
    </para>


  <variablelist>
    <varlistentry>
      <term>include $(top_srcdir)/Makefile.xt</term>
      <listitem>
        <para>
          Instructs the Stratego compiler to compile the Stratego files.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>include $(wildcard *.dep)</term>
      <listitem>
        <para>
          The Stratego compiler generates <filename>.dep</filename> files which
          contain information about module dependencies. When these
          <filename>.dep</filename> files are included, a rebuild
          is forced when a dependent file changes.
        </para>
      </listitem>
    </varlistentry>
    
    <varlistentry>
      <term>bin_PROGRAMS</term>
      <listitem>
        <para>
          A list of stand-alone Stratego programs that should be compiled. For
          each entry, a corresponding <filename>.str</filename> file must
          exist.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>libexec_PROGRAMS</term>
      <listitem>
        <para>
          A list of XTC components to compiler. For each entry, a corresponding
          <filename>.str</filename> file must exist.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>pkgdata_DATA</term>
      <listitem>
        <para>
          A list of files that will be placed in
          <filename>$prefix/share/pkg</filename>. This typically includes
          parse tables, regular tree grammars, signatures and source code
          for libraries. Including signatures and source code with your
          program is useful when you want other projects to extend and
          compile against yours.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>STRCFLAGS</term>
      <listitem>
        <para>
          Contains compiler flags passed to the Stratego compiler. A
          typical flags is <code>--main</code>. It is recommended that
          include files are passed via the <code>STRINCLUDES</code>
          variable.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>STRINCLUDES</term>
      <listitem>
        <para>
          A list of additional includes necessary for a succesful compilation,
          on the form <code>-I &lt;dir></code>. They will be passed unchanged
          to the <command>strc</command> compiler.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>EXTRA_DIST</term>
      <listitem>
        <para>
          Specifies which auxilary files have to be included in the distribution,
          when doing a <code>make install</code>.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>CLEANDIST</term>
      <listitem>
        <para>
          Files to be deletes these files when the <code>make clean</code>
          command is issued.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>BOOTCLEANFILES</term>
      <listitem>
        <para>
          Files to be deleted when <code>make bootclean</code> is issued. In
          addtion, the files specified in <code>CLEANFILES</code> will also
          be deleted.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    As we can see from the list above, the <code>bin_PROGRAMS</code>
    is a list of the stand-alone programs that should be compiled in
    this directory. For each program, a corresponding
    <filename>.str</filename> must exist, in this case, a
    <filename>ogetarts.str</filename> file. For each program the
    compiler will be passed the <code>LDADD</code>,
    <code>STRINCLUDES</code> and <code>STRCFLAGS</code> variables. The
    <code>LDADD</code> variable is used to add additional shared
    libraries that should be linked as part of the compilation
    process.  <code>STRINCLUDES</code> and <code>STRCFLAGS</code> were
    explained above.
  </para>
  
  <para>
    <command>autoxt</command> installs
    <filename>Makefile.xt</filename>, a collection of Automake rules
    for compiling Stratego programs and applying other XT tools, such
    as signature generation. Using this makefile, a makefile reduces
    to a declaration of programs to be compiled. The makefile
    automatically takes care of distributing the generated C code. The
    specification will only be compiled when it is newer than the C
    code. This means that packages using <command>autoxt</command> can
    be built using only the Stratego Run-Time System (srts).
  </para>

  </section>
  
  <section>
    <title>Building Parse Tables</title>

    <para>
      In <xref linkend="tutorial-sdf"/> we introduced you to the Syntax
      Definition Formalism for specifying grammars, and showed you how
      to use <command>pack-sdf</command> and <command>sdf2table</command>
      to construct parse tables out of these definitions. Not surprisingly,
      the build system is equipped to do this for you. Consider the
      <filename>Makefile.am</filename> provided below.
    </para>
    
<screen><xi:include href="config/syn-makefile-am.txt" parse="text"/></screen>

    <para>
      This file should be placed in <filename>syn/</filename>. 
      The important declaration in this file is <code>sdfdata_DATA</code>. 
      This declaration states which files are requested as part of the build
      process. They will be installed as part of a <code>make install</code>.
      For convenience, we have split them into <filename>.def</filename>
      and <filename>.tbl</filename> files, in the <code>DEFS</code> and
      <code>TBLS</code> declaration, respectively. The build system
      knows how to generate <filename>.def</filename> files from
      <filename>.sdf</filename> using <command>pack-sdf</command>,
      and <filename>.tbl</filename> files from <filename>.def</filename>
      files using <command>sdf2table</command>.
    </para>
    
  </section>
  
  <section>
    <title>Building Signatures</title>

    <para>
      The grammar declaration (Syntax Definition Formalism) can also be
      used to derive Stratego signatures and regular tree grammars. The
      input for the tools are the <filename>.def</filename> files
      constructed above, as the following <filename>Makefile.am</filename>
      shows.
    </para>

<screen><xi:include href="config/sig-makefile-am.txt" parse="text"/></screen>

    <para>
      This file should be placed as <filename>sig/Makefile.am</filename>.
      The <code>sdfdata_DATA</code> declaration is the important part. It
      tells the build system to build a Stratego signature 
      (<filename>Ogetarts.str</filename>) and a regular tree grammar
      (<filename>Ogetarts.rtg</filename>) from the
      <filename>Ogetarts.def</filename>. A minor trick is employed: The
      <filename>Ogetarts.def</filename> is symlinked from the
      <filename>syn/</filename> directory, hence it is important that the
      <filename>syn/</filename> is built before the
      <filename>sig/</filename> directory. We already took care to say
      this in the root <filename>Makefile.am</filename>.
    </para>
    
  </section>
  
  <section>
    <title>Building XTC components</title>
    
    <para>
      <xref linkend="tutorial-xt"/> of this tutorial discusses the XTC
      component architecture for Stratego. These components live in a
      repository, where they must be registered (i.e. deployed) before
      they can be used. The Stratego build system will take care of
      all these details for you, if you let it. The easiest way to
      delegate this responsibility to the build system is by using
      the <filename>Makefile.am</filename> file provided here.
    </para>
    
<screen><xi:include href="config/xtc-makefile-am.txt" parse="text"/></screen>

    <para>
      This <filename>Makefile.am</filename> should be placed in your
      <filename>src/xtc/</filename> directory. As we can see, it
      is mostly like the <filename>Makefile.am</filename> we use for
      building stand-alone Stratego programs. The only difference
      is using <code>libexec_PROGRAMS</code> for XTC components
      instead of <code>bin_PROGRAMS</code>.
    </para>
    
    <para>
      The <filename>Makefile</filename> generated from this
      <filename>Makefile.am</filename> will register all the
      XTC components listed in <code>libexec_PROGRAMS</code>
      when you run <code>make install</code>.
    </para>
  </section>
  
  <section>
     <title>Building Your Own library</title>
     
     <para>
       The Stratego/XT build system allows you to freely organize the source
       files of your project, but we recommend that you follow some conventions
       in the way the directories are organized. The base directory of your
       library should be in <filename>src/lib/</filename>. Each
       <filename>.str</filename> file placed inside this directory becomes a
       module. For sufficiently large projects, it is recommended that you
       further organize your modules into subdirectories inside
       <filename>lib/</filename>. Each such subdirectory becomes a package. 
    </para>
    
    <para>
       Importing modules and packages in Stratego is done using the
       <code>imports</code> statement. Using <code>imports</code>, you
       specify which module from which package to import. See <xref 
       linkend="running-stratego-programs"/> for an introduction to modules.
       You can import all modules from one package in one single declaration.
       There is a direct mapping between the directory name and the package
       name, and also between file and module names. Consider the following
       code snippet:
    </para>
           
<screen>
imports
  ogetarts/core
  ogetarts/extensions/- 
</screen>    

    <para>
      The declaration <code>ogetarts/core</code> states
      that we want to import the module <code>core</code>
      from the package <code>ogetarts</code>. This
      tells the Stratego compiler to look for the file
      <filename>core.str</filename> inside the 
      <filename>ogetarts/</filename> directory. The line
      <code>ogetarts/extensions/-</code> will import all
      modules in the <code>ogetarts/extensions</code>
      package, that is, all <filename>.str</filename> files
      inside the <filename>ogetarts/extensions/</filename>
      directory. On disk, we will have the following layout:
    </para>

<screen>
src/
    lib/
        ogetarts/
                 core.str
        extensions/
                 ext1.str
                 ext2.str
                 ...
</screen>

   <para>
     So how does the compiler know where to search for the
     packages (directories)? This is specified by the
     <option>-I</option> option to <command>strc</command>. In
     our case, we specify <filename>src/lib/</filename> as the
     basepath for our library. All module and package references
     are looked up from there. For programs using several libraries
     installed at different locations, multiple base directories
     should be specified, each with the <option>-I</option> option.
   </para>
   
  <formalpara>
    <title>Supporing Separate Compilation</title>

    <para>
       The build system can be told to create a separate library from
       your source (<filename>.str</filename>) files. This is done using
       <command>libtool</command>, which takes care of creating both static
       and shared libraries. On most platforms, the linker prefers shared
       libraries over static libraries, given the choice. This means that
       linking to your Stratego library will be done dynamically, unless
       you or your library user take steps to enable static linking.
    </para>
  </formalpara>

  <para>
    In cases where you want to compile all of the library code into
    one dynamic (or static) library, you must provide a toplevel
    module that imports all of the library. Let this be the file
    <filename>lib/ogetarts.str</filename>. The code below is what
    goes into your <filename>Makefile.am</filename> for you
    library:
  </para>
  
<screen>
  include $(top_srcdir)/Makefile.xt

  lib_LTLIBRARIES = libogetarts.la 
  pkgdata_DATA    = libogetarts.rtree

  libogetarts_la_SOURCES  = libogetarts.c
  libogetarts_la_LDFLAGS  = -avoid-version -no-undefined
  libogetarts_la_CPPFLAGS = $(STRATEGO_LIB_CFLAGS) $(STRATEGO_RUNTIME_CFLAGS) $(ATERM_CFLAGS)
  libogetarts_la_LIBADD   = $(STRATEGO_LIB_LIBS) $(STRATEGO_RUNTIME_LIBS) $(ATERM_LIBS)

  libmod.c : 
      $(STRC)/bin/strc -c --library -i ./src/lib/ogetarts.str -o libogetarts.rtree $(STRINCLUDES)
</screen>
     
  <para>
    If you prefer static over dynamic libraries, you can enforce static
    linking by passing the <code>-static</code> option to the
    <command>configure</command> of your package via the
    <code>LDFLAGS</code> variable: 
  </para>     

<screen>
<prompt>$</prompt> ./configure ... LDFLAGS=-static
</screen>

  </section>

<section>
  <title>Summary</title>
  
  <para>
    In this chapter we learned how to organize Stratego/XT projects, and 
    how to set up the Stratego/XT build system. We saw how the build system,
    which is based on <command>automake</command> and
    <command>autoconf</command>, is used to generate many of the artifacts
    from the syntax definition, such as parse tables and signatures, in
    the way we discussed in <xref linkend="tutorial-xt"/> . We also learned
    how to make stand-alone programs, libraries and XT components from
    Stratego source code, and how modules and packages relate to files and
    directories.
  </para>
  
  <para>
    More detail can be found by looking at the manual pages for the build
    tools, such as <xref linkend="ref-autoxt"/>, 
    <xref linkend="ref-strc"/>, <xref linkend="ref-sdf2table"/>,
    <xref linkend="ref-sdf2rtg"/> and <xref linkend="ref-xtc"/>. The
    detailed examples from the
    <link linkend="examples">Stratego/XT Examples</link> tutorial contain
    working build systems that can serve as a starting point.
  </para>
  
</section>

</chapter>

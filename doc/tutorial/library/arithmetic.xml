<chapter
   xml:id="library-arithmetic"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">
   
   <title>Arithmetic Operations</title>
   
   <section>
     <title>Basic Operations</title>
 
     <para>
       Stratego does not have the normal mathematical syntax for 
       arithmetic operators, such as <code>+</code>, <code>-</code>, <code>/</code>
       and <code>*</code>. These operators are used for other purposes.
	   Instead, the library provides the operators
       as the strategies, namely <code>add</code>, <code>subt</code>, 
       <code>div</code> and <code>mul</code>. Further, there is
       convenience strategy for integer increment, <code>inc</code>
       and decrement, <code>dec</code>.
     </para>
       
     <para>
       While the Stratego language operates exclusively on terms, there
       are different kinds of primitive terms. The runtime maintains a
       distinction between real numbers and integer numbers. The library
       mirrors this distinction by providing a family of strategies for
       arithmetic operations. Arithmetic strategies which work on real
       numbers end in an 
	   <code>r</code>, e.g. <code>addr</code>, and strategies working on
	   integers end in an <code>i</code>, e.g. <code>subti</code>. For
	   each arithmetic operator, there is also a type-promoting variant,
	   e.g. <code>mul</code>, which will type-promote from integer to real,
	   when necessary. Finally, there are convenience strategies for
	   working on strings containing numbers. For each arithmetic operation,
	   there is a string variant, e.g <code>divS</code>.
	</para>

	<para>
	   The full set of arithmetic operations in Stratego:
    </para>
    	   
<screen>
add,  addr,  addi,  addS
div,  divr,  divi,  divS
mul,  mulr,  muli,  mulS
subt, subtr, subti, subtS
</screen>

	<para>
	   Using these strategies is straightforward.
    </para>

<screen>
<prompt>stratego></prompt> &lt;addr> (1.5, 1.5)
3.000000000000000e+00
<prompt>stratego></prompt> &lt;subti> (5, 2)
3
<prompt>stratego></prompt> &lt;mul> (1.5, 2)
3.000000000000000e+00
<prompt>stratego></prompt> &lt;divS> ("9", "3")
"3"
<prompt>stratego></prompt> &lt;inc> 2
3
</screen>
 
   <para>
     As we can see, the <code>mul</code> operator can be applied to a pair
     which have different terms (real and integer). In this case, type
     promotion from integer to real with happen automatically.
   </para>
   
   </section>

   <section>
     <title>Number comparisons</title>
     
     <para>
       The strategies found in the library for comparing two numbers correspond
       to the usual mathematical operators for less-than (<code>lt</code>), 
       less-than-equal (<code>leq</code>), equal (<code>eq</code>), 
       greater-than (<code>gt</code>), greather-than-equal (<code>geq</code>).
       As with the arithmetic strategies, each of these operators comes in 
       an integer variant, suffixed with <code>i</code>, a real variant
       (suffixed by <code>r</code>), a string variant (suffixed by
       <code>S</code>) and a type promoting variant without suffix. The
       full matrix of comparison functions thus looks like:
     </para>

<screen>
lt,  ltr,  lti,  ltS
gt,  gtr,  gti,  gtS
leq, leqr, leqi, leqS
geq, geqr, geqi, geqS
</screen>

     <para>
       A few examples:     
     </para>
     
<screen>
<prompt>stratego></prompt> &lt;lt> (1.0, 2)
(1.000000000000000e+00,2)
<prompt>stratego></prompt> &lt;geqS> ("2", "2")
("2","2")
<prompt>stratego></prompt> &lt;gtr> (0.9, 1.0)
command failed
</screen>

     <para>
       The maximum and minimum of a two-element tuple of numbers can be
       found with the <code>max</code> and <code>min</code> strategies,
       respectively. These do not distinguish between real and integers.
       However, they do distinguish between numbers and strings; 
       <code>maxS</code> and <code>minS</code> are applicable to strings.
     </para>
<screen>
<prompt>stratego></prompt> &lt;max> (0.9, 1.0)
1.0
<prompt>stratego></prompt> &lt;min> (99, 22)
22
<prompt>stratego></prompt> &lt;minS> ("99", "22")
"22"
</screen>            

     <para>
       Some other properties of numbers, such as whether a number 
       is even, negative or positive, can be be tested with the strategies
       <code>even</code>, <code>neg</code> and <code>pos</code>, respectively.
     </para>
   </section>

   <section>
     <title>Other Operations</title>
     
     <para>
       The modulus (remainder) of dividing an integer by another is
       provided by the <code>mod</code> strategy. <code>gcd</code> gives
       the greatest common divisor of two numbers. Both <code>mod</code>
       and <code>gcd</code> work on a two-element tuple of integers. The
       <code>log2</code> strategy can be used to find the binary logarithm
       of a number. It will only succeed if the provided number is an
       integer and that number has an integer binary logarithm.
     </para>
<screen>
<prompt>stratego></prompt> &lt;mod> (412,123)
43
<prompt>stratego></prompt> &lt;gcd> (412,123)
1
<prompt>stratego></prompt> &lt;log2> 16
4
</screen>     
   </section>

   <section>
     <title>Random Numbers</title>
     
     <para>
       The library provides a strategy for generating random numbers, called
       <code>next-random</code>. The algorithm powering this random generator
       requires an initial "seed" to be provided. This seed is just a 
       first random number. You can pick any integer you want, but it's
       advisable to pick a different seed on each program execution. A popular
       choice (though not actually random) is the number of seconds since epoch,
       provided by <code>time</code>. The seed is initialized by the
       <code>set-random-seed</code> strategy. The following code shows the
       normal idiom for getting a random number in Stratego:
     </para>
     
<screen>
<prompt>stratego></prompt> time ; set-random-seed
[]
<prompt>stratego></prompt> next-random     
1543988747
</screen>

    <para>
      The random number generator needs only be initialized with a seed
      once for every program invocation.
    </para>
   </section>
      
</chapter>

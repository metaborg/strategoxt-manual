<partintro xml:id="stratego-library-intro"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xl="http://www.w3.org/1999/xlink"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <para>
    The Stratego Library was designed with one goal in mind: it should
    contain be a good collection of strategies, rules and data types
    for manipulating programs. In the previous part of this tutorial,
    we have already introduced you some of the specific features in
    the library for doing program manipulation. However, the library
    also contains abstract data types which are found in almost any
    library, such as lists, strings, hashtables, sets, file and
    console I/O, directory manipulation and more. In this chapter, we
    aim to complete your basic Stratego education by introducing you
    to how these bread-and-butter data types have been implemented for
    Stratego.
  </para>

  <tip> 
    <title>Online Library Documentation</title>
     
  <para>
	Stratego and its library is a work in progress. New material is added to
	the library on a weekly basis. If you want to follow the progress, you
	should consult the latest version of the 
	<link xl:href="http://releases.strategoxt.org/docs/api/libstratego-lib/libstratego-lib-docs-stable/docs/">library documentation</link>.
  </para>
  
  <para>
    Beware that the online documentation will display strategies on the
    form <code>apply-and-fail(Strategy s, ATerm name, ATerm in-term, ATerm out)</code>,
    whereas we adopt the more conventional format in this manual:
    <code>apply-and-fail(s | name, in-term, out)</code>
   </para>
  </tip>

  <section>
    <title>Anatomy of the Stratego Library</title>
      
  <para>
    The organization of the Stratego library is hierarchical.  At the
    coarsest level of organization, it is divided into packages, whose
    named as on a path-like form, e.g.
    <code>collection/list</code>. Each package in turn consists of one
    or several modules. A module is a leaf in the hierarchy. It maps
    to one Stratego (<code>.str</code>) file, and contains definitions
    for strategies, rules, constructors and overlays. The available
    packages in the library is listed below.
  </para>

<screen>
collection/hash-table
collection/list
collection/set
collection/tuple
lang
strategy
strategy/general
strategy/pack
strategy/traversal
system/io
system/posix
term
util
util/config
</screen>

  <para>
    As an example, the <code>collection/list</code> package consists of
    the modules <code>common</code>, <code>cons</code>, <code>filter</code>,
    <code>index</code>, <code>integer</code>, <code>lookup</code>,
    <code>set</code>, <code>sort</code>, <code>zip</code>. Inside the 
    <code>sort</code> module, we find the <code>qsort</code> strategy,
    for sorting lists.
  </para>
  
  <para>
    In the remainder of this part of the tutorial, we will present the
    most important parts of the library, and show their typical usage
    patterns and idioms. If anything seems unclear, you are encouraged
    to consult the
    <link xl:href="http://releases.strategoxt.org/docs/api/libstratego-lib/libstratego-lib-docs-stable/docs/">online documentation</link>
    for further details.
  </para>
  </section>  
</partintro>

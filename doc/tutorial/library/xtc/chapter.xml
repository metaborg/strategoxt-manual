<chapter xml:id="xtc"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">
  
  <title>Transformation Tool Composition with XTC (*)</title>
  
  <para>
    In <xref linkend="xt-architecture"/>, we explained how
    Stratego/XT universe is built from small components, each
    a separately executable program. Many such components are
    provided for your reuse by the Stratego/XT distribution.
    We have already seen some of these in action throughout
    <xref linkend="tutorial-xt"/>.
    In this chapter, we will first explain how to compose
    existing components together. Afterwards, we will explain
    how you can make your own Stratego programs into reusable
    XT components. 
  </para>

  <section>
    <title>Basic Mechanisms of XTC</title>
    
  <para>
    Before we can compose XT components, we must place them
    in a component repository. This is referred to as
    <emphasis>registration</emphasis>. The registration
    associates each component with a name, a path and
    a version. The name is used later to look up
    components, and map their names to their actual location
    on the system. In our Stratego programs, we only have to
    specify the name of the program we want executed, and
    the XTC machinery will automatically figure out which
    program to execute, set up the piping, and even 
    perform the execution for us.
  </para>  

  <para>
    In this section we will cover the registration and lookup
    mechanisms in some detail. 
  </para>
      
  <section>
    <title>Registration of Programs and Data</title>

    <para>
      An XTC repository is a collection of programs and data files. 
      The programs, which are usually XT components, must be
      registered explicitly using the <command>xtc</command>
      tool before they can be used. This is also the case for
      the data files. A normal program transformation system built
      with Stratego/XT will contain an XTC repository, where all its
      components have been registered.
      Though this registration is done completely automatically
      for you by the Stratego build system, it will provide 
      instructive to know what takes place behind the scenes.
      Refer to <xref linkend="library-building" /> for an explaination
      of how to configure the Stratego/XT build system to automatically 
      register your XT components.
    </para>

    <para>
      Suppose our project, called Ogetarts, has been installed
      into <filename>.../ogetarts</filename> 
      (where <filename>...</filename> is a path of your choice).
      A typical directory layout for this project would include
      the following directories:
    </para>

<screen>
.../ogetarts/
             share/
                   ogetarts/
             bin/
             libexec/
             lib/
</screen>

    <para>
       The part we are interested in now is the directory
       <filename>.../ogetarts/share/ogetarts/</filename>. This
       is where the registry for the XTC repository is normally
       placed, in the file <filename>XTC</filename>. Assuming we
       already have the XT component <command>foo2bar</command>
       placed in <filename>.../ogetarts/libexec/</filename>, the
       following <command>xtc</command> invocation will register
       it with the Ogetarts registry:
    </para>
    
<screen>
<prompt>$</prompt> xtc -r .../ogetarts/share/ogetarts/XTC register -t foo2bar -l .../ogetarts/libexec -V 1.0
</screen>

    <para>
      This command will also take care of creating a fresh
      <filename>XTC</filename> registry file if it does not already
      exist. The <option>-l</option> specifies the path to the component
      being registered, and <option>-t</option> specifies its name. This
      name is used for lookup purposes later. Additionally, 
      the <option>-V</option> may be used to associate a version number
      with a given program.
    </para>

  </section>

  <section>
    <title>Importing other Repositories</title>
      
      <para>
        The XTC system provides a form of inheritance, whereby one
        repository can refer to another. You may also think of it as
        a scoping mechanism on the namespaces of repositories. When 
        searches for components fail at the local repository, the 
        imported repositories will be searched in turn.
      </para>
    
      <para>
        It is practically always necessary for your project to import
        the Stratego/XT repository, as most transformation systems built
        with Stratego/XT reuse many of the XT components. The following
        command adds the Stratego/XT repository to our project:
      </para>
      
<screen>
<prompt>$</prompt> xtc -r .../ogetarts/share/ogetarts/XTC import /usr/share/StrategoXT/XTC
</screen>

      <para>
        In case you wondered, the current version of XTC has no mechanism
        for declaring some components as private, and others public. Once
        a component <code>c</code> is registered in an XTC repository
        <code>r</code>, all other repositories importing <code>r</code> 
        can ask for <code>c</code>.
      </para>
        
  </section>  

  <section>
      <title>Searching Repositories</title>
      
      <para>
        When you have registered your components or imported other
        repositories, you may inspect your repository to see that everything
        looks good. This is done using the <option>query</option>
        option to <command>xtc</command>. Using <option>query</option>,
        you can either look for a particular component, or list all
        registrations in a given repository.
      </para>
          
      <para>
        The following command will search the Ogetarts repository
        for the <command>sglr</command> component. This component
        was not registered by us, but is inherited from the
        Stratego/XT repository.
      </para>

<screen>
<prompt>$</prompt> xtc -r .../ogetarts/share/ogetarts/XTC query -t sglr 
sglr (3.8) : /bin/sglr
</screen>

     <para>
       Alternatively, we can list all registrations, in one go:
     </para>
     
<screen>
<prompt>$</prompt> xtc -r .../ogetarts/share/ogetarts/XTC query -a
foo2bar (1.0) : .../ogetarts/libexec/foo2bar
stratego-lib (0.16M1) : .../stratego-lib
...
</screen>

     <para>
       The format of this list is <code>name (version) : path</code>,
       where <code>name</code>, we remember, is the handle used to
       look up the given component. The list follows a pre-determined
       order. First, all registrations in the Ogetarts will be displayed.
       Here, <code>foo2bar</code>  is our only component. After the
       local components, the contents of each imported repository will
       be displayed. In our case, we only imported Stratego/XT, and the
       first component in Stratego/XT is <code>stratego-lib</code>. The
       other 490 registrations have been omitted, for the sake of clarity.
     </para>
  </section>
</section>
     
  <section>
    <title>Composing Tools in Stratego</title>

    <para>
      Much of the scalability of Stratego/XT comes from its component
      model, thus it is important to know how to design your own programs
      to take advantage of this infrastructure. Fortunately, the 
      programming interface of XTC consists of a small set of clearly
      defined strategies. If you are already familiar with 
      <code>io-wrap</code>, as introduced in
      <xref linkend="library-options"/>, this will be even easier to
      comprehend.
    </para>
    
    <para>
      There are three main usage scenarios for the XTC API. Either you
      use the API to create a new XT component of your own, or you use
      it to invoke an XT component from your Stratego program (which
      need not be an XT component), or both. 
    </para>
    
  <section>
    <title>Making an XT component</title>
    
    <para>
      The simplest way to make an XT component is to wrap your 
      top level strategy using the <code>xtc-io-wrap</code>
      wrapper. This automatically confers your program with
      basic command line option parsing capabilities, and also
      basic I/O. 
    </para>

    <para>
      The following is an example of a trivial XT component which
      just passes through the term passed to it.
    </para>
    
<screen>
module xtcid
imports liblib xtc-lib
strategies
  main = xtc-io-wrap(xtcfoo)
  xtcfoo = id
</screen>

   <para>  
     As with the <code>io-wrap</code> strategy explained in
     <xref linkend="library-options"/>, a default set of
     command line options is provided by <code>xtc-io-wrap</code>.
     After compiling the <filename>xtcid.str</filename>, 
     we can run it to inspect the default set of options.
   </para>

<screen>
<prompt>$</prompt> ./xtcid --help

Options:
   -i f|--input f   Read input from f
   -o f|--output f  Write output to f
   -b               Write binary output
   -S|--silent      Silent execution (same as --verbose 0)
   --verbose i      Verbosity level i (default 1)
                    ( i as a number or as a verbosity descriptor:
                      emergency, alert, critical, error,
                      warning, notice, info, debug, vomit )
   -k i | --keep i  Keep intermediates (default 0)
   --statistics i  Print statistics (default 0 = none)
   -h|-?|--help     Display usage information
   --about          Display information about this program
   --version        Same as --about

Description:
</screen> 
  
  <para>
    This is normally all you have to do to have a working
    XT component. You can add additional options using
    the <code>Option</code> and <code>ArgOption</code>, as
    explained in <xref linkend="library-options"/>, by
    wrapping with <code>xtc-io-wrap(extra-opts, s)</code>.
  </para>  

  <para>
    In some situations, it does not make sense for your
    component to accept an input term, or to generate
    and output term. That is, your component may be a
    data <emphasis>sink</emphasis>, or a data
    <emphasis>generator</emphasis>. In these cases,
    your component should rather use 
    <code>xtc-input-wrap</code>, in the case of a
    sink, or <code>xtc-output-wrap</code>, in the 
    case of a generator.
  </para>
    
  <para>
    The following programs shows a trivial generator, which
    produces the term <code>"foo"</code> when invoked.
  </para>

<screen>
module xtcid
imports liblib xtc-lib
strategies
  main = xtc-output-wrap(xtcfoo)
  xtcfoo = !"foo" ; write-to
</screen>        
  
  <para>
    Note how <code>xtcfoo</code> ends in a call to
    <code>write-to</code>. The argument <code>s</code> to
    <code>xtc-output-wrap(s)</code> must result in a
    file, not a term. This is taken care of by the 
    <code>write-to</code> strategy, which writes the current
    term to a fresh, temporary file. The inverse of this
    strategy is <code>read-from</code> which reads a term
    from a file. It is used together with
    <code>xtc-input-wrap</code>, analogously to the example
    above.
  </para> 
 
  <para>
    In both cases (<code>xtc-input-wrap</code> and
    <code>xtc-output-wrap</code>), you may add additional command
    line options, by using variants of the wrappers which
    accept extra options, <code>xtc-input-wrap(extra-options, s)</code> 
    and <code>xtc-output-wrap(extra-options, s)</code>,
    respectively. 
  </para>
  
  <formalpara>
    <title>Checking Component Dependencies</title>
    
    <para>
      If you write a component which depends on other components 
      as part of its operation, you are encouraged to add 
      dependency checking using the
      <code>xtc-check-dependencies</code>. This is a two step
      procedure: First, you add the <option>--check</option>
      option to your components command-line options,
      by adding <code>check-options(deps)</code> to the
      <code>extra-opts</code> argument of
      <code>xtc-io-wrap</code>. Afterwards, you should call
      <code>xtc-check-dependencies</code> as part of your
      option-processing.
    </para>
  </formalpara>
     
   <para>
     In our simple program, <command>xtcid</command>, the 
     above instructions can be implemented as shown next.
   </para>
      
<screen>
module xtcid
imports liblib xtc-lib
strategies

  main = xtc-io-wrap(check-options(!["mybar", "mybaz"]), xtcid)
  
  xtcid = xtc-check-dependencies ; id
</screen>  

   <para>
     After recompiling <command>xtcid</command>, the user can now
     ask your component to do a self-check of its dependencies,
     by calling it with the <option>--check</option>. You may 
     want to piggy-back on this option, adding other kinds of
     self-checks, such as data consistency checking. 
   </para>
   
  <formalpara>
    <title>Graceful Termination</title>
    
    <para>
      As you have witnessed, the implementation of the XTC model
      makes heavy use of temporary files. It is important that
      these files are cleaned up after exectuion of your program.
      In all programs we have seen so far, this was taken care of
      automatically by the wrappers. But what happens if you want
      to terminate your program in the middle of execution, by
      calling <code>exit</code>, for example? In that case, the
      temporary files will not be removed properly. A safe way
      of exiting XTC programs is provided by the
      <code>xtc-io-exit</code> strategy. This strategy is a
      plugin replacement for <code>exit</code>, but takes
      care of cleaning any and all temporary files created by
      your program before terminating. 
    </para>
  </formalpara>
  
  </section>
  
  <section>
    <title>Invoking XT components</title>
  
    <para>
      Now that we know how to create XT components, and we also
      know that the Stratego/XT environment provides many
      reuseable XTC programs, we should take a bit of time to
      explain how we can invoke these inside our Stratego
      programs. It is important to realize that your Stratego
      program must not itself be an XT component before it
      can call out to other XT components. Both XTC programs
      and normal Stratego programs call XT components in the
      same way.
    </para>

    <para>
      Before we proceed, we need to create a small XTC program
      that we can call. The following is an XTC version of
      the <code>inc</code> strategy. When invoked on an
      integer <code>n</code>, it will return
      <code>n + 1</code>.
    </para>
      
<screen>
module xtcfoo
imports liblib xtc-lib
strategies
  main = xtc-io-wrap(read-from ; &lt;add> (&lt;id>, 1) ; write-to)
</screen>

    <para>
      Let us quickly whip up a client for this component, that
      invokes <command>xtcfoo</command> on the integer 
      <code>1</code>:
    </para>

<screen>
module xtcclient
imports lib xtc-lib
strategies
  main = !1 ; xtc-transform(!"xtcinc")
</screen>


   <para>
     Let us a compile and run this program.
   </para>
   
<screen>
<prompt>$</prompt> ./xtcclient
[ identity crisis | error ] No XTC registration for xtcinc found
./xtcclient: rewriting failed
</screen>

   <para>
     Harking back a few sections, we should now realize that we forgot
     to register <command>xtcinc</command> anywhere. We already 
     know how to do this. For the sake of this demonstration, let
     us create the <filename>XTC</filename> registry in the same
     directory as the source code:
   </para>

<screen>
<prompt>$</prompt> xtc -r XTC r -t xtcinc -V 1.0 -l `pwd`
</screen>

   <para>
     If we were to run our program, <command>xtcclient</command> again
     at this point, we would still get the same error. This is because
     we have not told <command>xtcclient</command> which repository
     it should use. This is done by the <option>--xtc-repo</option>
     option to the Stratego compiler.
   </para>

<screen>
<prompt>$</prompt> strc --xtc-repo ./XTC -i xtcclient.str
....
</screen>

   <para>
     At this point, we have created the XTC program
     <command>xtcinc</command>. We have registered it in the 
     XTC registry in <filename>./XTC</filename>, and we have
     told <command>strc</command> to compile our client program,
     <command>xtcclient</command> against this repository. We
     should be all set to run our composition. Let's try. 
   </para>
   
<screen>
<prompt>$</prompt> ./xtcclient
2
</screen>

    <para>
      At last, it works. We have connected two components. By
      changing the internals of our components, we can change
      them to process any terms we want, and we can of course
      also add additional components into the mix, all using the
      same basic steps we have explained here.
    </para>
    
    <para>
      Having to remember the <option>--xtc-repo</option> option
      to <command>strc</command> all the time is a bit annoying, but
      as we shall in <xref linkend="library-building"/>, this will
      be taken care of automatically by the Stratego/XT build system.
    </para>      

   <formalpara>
     <title>Finding XTC Data Files</title>
     
     <para>
       We have just seen how to use XTC programs from a repository,
       but so far, we have said nothing about any data files we have
       registered. This is where the <code>xtc-find-file</code> strategy
       comes in handy. Let us go through the process of creating a term,
       registering it, and then using it inside our program.
     </para>
   </formalpara>
   
    <para>
      Suppose the file <filename>myterm.trm</filename> contains the
      following term, written in plain text:
    </para>
    
<screen>
My(Term)
</screen>

    <para>
      Calling <command>xtc</command> as follows, will register it
      in the local repository we have already created.
    </para>
    
<screen>
<prompt>$</prompt> xtc -r ./XTC r -t myterm.trm -V 1.0 -l `pwd`
</screen>

    <para>
      This will register the file <filename>myterm.trm</filename>
      under the name <code>myterm.trm</code>, which we can use
      to look it up from inside our programs later. Let us make a
      new program that just does this.
    </para>
    
<screen>
module xtcclient
imports liblib xtc-lib
strategies
  main = &lt;xtc-find-file> "myterm.trm" ; read-from
</screen>

    <para>
      <code>xtc-find</code> is applied to a string, which must be
      the name of an already registered data file in the
      repository. As before, we have to compile our program 
      using <command>strc</command>, and remember to include
      the <option>--xtc-repo</option> option.
    </para>

<screen>
<prompt>$</prompt> strc -i xtcload.str --xtc-repo ./XTC
</screen>

    <para>
      We can now run our freshly compiled program.
    </para> 

<screen>
<prompt>$</prompt> ./xtcload
My(Term)
</screen>

    <para>
      The result is as we anticipated. Congratulations! You have 
      now mastered the basics of the XTC mechanics.
    </para>
  </section>
</section>
  
  <section>
   <title>Summary</title>
   
   <para>
     This chapter introduced you to the mechanics of the XTC model. We
     saw how to maintain a registry of XT components using the
     <command>xtc</command> tool, and also how to write XTC compositions
     in Stratego. Additional detail about the XTC API can be found in 
     the API reference documentation. The complete documentation
     for the <command>xtc</command> tool is given on the manual
     page (<xref linkend="ref-xtc"/>).
   </para>
  </section>

</chapter>


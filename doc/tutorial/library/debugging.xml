<chapter
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Debugging Techniques for Stratego/XT (*)</title>

  <para>
    Even in Stratego/XT, it is not entirely uncommon for developers
    to produce erroneous code from time to time. This chapter will
    walk you through the tools and techniques available for hunting
    down bugs, and tips for how to avoid them in the first place.
  </para>
  
<section>
  <title>Debugging Stratego</title>
  
  <para>
    Both the Stratego language paradigm and its syntax are rather
    different from most other languages. Knowing how to use its
    unique features properly, in the way we have described in
    this manual, goes a long way towards avoiding future maintenance
    problems. 
  </para>
 
  <para>
    One important practical aspect of using language constructs is
    expressing them in a readable manner. The intention behind the
    code should be apparent for readers of the code. Judicious use
    of whitespaces is vital in making Stratego code readable, partly
    because its language constructs are less block-oriented than
    most Algol-derivates.
  </para>

<screen>
 - rules
 - strategies
 
 - inline rules
 - concrete syntax
 - higher-order strategies
 - terms
</screen>
 
<screen>
 - formatting Stratego code for readability
 - documenting types
  - arity of tuples, lists
 - help from the libary 
  - log
  - debug
 - common pitfalls
  - combinator precedence
  - strategy overloading
  - variable scoping
   - explicit scoping
   - in local rules, map/filter
</screen>
</section>

<section>
  <title>Debugging XT compositions</title>
  <para></para>
<screen>
 - checking component registration
 - checking configuration file accesses
  - strace
 - xtc shell?
</screen>
</section>

<section>
  <title>Debugging SDF definitions</title>
  <para></para>
<screen>
 - SDF tools
  - sdfchecker
  - sdf2parenthesize
 - concrete syntax
  - correct .meta file
  - reserved metavariables
  - ambiguities
</screen>
</section>

</chapter>

<chapter
   xml:id="library-strings"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">
   
   <title>Strings</title>
   
   <section>
     <title>Basic String Operations</title>
 
 	 <para>
 	   Strings, like all other primitive data types in Stratego, are 
 	   terms. They are built with the build (<code>!</code>) operator
 	   and matched with the match (<code>?</code>) operator. Additional
 	   operations on and with strings are realized through strategies
 	   provided by the Stratego library. The most basic operations
 	   on strings provided by the library are concatenation, length
 	   computation and splitting. We will discuss operation each in
 	   turn.
 	 </para>

     <para>
	   The library provides two variants of the string concatenation
	   operation. The first, <code>concat-strings</code>,
       takes a list of strings and returns the concatenated result. The
       second, <code>conc-strings</code> takes a two-element tuple of
       strings and returns the concatenated result:
     </para> 	

<screen>
<prompt>stratego></prompt> &lt;concat-strings> ["foo", "bar", "baz"]
"foobarbaz"
<prompt>stratego></prompt> &lt;conc-strings ("foo", "bar")
"foobar"
</screen>
     
     <para>
       Once you have a string, you may want to know its length, i.e. the
       number of characters it contains. There are two equivalent strategies 
       for determining the length of a string. If you come from a C background,
       you may favor the <code>strlen</code> strategy. If not, the 
       <code>string-length</code> strategy may offer a clearer name.
     </para>

     <para>
       The final basic operation on strings is splitting. There is a small family of
       closely related strategies for this, which all do simple string tokenization.
       The simplest of them is <code>string-tokenize(|sepchars)</code>. It takes
       a list of characters as its term argument, and must of course be applied
       to a string.
     </para>

<screen>
<prompt>stratego></prompt> &lt;string-tokenize(|[' '])> "foo bar baz"
["foo","bar","baz"]
</screen>     

     <para>
       Another strategy in the tokenizer family is 
       <code>string-tokenize-keep-all(|sepchars)</code>. It works exactly like
       <code>string-tokenize(|sepchars)</code>, except that it also keeps the
       separators that were matched:
     </para>

<screen>     
<prompt>stratego></prompt> &lt;string-tokenize-keep-all(|[' '])> "foo bar baz"
["foo"," ","bar"," ","baz"]
</screen>     


   </section>
   
   <section>
     <title>Sorting Strings</title>

     <para>   
       Even if you don't maintain a phone directory, sorting lists of 
       strings may come in handy in many other enterprises. The strategies
       <code>string-sort</code> and <code>string-sort-desc</code> sort a
       list of strings in ascending and descending order, respectively. 
     </para>
     
<screen>
<prompt>stratego></prompt> !["worf", "picard", "data", "riker"]
["worf", "picard", "data", "riker"]
<prompt>stratego></prompt> string-sort
["data","picard","riker","worf"]
<prompt>stratego></prompt> string-sort-desc
["worf","riker","picard","data"]
</screen>

     <para>
       If you only have two strings to sort, it may be more intuitive to
       use the string comparison strategies instead. Both 
       <code>string-gt</code> and <code>string-lt</code> take a two-element
       tuple of strings, and return <code>1</code> if the first string
       is lexicographically bigger (resp. smaller) than the second, otherwise
       they fail. 
     </para>
<screen>
<prompt>stratego></prompt> &lt;string-gt> ("picard","data")
1
<prompt>stratego></prompt> &lt;string-lt> ("worf","data")
command failed
</screen>

     <para>
       Not directly a sorting operation, <code>string-starts-with(|pre)</code>
       is a strategy used to compare prefixes of strings. It takes a string
       as the term argument <code>pre</code> and must be applied to a string.
       It will succeed if <code>pre</code> is a prefix of the string it was
       applied to:
     </para>
     
<screen>
<prompt>stratego></prompt> &lt;strings-starts-with(|"wes")> "wesley"
"wesley"
</screen>
  </section>

  <section>
    <title>Strings and Terms</title>
    
    <para>
      We already said that strings are terms. As with terms, we can also
      deconstruct strings, but we cannot use normal term deconstruction
      for this. Taking apart a string with <code>explode-string</code>
      will decompose a string into a list of characters. We can then
      manipulate this character list using normal list operations and
      term matching on the elements. Once finished, we can construct
      a new string by calling <code>implode-string</code>. Consider
      the following code, which reverses a string:
    </para>

<screen>
<prompt>stratego></prompt> !"evil olive"
"evil olive"
<prompt>stratego></prompt> explode-string
[101,118,105,108,32,111,108,105,118,101]
<prompt>stratego></prompt> reverse
[101,118,105,108,111,32,108,105,118,101]
<prompt>stratego></prompt> implode-string
"evilo live"
</screen>

    <para>
      This <code>explode-string</code>, strategy, <code>implode-string</code>
      idiom is useful enough to warrant its own library strategy, namely
      <code>string-as-chars(s)</code>. The code above may be written
      more succinctly:
    </para>

<screen>
<prompt>stratego></prompt> &lt;string-as-chars(reverse)> "evil olive"
"evilo live"
</screen>

    <para>
      Sometimes, in the heat of battle, it is difficult to keep track of your
      primitive types. This is where <code>is-string</code> and 
      <code>is-char</code> come in handy. As you might imagine, they will
      succeed when applied to a string and a character, respectively. A minor
      note about characters is in order. The Stratego runtime does not separate
      between characters and integers. The <code>is-char</code> must therefore
      be applied to an integer, and will verify that the value is within the
      printable range for ASCII characters, that is between 32 and 126,
      inclusive.
    </para>
    
    <para>
      Finally, it may be useful to turn arbitrary terms into strings, and
      vice versa. This is done by <code>write-to-string</code> and
      <code>read-from-string</code>, which may be considered string I/O
      strategies.
    </para>

<screen>
<prompt>stratego></prompt> &lt;write-to-string> Foo(Bar())
"Foo(Bar)"
<prompt>stratego></prompt> read-from-string
Foo(Bar)
</screen>    

  </section>   
  
  <section>
    <title>Strings and Numbers</title>
    
    <para>
      Another interplay between primitive types in Stratego is between
      numbers and strings. Converting numbers to strings and strings
      to numbers is frequently useful when dealing with program
      transformation, perhaps particularly partial evaluation and
      interpretation. Going from numbers to strings is done by
      <code>int-to-string</code> and <code>real-to-string</code>.
      Both will accept reals and integers, but will treat is input
      as indicated by the name.
    </para>

<screen>
<prompt>stratego></prompt> &lt;int-to-string> 42.9
"42"
<prompt>stratego></prompt> &lt;real-to-string> 42.9
"42.899999999999999"
</screen>

    <para>
      The resulting number will be pretty-printed as best
      as possible. In the second example above, the imprecision
      of floating point numbers results in a somewhat
      non-intuitive result.
    </para>
    
    <para>
      Going the other way, from strings to numbers, is a bit
      more convoluted, due to the multiple bases available in
      the string notation. The simplest strategies, 
      <code>string-to-real</code> and <code>string-to-int</code>,
      assume the input string is in decimal.  
    </para>

<screen>
<prompt>stratego></prompt> &lt;string-to-real> "123.123"
1.231230000000000e+02
<prompt>stratego></prompt> &lt;string-to-int> "123"
123
</screen>

    <para>          
      For integers, the strategies <code>hex-string-to-int</code>,
      <code>dec-string-to-int</code>, <code>oct-string-to-int</code>
      and <code>bin-string-to-int</code> can be used to parse
      strings with numbers in the most popular bases.
     </para>
 
   </section>
   
</chapter>

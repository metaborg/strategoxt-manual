<chapter
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>I/O</title>

  <para>
    This chapter explains the strategies available in the
    library for controlling file and console I/O.
  </para>
  
  <para>
    The need for traditionally file I/O is somewhat diminished
    for typical applications of Stratego. Normally, Stratego 
    programs are designed to worktogether connected by Unix
    pipes. The programs employ <code>io-wrap</code> (or similar
    strategies) that automatically take care of the input and
    output. See <xref linkend="library-options"/> for details.
  </para>

  <para>
    The primitive layer of Stratego I/O inherits its 
    characteristics from Unix. The basic I/O strategies
    recognize the special files <code>stdout</code>, 
    <code>stdin</code> and <code>stderr</code>. Streams are
    opened by <code>fopen</code> and closed with
    <code>fclose</code> On top of this, a collection of
    more convient strategies have been built.
  </para>

  <section>
    <title>Console I/O</title>

  <para>
    The basic strategies for console I/O <code>print</code>
    and <code>printnl</code> are used to write terms to
    <code>stdout</code> or <code>stderr</code> (or any 
    other opened file). They both take a tuple. The first
    element of the tuple is the file to write to, the
    second is a list of terms. Each term in the list be
    converted to a string, and and these strings will
    be concatenated together to form the resulting output.
    The <code>printnl</code> will also append a newline to
    the end of the resulting string.
  </para>

  <para>
    The following module should be compiled with
    <command>strc</command>, as usual.
  </para>
    
<screen>
module example
imports lib
strategies
  main = 
    &lt;print> (stdout, ["baz"])
    ; &lt;printnl> (stdout, [ "foo", 0, "bar" ])
</screen>

  <para>
    After compiling this file, running it will give the
    following result:
  </para>

<screen>
<prompt>$</prompt> ./example
bazfoo0bar
<prompt>$</prompt>
</screen>

  <para>
    Notice how the string <code>baz</code> will be written
    without a newline (or other space). Also, notice how the
    terms in the list argument were concatenated.
  </para>
  
  <para>
    When using these strategies in the Stratego Shell, some care must
    be taken when using the <code>std*</code> files, as the following
    example shows.
  </para>

<screen>
<prompt>stratego></prompt> &lt;printnl> (stdout(), [ "foo", 0, "bar" ])
foo0bar
</screen>  

  <para>
    The shell requires that you put an extra parenthesis after the
    <code>stdout</code>.
  </para>
  
  <para>
    The <code>debug</code> and <code>error</code> are convenience
    wrappers around <code>printnl</code>. They will always write
    their result to <code>stderr</code>. The <code>error</code>
    strategy is defined as:
  </para>
  
<screen>
error =
  where(&lt;printnl> (stderr, &lt;id>))
</screen>  

  <para>
    It is used similarly to the <code>printnl</code> strategy:
  </para>    

<screen>
<prompt>stratego></prompt> &lt;error> ["foo", 0, "bar"]
foo0bar
</screen>  
  
  <para>
    The <code>debug</code> strategy accepts any term, i.e.
    not only lists of terms. The term will be written
    verbatim:
  </para>

<screen>
<prompt>stratego></prompt> &lt;debug> [ "foo", 0, "bar" ]
["foo",0,"bar"]
</screen>

  </section>
  
  <section>
    <title>Path and Directory Operations</title>
  
  <para>
    The library provides a small set of simple file and directory
    manipulation operations. Assume the directory 
    <code>/tmp</code> only contains the files 
    <filename>foo</filename>, <filename>bar</filename>,
    <filename>baz</filename>. Elementary directory operations
    can be done as illustrated below:
  </para>
  
<screen>
<prompt>stratego></prompt> &lt;readdir> "/tmp"
["foo","bar","baz"]
<prompt>stratego></prompt> &lt;rename-file> ("/tmp/foo", "/tmp/bax")
"/tmp/bax"
<prompt>stratego></prompt> &lt;remove-file> "/tmp/baz"
[]
<prompt>stratego></prompt> &lt;link-file> ("/tmp/bar", "/tmp/foo")
"/tmp/foo"
<prompt>stratego></prompt> &lt;link-file> ("/tmp/bar", "/tmp/foo")
"/tmp/foo"
<prompt>stratego></prompt> &lt;new-temp-dir> "/tmp"
"/tmp/StrategoXTnsGplS"
</screen>
 
  <para>
    The library contains a family of strategies which must be applied
    to a <code>File</code>, and will return information about it.
    these include <code>isdir</code>, <code>isatty</code>, 
    <code>isfifo</code> and <code>islnk</code> which are predicates
    checking if a file is a directory, TTY, FIFO or a symbolic
    link, respectively. To obtain a <code>File</code> object in the
    first place, we should call <code>file-exists</code> followed
    by <code>filemode</code>. Thus, checking if <filename>/etc</filename>
    is a directory is done as follows:
  </para>

<screen>
<prompt>stratego></prompt> &lt;file-exists ; filemode ; isdir> "/etc"
</screen>

  
  <para>
    The library also has another family of strategies for getting
    information about files. These must be applied to a string 
    containing the filename. The family includes 
    <code>is-executable</code>, <code>is-readable</code> and
    <code>is-writeable</code>.
  </para>

<screen>
<prompt>stratego></prompt> &lt;is-executable> "/bin/bash"
"/bin/bash"
</screen>

  <para>
    Finally, the directory strategies also include the usual suspects
    for dealing with paths. 
  </para>  

<screen>
<prompt>stratego></prompt> &lt;is-abspath> "../foo"
command failed
<prompt>stratego></prompt> &lt;dirname> "/foo/bar/baz"
"/foo/bar"
<prompt>stratego></prompt> &lt;base-filename> "/foo/bar/baz"
"baz"
<prompt>stratego></prompt> &lt;get-extension "/tmp/foo.trm"
"trm"
<prompt>stratego></prompt> &lt;abspath> "../foo"
/home/karltk/source/oss/stratego/strategoxt-manual/trunk/../foo
</screen>

  <para>
    There are also a few strategies for finding files. We shall
    describe <code>find-file(s)</code>. The other variants of
    <code>find-file</code> are described in the library
    documentation. The strategy <code>find-file(s)</code> finds one
    file with a specific file extension in a list of directories. It
    takes a two-element tuple. The first element is a file name as a
    string, then second element is a list of paths, i.e.  <code>(f,
    [d*])</code>. The extension of <filename>f</filename> will be
    replaced by what is produced by <code>s</code>, and the
    directories given in <code>[d*]</code>. Consider the code below.
  </para>
  
<screen>
<prompt>stratego></prompt> &lt;find-file(!"rtree")> ("file.str", ["."])
</screen>
  
  <para>
    This snippet will consider the filename <filename>file.str</filename>,
    replace its extension with <filename>rtree</filename> and look through
    the directories in the list <code>["."]</code>. Effectively, it will
    search for <filename>file.rtree</filename> in the current directory.
  </para>
  </section>

  
  <section>
    <title>File and Text I/O</title>

    <para>
      Opening a file is done with the <code>fopen</code> strategy. It takes
      a two-element tuple, the first element is the filename as a string,
      the second is the open mode, which is also a string. The most important
      modes are read (<code>r</code>); write ("w") which opens and empty file
      for writing, truncating any existing file with the same name; and 
      append (<code>a</code>) which appends to the file if it already exists.
      After all file operations stream have been finished, it should be closed
      with <code>fclose</code>, which will flush and close the file. Explicit
      flushing can also be done with <code>fflush</code>.
    </para>
    
    <para>
      It should be pointed out that reading and writing text files with Stratego
      is rather rare. Normally, text files are read with a parser generated from
      an SDF description and written using a pretty-printer defined in the
      Box formalism. In rare cases, this may turn out be too heavy handed,
      especially if the file format is simplistic and line-based. In this
      instance, we can come up with an easier solution using  
      <code>read-text-file</code> and <code>read-text-line</code>.
    </para>

    <para>
      Assume the file <filename>/tmp/foo</filename> contains the following
      lines:
    </para>

<screen>
one
two
three
</screen>

    <para>
      We can read this file in one big chunk into a string with the
      <code>read-text-file</code> strategy, which must be applied to
      a filename:
    </para>    
    
<screen>
stratego> &lt;read-text-file> "/tmp/foo"
"one\ntwo\nthree\n"
</screen>

   <para>
     Alternatively, for example if the file is large, we can read it
     line by line. In this scenario, we must open the file and get
     a handle to a stream.
   </para>

<screen>      
<prompt>stratego></prompt> &lt;fopen> ("foo.txt", "r") => inp
Stream(136788400)
<prompt>stratego></prompt> &lt;read-text-line> inp
"one"
</screen>

  </section>
  
  <section>
    <title>Term I/O</title>
    
  <para>
    The primary form of file I/O you will be using in Stratego is
    reading and writing terms. As explained earlier, the terms
    are stored on disk as either binary, compressed text or
    plain text ATerms. Reading a term, no matter which storage
    format, is done with the <code>ReadFromFile</code> strategy.
    It is applied to a filename.
  </para>

<screen>
<prompt>stratego></prompt> &lt;ReadFromFile> "/tmp/foo.trm"
Foo(Bar)
</screen>

  <para>
    To write a term to file, you can use <code>WriteToTextFile</code>
    or <code>WriteToBinaryFile</code>. The binary format is
    approximately eight times more space-efficient on average. Both
    strategies take a two-element tuple where the first element is
    the filename and second is the term to write. Writing the current
    term requires a minor twist, which is shown here:
  </para>  

<screen>
<prompt>stratego></prompt> &lt;WriteToBinaryFile> ("/tmp/bar.trm", &lt;id>)
Foo(Bar)
</screen>  

  <para>
    It is also possible to read and write terms from and to strings,
    using <code>read-from-string</code> and <code>write-to-string</code>.
    <xref linkend="library-strings"/> contains explanation of how these
    strategies work.
  </para>
  
  </section>

  <section>
    <title>Logging</title>
    
  <para>
    The strategies for logging are used pervasively throughout the Stratego
    toolchain. They are easy to use in your own applications, too. The 
    logging system is built on top of the
    <code>log(|severity, msg)</code> and <code>log(|severity, msg, term)</code>
    strategies. It is possible to use these directory, as the following
    example demonstrates.
  </para>

<screen>
<prompt>stratego></prompt> import util/log
<prompt>stratego></prompt> log(|Error(), "my error")
</screen>    
  
  <para>
    However, it is preferrable to use the high-level wrapper strategies
    <code>fatal-err-msg(|msg)</code>, <code>err-msg(|msg)</code>, 
    <code>warn-msg(|msg)</code> and <code>notice-msg(|msg)</code>.
    Except for <code>fatal-err-msg</code>, these strategies will
    return with the current term untouched, and write the message
    as a side effect. The <code>fatal-err-msg</code> strategy will
    also terminate the program with error code <code>1</code>, after
    writing the message.
  </para>
    
  </section>
</chapter>


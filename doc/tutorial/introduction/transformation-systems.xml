
<chapter xml:id="tutorial-software-transformation-systems"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2003/XInclude">

  <title>Software Transformation Systems</title>

<section>
  <title>What is Software Transformation?</title>

  <para>
    Imagine finding yourself in the a situation where you have a
    collection of files containing source code. If this is an
    unreasonable prospect for you, stop reading and pick another
    tutorial. If you are still with us, consider these files the
    blueprints for your software.  They are still not the
    award-winning, executable program you are aiming for, but by
    applying a compiler to them, you can generate one (with some minor
    provisions about syntactial and semantical correctness). If so
    inclined, you may also run a documentation generator like Javadoc
    on the source, to generate structured documentation. Or, while
    colleagues are not looking, you can secretly invoke tools like
    <command>lint</command> (C/C++) or FindBugs (Java) to weed out
    common programming errors.
  </para>
  
  <para>
    The compilation, documentation generation and source-code analysis
    are all examples of <emphasis>software transformations
    </emphasis>, but they are certainly not the only ones. Software
    transformation has been used by the mathematically inclined for
    generating programs from high-level specifications, by forgetful
    people to recover lost design and architecture from legacy code
    and by reverse-engineers to obtain high-level, readable code from
    binary files after somebody accidentally misplaced a stack of
    backup tapes. Specialization of a program to known inputs in order
    to improve performance, optimization using domain knowledge from
    the application domain and improving program understanding by
    analysing sources are also favoured topics among software
    transformers.
  </para>

  <para>
    But who uses software transformation, anyway? People with a
    problem resembling any in <xref linkend="Fig-Applications"/>
    are. All too often, Real Programmers with such a problem have the
    opinion that software transformation is overly complicated dark
    magic, and that simple regular expression hacks solve the problem
    just fine. Almost equally often, their ad-hoc, text-based
    solutions turn out to be brittle, overly complicated and acquire a
    status of dark magic, with the result that no other team member
    dears touch the stuff. Most of the time, the problem would be
    easily solved in a maintainable and robust way if only the right
    tool could be found.
  </para>

  <figure xml:id="Fig-Applications">
    <title>
      Applications of Program Transformation.
    </title>
  <screen>
Compilers 
- translation   
- desugaring  
- instruction selection 
  - maximal munch
  - burg-style dynamic programming
- optimization 
  - data-flow optimizations
  - vectorization
  - ghc-style simplification
  - deforestation
  - domain-specific optimization (codeboost)
  - partial evaluation   
- typechecking   
- specialization of dynamic typing

Program generators
- pretty-printer and signature generation from syntax definitions
- application generation from DSL (Java, C++) 

Program migration
- grammar conversion (yacc to sdf, ...)

Program understanding
- documentation generation 

Document generation/transformation 
- Web/XML programming (server-side  scripts )
  </screen>
  </figure>
  
  <para>
    So what do should you do if you have a mountain of source code
    that you have to do some transformation on? Obviously, using the
    the right tool for the job is a good start. We don't recommend
    using toothpicks to move software mountains. Instead, we think
    using Stratego for this is a good idea. In this tutorial, we will
    use small, understandable and cute examples that you can try out
    in the leisure of your own desktop. We hope these will convince
    you exactly how good an idea using Stratego for software
    transformation really is.
  </para>

</section>

<section>
  <title>What is Stratego/XT?</title>

  <para>
    A program transformation system is usually organized as a simple
    pipeline of transformation steps. At the source of the pipeline
    (far left), a parser reads the text of the input program and turns
    it into a parse tree or abstract syntax tree. Subsequently, one or
    several transformations components modify the tree. At the sink of
    the pipeline (far right), a pretty-printer turns the output tree
    into program text. <xref linkend="Fig-Pipeline"/> plots these
    components in on the map of a Transformation System. Of course,
    the output program need not be in the same language as the input
    program. It need not even be a programming language.
  </para>

  <figure xml:id="Fig-Pipeline">
    <title>
      Pipeline of a software transformation system.
    </title>
    <pngobject fileref="pipe.png" align="center"/>
  </figure>

  <para>
    So, what is Stratego/XT? Stratego/XT combines Stratego, a language
    for implementing program transformations, and XT, a collection of
    transformation tools. The Stratego language is a powerful language
    for implementing the core transformations of a complete
    transformation system. The XT tools help with the implementation
    of the infrastructure required around these core transformations,
    such as a parser and a pretty-printer.
  </para>

  <para>
    Stratego and XT aims at better productivity in the development of
    transformation systems through the use of a high-level
    representations of programs, domain-specific languages for the
    development of parts of a transformation system, and generating
    various aspects of a transformation system automatically.
  </para>

  <variablelist>
    <para>
      The main ingredients of Stratego/XT are:
    </para>

    <varlistentry>
      <term>ATerm Format</term>
      <listitem>
	<para>
	  For the structured representation of a program.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Stratego Language</term>
      <listitem>
	<para>
	  For implementing program transformations.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>SDF Language</term>
      <listitem>
	<para>
	  For modular, concise, definition of the syntax of a
	  language. Parsers can be fully generated from SDF.
	</para>
      </listitem>
    </varlistentry>


    <varlistentry>
      <term>GPP and the Box Language</term>
      <listitem>
	<para>
	  For generating and implementing pretty-printers.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>XTC</term>
      <listitem>
	<para>
	  For composing individual transformation tools into a
	  complete transformation systems.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    Exactly what all this means will become clear to you as we move
    along in this tutorial.
  </para>
</section>
  
<section>
  <title>Outline</title>

  <!-- TODO: outline must be updated -->
  <para>
    The rest of this tutorial is organized as follows. First, we will
    discuss how we represent programs in Stratego/XT. Afterwards, we
    will discuss the Stratego language itself, which our primary tool
    for manipulating the programs. We will then cover how to construct
    parsers using the syntax definition formalism SDF.  We round off
    with a brief guide to the most important tools in the XT toolkit.
  </para>
  
</section>

</chapter>

module til-dce
imports TIL til-eval liblib
rules

  ElimDecl : 
    [Declaration(x) | st*] -> st*
    where <not(VarUsed)> Var(x)

  ElimAssign :
    Assign(x, e) -> Block([])
    where <not(VarNeeded)> Var(x)

  ElimIf :
    IfElse(e, [], []) -> Block([])

strategies

  io-til-dce = 
    io-wrap(dce-program)

  dce-stat = debug(!"in: "); (
    ElimAssign
    <+ dce-assign 
    <+ dce-proccall
    <+ dce-if; try(ElimIf)
    <+ dce-block
    <+ dce-while
  ); debug(!"out: ")

  dce-program = 
    Program(dce-stats)

  dce-block =
    Block(dce-stats)

  dce-stats = debug(!"dce-stats in: "); (
    dce-stats-decl
    <+ dce-stats-other 
    <+ []
  ); debug(!"dce-stats out: ")

  dce-stats-decl = 
    ?[Declaration(x) | _]
    ; {| VarNeeded, VarUsed 
       : rules(
           VarNeeded+x :- Var(x)
           VarUsed+x   :- Var(x)
         )
       ; [id | dce-stats]
       ; debug(!"a: ")
       ; try(ElimDecl)
       ; debug(!"VarNeeded: ")
       ; dr-print-rule-set(|"VarNeeded")
       ; debug(!"VarUsed: ")
       ; dr-print-rule-set(|"VarUsed")
       |}
       ; debug(!"c: ")
       ; debug(!"VarNeeded: ")
       ; dr-print-rule-set(|"VarNeeded")
       ; debug(!"VarUsed: ")
       ; dr-print-rule-set(|"VarUsed")

  dce-stats-other =
    [not(?Declaration(_)) | dce-stats]
    ; [dce-stat | id]
    ; try(?[Block([]) | <id>])

  dce-assign = 
    ?Assign(x, _)
    ; rules( VarNeeded.x :- Var(x) )
    ; Assign(id, declare-var-needed)

  dce-proccall =
    ProcCall(id, map(declare-var-needed))

  declare-var-needed = 
    alltd({x :
      ?Var(x)
      ; rules(
          VarNeeded.x : Var(x)
          VarUsed.x   : Var(x)
         )
    })

  dce-if =
    (IfElse(id,dce-stats,id) /VarNeeded,VarUsed\ IfElse(id,id,dce-stats))
    ; IfElse(declare-var-needed, id, id)

  dce-while =
    ?While(_, _)
    ; (\VarNeeded,VarUsed/* While(declare-var-needed, dce-stats))

In this tutorial we will write a tool that transforms simple Java code
to C. As an example, we will use this Java source file:

<verbatim>
class Try
{
  public int x;
  public double y;

  public void set(int x, double y1)
  {
    this.x = x;
    y = y1;
  }

  public void print()
  {
    System.out.println("x = " + x + ", y = " + y);
  }

  public static void main(String[] args)
  {
    Try t = new Try();
    t.set(7, 8.5);
    t.print();
  }
}
</verbatim>

----------------------------

and we want to transform this to:
----------------------------
#include <stdio.h>

struct Try
{
   int x;
   double y;
};

int main(int argc, char** args)
{
   int a;
   int b;
   double c = 2.5;
   printf("%d %d %f\n", a, b ,c);
}

void int getX(Try* this)
{
  return *this.x;
}

void set(Try* this, int x, double z)
{
   *this.x = x;
   *this.y = z;
}
----------------------------

Let's first setup the basic transformation.class Try

java2c.str:
----------------------------------------------------
module java2c
imports
  liblib Java-15 C

strategies

  main =
    io-wrap(java2c)

  java2c = id
----------------------------------------------------

Compile:
----------------------------------------------------
$ strc -i java2c.str `strcflags java-front c-tools` -la stratego-lib
----------------------------------------------------

where strcflags is an alias:
----------------------------------------------------
alias strcflags="pkg-config --variable=strcflags "
----------------------------------------------------

Of course you can also enter the plain -I arguments. Include the
directories share/package and the share/sdf/package.

Time for some action:
----------------------------------------------------
$ parse-java -i Try.java | ./java2c | pp-aterm
----------------------------------------------------

Well, of course this tool is pretty useless since it does nothing. So,
let's produce some plain C code first. We are going to use concrete
syntax immediately.

Create a file java2c.meta:
-----------------------------
Meta([
  Syntax("Stratego-C")
])
-----------------------------

To test the concrete syntax support, we are just going to generate a
simple C file module.

First try:
-----------------------------
  java2c =
    !translation-unit |[ #include <stdio.h> ]|
-----------------------------

Too bad, that does not compile. The compiler complains about the ] of
]|. This rather tricky: the syntax definition of C defines that
pre-processing lines should be termined by a newline. So, let's add
some whitespace:

-----------------------------
  java2c =
    !translation-unit |[
      #include <stdio.h>
    ]|
-----------------------------

Great, that compiles. Run:

-----------------------------
$ parse-java -i Try.java | ./java2c | pp-c
#include <stdio.h>

-----------------------------

Excellent, but not very interesting. Let's add a main function.

-----------------------------
  java2c =
    !translation-unit |[
      #include <stdio.h>

      void main(int argc, char** args)
      {
        printf("Hi there!");
      }
    ]|
-----------------------------

Ok, it compiles. Run it.
-----------------------------
$ parse-java -i Try.java | ./java2c | pp-c
#include <stdio.h>

void main (int argc, char * * args)
{
  printf(Hi there!);
}
-----------------------------

Humz, great, but that pretty-printer sucks. It does not quote the
literal! So, we are going to report a bug to our dear Stratego
developers. (browse to stratego.org)

Excellent, we have an issue:
https://catamaran.labs.cs.uu.nl/jira/browse/STR-283

Of course we are hackers: we are not going to wait for a fix and are
going to use a dirty workaround! Let's try to use two double quotes.

-----------------------------
  java2c =
    !translation-unit |[
      #include <stdio.h>

      void main(int argc, char** args)
      {
        printf("\"Hi there!\"");
      }
    ]|
-----------------------------

Run it:
-----------------------------
martin@logistico:~/tmp/java2c> parse-java -i Try.java | ./java2c | pp-c
#include <stdio.h>

void main (int argc, char * * args)
{
  printf("Hi there!");
}
-----------------------------

Hehe, that works. Fooled you, crappy pretty-printer!

-----------------------------


-----------------------------